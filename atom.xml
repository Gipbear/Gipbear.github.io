<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grizzly&#39;s daily</title>
  
  
  <link href="https://gipbear.github.io/atom.xml" rel="self"/>
  
  <link href="https://gipbear.github.io/"/>
  <updated>2022-03-06T06:37:16.833Z</updated>
  <id>https://gipbear.github.io/</id>
  
  <author>
    <name>Grizzly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python多进程-multiprocessing</title>
    <link href="https://gipbear.github.io/2022/03/06/python%E5%A4%9A%E8%BF%9B%E7%A8%8B-multiprocessing/"/>
    <id>https://gipbear.github.io/2022/03/06/python%E5%A4%9A%E8%BF%9B%E7%A8%8B-multiprocessing/</id>
    <published>2022-03-06T06:13:29.000Z</published>
    <updated>2022-03-06T06:37:16.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于python中多进程的使用，提高运行速度。</p></blockquote><span id="more"></span><h2 id="官方文档">官方文档</h2><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#module-multiprocessing"><code>multiprocessing</code></a> 是一个支持使用与 <a href="https://docs.python.org/zh-cn/3/library/threading.html#module-threading"><code>threading</code></a> 模块类似的 API 来产生进程的包。 <a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#module-multiprocessing"><code>multiprocessing</code></a> 包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-global-interpreter-lock">全局解释器锁</a>。 因此，<a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#module-multiprocessing"><code>multiprocessing</code></a> 模块允许程序员充分利用给定机器上的多个处理器。 它在 Unix 和 Windows 上均可运行。 <a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#module-multiprocessing"><code>multiprocessing</code></a> 模块还引入了在 <a href="https://docs.python.org/zh-cn/3/library/threading.html#module-threading"><code>threading</code></a> 模块中没有的API。一个主要的例子就是 <a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.pool.Pool"><code>Pool</code></a> 对象，它提供了一种快捷的方法，赋予函数并行化处理一系列输入值的能力，可以将输入数据分配给不同进程处理（数据并行）。下面的例子演示了在模块中定义此类函数的常见做法，以便子进程可以成功导入该模块。</p></blockquote><h2 id="学习案例">学习案例</h2><p>使用 <code>time.sleep</code> 来模拟一个函数可能会耗费大量时间。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(x**<span class="number">2</span>, end=<span class="string">' | '</span>)</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="普通调用函数">普通调用函数</h3><p>首先使用普通方法多次调用，这里使用 <code>map()</code> 函数，也可以选择使用循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="comment"># list函数使得map解析，否则不会触发map</span></span><br><span class="line">    <span class="built_in">list</span>(<span class="built_in">map</span>(func, [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"\n一共耗时<span class="subst">{end_time-start_time}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>输出结果</strong>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 | 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 |</span><br><span class="line">一共耗时20.07989525794983</span><br></pre></td></tr></tbody></table></figure><h3 id="使用进程池调用函数">使用进程池调用函数</h3><p>这里使用进程池的 <code>map</code> 方法</p><blockquote><p>map(func, iterable[, chunksize])</p><p>内置 <code>map()</code> 函数的并行版本 (但它只支持一个 <code>iterable</code> 参数，对于多个可迭代对象请参阅 <code>starmap())</code>。它会保持阻塞直到获得结果。 这个方法会将可迭代对象分割为许多块，然后提交给进程池。可以将 <code>chunksize</code> 设置为一个正整数从而（近似）指定每个块的大小可以。 注意对于很长的迭代对象，可能消耗很多内存。可以考虑使用 <code>imap()</code> 或 <code>imap_unordered()</code> 并且显示指定 <code>chunksize</code> 以提升效率。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">with</span> Pool(<span class="number">5</span>) <span class="keyword">as</span> p:</span><br><span class="line">        p.<span class="built_in">map</span>(func, [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line">    <span class="comment"># list(map(func, [i for i in range(10)]))</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"\n一共耗时<span class="subst">{end_time-start_time}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>输出结果</strong>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 | 36 | 1 | 49 | 4 | 25 | 9 | 64 | 16 | 81 | </span><br><span class="line">一共耗时4.738358020782471</span><br></pre></td></tr></tbody></table></figure><h2 id="结论">结论</h2><p>可以发现，使用普通的方法对同一个复杂函数调用多次，那么将会花费线性时间来处理。</p><p>而当使用了 <code>multiprocessing.Pool</code> 时，那么则会使得该函数并行处理，效率得到极大提升。</p><h2 id="参考">参考</h2><ul><li><a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#">官方文档</a></li><li><a href="https://blog.csdn.net/wulitaotao96/article/details/111914021">Python3中利用multiprocessing进行数据并行处理</a></li></ul><h2 id="个人收获">个人收获</h2><p>在华为一面中遇到问关于数据处理时，面对大量数据如何进行读取，是否会多线程的使用时有所欠缺，这次的学习使得补充了这部分的知识点，至于工作中可能会使用的更多方法则需要进一步了解。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于python中多进程的使用，提高运行速度。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="https://gipbear.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="多进程" scheme="https://gipbear.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>numpy学习——04数组操作</title>
    <link href="https://gipbear.github.io/2022/02/24/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9404%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://gipbear.github.io/2022/02/24/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9404%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-24T09:05:17.000Z</published>
    <updated>2022-03-06T06:37:33.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是根据 <code>DataWhale</code>『巨硬的 <code>numpy</code>』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.</p><p>详细的代码我也放入了天池学习的<a href="https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营">AI训练营</a>合集中</p></blockquote><span id="more"></span><h2 id="数组形状">数组形状</h2><h2 id="个人收获">个人收获</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是根据 &lt;code&gt;DataWhale&lt;/code&gt;『巨硬的 &lt;code&gt;numpy&lt;/code&gt;』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.&lt;/p&gt;
&lt;p&gt;详细的代码我也放入了天池学习的&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营&quot;&gt;AI训练营&lt;/a&gt;合集中&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="numpy" scheme="https://gipbear.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy学习——03索引切片</title>
    <link href="https://gipbear.github.io/2022/02/23/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9403%E7%B4%A2%E5%BC%95%E5%88%87%E7%89%87/"/>
    <id>https://gipbear.github.io/2022/02/23/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9403%E7%B4%A2%E5%BC%95%E5%88%87%E7%89%87/</id>
    <published>2022-02-23T11:27:28.000Z</published>
    <updated>2022-02-24T09:04:50.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是根据 <code>DataWhale</code>『巨硬的 <code>numpy</code>』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.</p><p>详细的代码我也放入了天池学习的<a href="https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营">AI训练营</a>合集中</p></blockquote><span id="more"></span><h2 id="副本与视图">副本与视图</h2><p>需要注意的是, 对数组的复制不能简单的直接使用赋值符号, 在数组中存在<strong>副本</strong>与<strong>视图</strong>一说.</p><ul><li><strong>副本</strong>可以使用 <code>copy()</code> 来创建, 并且对副本数据进行修改, 并不会影响原本的数据, 它们指向<strong>不同的内存</strong>.</li><li>但是对于<strong>视图</strong>, 却是指向<strong>同一个内存地址</strong>的, 修改视图也会修改原始数据.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">x = np.ones((<span class="number">4</span>,<span class="number">4</span>),dtype=<span class="string">'int32'</span>)</span><br><span class="line">y = x</span><br><span class="line">y[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [[1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br><span class="line"></span><br><span class="line">x = np.ones((<span class="number">4</span>,<span class="number">4</span>),dtype=<span class="string">'int32'</span>)</span><br><span class="line">y = x.copy()</span><br><span class="line">y[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [[1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 0 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br></pre></td></tr></tbody></table></figure><p>这点 <code>copy()</code> 可以与之前在 <code>list</code> 时提到过的<a href="https://gipbear.github.io/2022/02/12/python数据结构/#浅拷贝与深拷贝">深拷贝与浅拷贝</a>进行对比学习, 两者的 <code>copy()</code> 并不一样, 更严格来说是 <code>list</code> 和 <code>ndarray</code> 不一样.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l1 = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">l2 = l1.copy()</span><br><span class="line">l2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"><span class="comment"># [[999, 2], [3, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line"><span class="comment"># [[999, 2], [3, 4]]</span></span><br><span class="line"></span><br><span class="line">a1 = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">a2 = a1.copy()</span><br><span class="line">a2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line"><span class="comment"># [[0 1]</span></span><br><span class="line"><span class="comment">#  [2 3]]</span></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"><span class="comment"># [[999   1]</span></span><br><span class="line"><span class="comment">#  [  2   3]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="索引和切片">索引和切片</h2><h3 id="整数索引">整数索引</h3><p>想要直接获取数组中的单个元素,直接使用和 <code>list</code> 类似的方法就可以了, 也可以使用类似坐标形式的 <code>[1,1]</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])  <span class="comment"># [0 1 2]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>][<span class="number">1</span>])  <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># 4</span></span><br></pre></td></tr></tbody></table></figure><h3 id="切片">切片</h3><p>切片操作是指抽取数组的一部分元素生成新数组.</p><blockquote><p>需要注意的是:</p><ul><li>对 <code>list</code> 进行切片操作得到的数组是原数组的<strong>副本</strong>;</li><li>而对 <code>Numpy</code> 数据进行切片操作得到的数组则是指向相同内存的<strong>视图</strong>.</li></ul></blockquote><p>由于和 list 切片方法类似, 所以下面就举几个例子</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>:<span class="number">2</span>])  <span class="comment"># [1 2]</span></span><br><span class="line"><span class="comment">#用下标0~5,以2为步长选取数组</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># [2 4]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">2</span>:])  <span class="comment"># [3 4 5 6 7 8]</span></span><br><span class="line"><span class="built_in">print</span>(x[:-<span class="number">2</span>])  <span class="comment"># [1 2 3 4 5 6]</span></span><br><span class="line"><span class="built_in">print</span>(x[:])  <span class="comment"># [1 2 3 4 5 6 7 8]</span></span><br><span class="line"><span class="comment">#利用负数下标翻转数组</span></span><br><span class="line"><span class="built_in">print</span>(x[::-<span class="number">1</span>])  <span class="comment"># [8 7 6 5 4 3 2 1]</span></span><br></pre></td></tr></tbody></table></figure><p>对于二维的数组, <code>[x][y]</code> 这种格式的切片与 <code>[x, y]</code> 格式的切片结果是不一样的.</p><ul><li><code>[x, y]</code>: 是同时对两个维度『行和列』进行切片</li><li><code>[x][y]</code>: 是先对第一维『行』<code>axis=0</code> 进行切片 <code>[x]</code>, 然后在此基础上再进行第一维『行』 <code>axis=0</code> 切片 <code>[y]</code>得到最终结果, 所以实际上是<strong>对一个维度切片两次</strong>, 而不是进行二维的切片.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x[:<span class="number">1</span>])</span><br><span class="line"><span class="comment"># [[0 1 2]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># [[0 1]</span></span><br><span class="line"><span class="comment">#  [3 4]]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>:<span class="number">2</span>][<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># [[0 1 2]</span></span><br><span class="line"><span class="comment">#  [3 4 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[:, :])</span><br><span class="line"><span class="comment"># [[0 1 2]</span></span><br><span class="line"><span class="comment">#  [3 4 5]</span></span><br><span class="line"><span class="comment">#  [6 7 8]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="dots-索引">dots 索引</h3><p><code>numpy</code> 可以使用 <code>...</code> 来表示足够多的冒号, 从而在高维数组切片中表示完整的索引列表.</p><p>比如，如果 x 是 5 维数组：</p><ul><li><code>x[1,2,...]</code> 等价于 <code>x[1,2,:,:,:]</code></li><li><code>x[...,3]</code> 等价于 <code>x[:,:,:,:,3]</code></li><li><code>x[4,...,5,:]</code> 等价于 <code>x[4,:,:,5,:]</code></li></ul><h3 id="整数数组索引和切片">整数数组索引和切片</h3><p>索引中使用 <code>list</code>, 来表示同时取多个值.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">13</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[ 1  2  3  4]</span></span><br><span class="line"><span class="comment">#  [ 5  6  7  8]</span></span><br><span class="line"><span class="comment">#  [ 9 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(a[[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [[ 1  2  3  4]</span></span><br><span class="line"><span class="comment">#  [ 9 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(a[:, [<span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [[ 1  3]</span></span><br><span class="line"><span class="comment">#  [ 5  7]</span></span><br><span class="line"><span class="comment">#  [ 9 11]]</span></span><br></pre></td></tr></tbody></table></figure><p>整数数组索引也可以结合 <code>np.take(a, indices, axis=None, out=None, mode='raise')</code>使用, 可以指定索引作用的轴, 若不指定轴, 则是数组按行顺序的第几个, 更多参数可以另外查询.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">13</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(np.take(x, [<span class="number">0</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="comment"># [ 1 10]</span></span><br><span class="line"><span class="built_in">print</span>(np.take(x, [<span class="number">0</span>,<span class="number">2</span>], axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [[ 1  2  3  4]</span></span><br><span class="line"><span class="comment">#  [ 9 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.take(x, [<span class="number">0</span>,<span class="number">2</span>], axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [[ 1  3]</span></span><br><span class="line"><span class="comment">#  [ 5  7]</span></span><br><span class="line"><span class="comment">#  [ 9 11]]</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是: 整数索引数组得到结果是<strong>新数组(新副本)</strong>, 而切片得到的结果是数组的<strong>子数组(小视图)</strong>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">y = x[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">y[<span class="number">0</span>] = <span class="number">77</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [ 1 77  3  4  5]</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [2 3]</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">z = x[[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">z[<span class="number">0</span>] = <span class="number">66</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [1 2 3 4 5]</span></span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># [66  3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="布尔索引">布尔索引</h3><p>布尔索引是由布尔值组成的索引, 一般作用就是根据条件进行筛选.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">y = x &gt; <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [False False False False False  True  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(x[x &gt; <span class="number">5</span>])</span><br><span class="line"><span class="comment"># [6 7 8]</span></span><br></pre></td></tr></tbody></table></figure><p>如果需要对布尔索引取反, 则可以使用 <code>logical_not</code> 操作, 同理, 还有 <code>and, or, xor</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([np.nan, <span class="number">1</span>, <span class="number">2</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">y = np.logical_not(np.isnan(x))</span><br><span class="line"><span class="built_in">print</span>(x[y])</span><br><span class="line"><span class="comment"># [1. 2. 3. 4. 5.]</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是, 对于多维数组, 使用布尔索引筛选得到的结果依旧是一维的.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">y = x &gt; <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [[False False False]</span></span><br><span class="line"><span class="comment">#  [False False False]</span></span><br><span class="line"><span class="comment">#  [ True  True  True]]</span></span><br><span class="line"><span class="built_in">print</span>(x[x &gt; <span class="number">5</span>])</span><br><span class="line"><span class="comment"># [6 7 8]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="个人收获">个人收获</h2><p>学到了 <code>dots</code> 索引, 之前觉得跟 <code>:</code> 完全一模一样, 因为是在二维数组中, 但是到了高维数组中就可以实现简单写法了.</p><p>使用 <code>logical_and</code>等 对布尔数组进行逻辑操作的『优雅』写法.</p><p>最重要的是理清楚了<strong>副本与视图</strong>之间的关系, 使得之前进行数组操作的一些迷糊地方更深刻, 总结来说还是深浅拷贝的坑 <span class="github-emoji"><span>💫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>, 这次整理清楚了!</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是根据 &lt;code&gt;DataWhale&lt;/code&gt;『巨硬的 &lt;code&gt;numpy&lt;/code&gt;』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.&lt;/p&gt;
&lt;p&gt;详细的代码我也放入了天池学习的&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营&quot;&gt;AI训练营&lt;/a&gt;合集中&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="numpy" scheme="https://gipbear.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy学习——02数据类型</title>
    <link href="https://gipbear.github.io/2022/02/20/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9402%E5%B8%B8%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://gipbear.github.io/2022/02/20/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9402%E5%B8%B8%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-02-19T16:45:53.000Z</published>
    <updated>2022-02-21T15:55:11.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是根据 <code>DataWhale</code>『巨硬的 <code>numpy</code>』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.</p><p>详细的代码我也放入了天池学习的<a href="https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营">AI训练营</a>合集中</p></blockquote><span id="more"></span><h2 id="常量">常量</h2><h3 id="空值">空值</h3><p>使用 <code>np.nan</code> 来表示空值, 需要注意的是: 空值之间并<strong>不相等</strong>!</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.nan == np.nan)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(np.nan != np.nan)  <span class="comment"># True</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用 <code>np.isnan</code> 来检查空值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, np.nan, <span class="number">10</span>])</span><br><span class="line">y = np.isnan(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [False False False  True False]</span></span><br></pre></td></tr></tbody></table></figure><p>如果需要计算空值的个数, 则可以使用计算非零数 <code>count_nonzero</code> 来等价使用, 因为布尔值就分别代表了 <code>0</code> 和 <code>1</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = np.count_nonzero(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># 1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="无穷大">无穷大</h3><p>以下这几个都可以</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.inf</span><br><span class="line">np.Inf</span><br><span class="line">np.Infinity</span><br><span class="line">np.infty</span><br><span class="line">np.PINF</span><br></pre></td></tr></tbody></table></figure><h3 id="圆周率-pi">圆周率 <span class="math inline">\(\pi\)</span></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.pi</span><br></pre></td></tr></tbody></table></figure><h3 id="自然常数-e">自然常数 <span class="math inline">\(e\)</span></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.e</span><br></pre></td></tr></tbody></table></figure><h2 id="数据类型">数据类型</h2><p>在原生的 python 中, 数据类型较少, 但进行科学计算的时候, 需要对数据有更多的控制, 所以数据类型相对而言很丰富了.</p><p>在后续的创建数组时, 可以使用参数 <code>dtype</code> 来规定数据的类型. 与 python 原生类型相同的, 则会在类型后加入一个下划线以示区分, 例如 <code>bool_</code>, 常见的数据类型如下:</p><table><thead><tr class="header"><th>类型</th><th>备注</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>bool_ = bool8</td><td>8位</td><td>布尔类型</td></tr><tr class="even"><td>int8 = byte</td><td>8位</td><td>整型</td></tr><tr class="odd"><td>int16 = short</td><td>16位</td><td>整型</td></tr><tr class="even"><td>int32 = intc</td><td>32位</td><td>整型</td></tr><tr class="odd"><td>int_ = int64 = long = int0 = intp</td><td>64位</td><td>整型</td></tr><tr class="even"><td>uint8 = ubyte</td><td>8位</td><td>无符号整型</td></tr><tr class="odd"><td>uint16 = ushort</td><td>16位</td><td>无符号整型</td></tr><tr class="even"><td>uint32 = uintc</td><td>32位</td><td>无符号整型</td></tr><tr class="odd"><td>uint64 = uintp = uint0 = uint</td><td>64位</td><td>无符号整型</td></tr><tr class="even"><td>float16 = half</td><td>16位</td><td>浮点型</td></tr><tr class="odd"><td>float32 = single</td><td>32位</td><td>浮点型</td></tr><tr class="even"><td>float_ = float64 = double</td><td>64位</td><td>浮点型</td></tr><tr class="odd"><td>str_ = unicode_ = str0 = unicode</td><td>Unicode 字符串</td><td></td></tr><tr class="even"><td>datetime64</td><td>日期时间类型</td><td></td></tr><tr class="odd"><td>timedelta64</td><td>表示两个时间之间的间隔</td><td></td></tr></tbody></table><p>而我们内建的数据类型会有一个与其唯一对应的字符代码, 如下:</p><table><thead><tr class="header"><th>字符</th><th>对应类型</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>b</td><td>boolean</td><td>'b1'</td></tr><tr class="even"><td>i</td><td>signed integer</td><td>'i1', 'i2', 'i4', 'i8'</td></tr><tr class="odd"><td>u</td><td>unsigned integer</td><td>'u1', 'u2' ,'u4' ,'u8'</td></tr><tr class="even"><td>f</td><td>floating-point</td><td>'f2', 'f4', 'f8'</td></tr><tr class="odd"><td>c</td><td>complex floating-point</td><td></td></tr><tr class="even"><td>m</td><td>timedelta64</td><td>表示两个时间之间的间隔</td></tr><tr class="odd"><td>M</td><td>datetime64</td><td>日期时间类型</td></tr><tr class="even"><td>O</td><td>object</td><td></td></tr><tr class="odd"><td>S</td><td>(byte-)string</td><td>S3表示长度为3的字符串</td></tr><tr class="even"><td>U</td><td>Unicode</td><td>Unicode 字符串</td></tr><tr class="odd"><td>V</td><td>void</td><td></td></tr></tbody></table><h3 id="查看数据类型">查看数据类型</h3><p><code>type</code> 是查看对象的类型, 而想要查看矩阵内的元素类型, 则可以使用 <code>dtype</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], dtype=np.float32)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br></pre></td></tr></tbody></table></figure><h3 id="日期和时间">日期和时间</h3><h4 id="日期时间类型-datetime64">日期时间类型 datetime64</h4><p>很多情况下, 我们需要字符串日期转化为时间类型, 在 <code>numpy</code> 中可以很方便的将字符串转换成时间日期类型 <code>datetime64</code>.</p><table><thead><tr class="header"><th>日期单位</th><th>代码含义</th><th>时间单位</th><th>代码含义</th></tr></thead><tbody><tr class="odd"><td>Y</td><td>年</td><td>h</td><td>小时</td></tr><tr class="even"><td>M</td><td>月</td><td>m</td><td>分钟</td></tr><tr class="odd"><td>W</td><td>周</td><td>s</td><td>秒</td></tr><tr class="even"><td>D</td><td>天</td><td>ms</td><td>毫秒</td></tr><tr class="odd"><td>-</td><td>-</td><td>us</td><td>微秒</td></tr><tr class="even"><td>-</td><td>-</td><td>ns</td><td>纳秒</td></tr><tr class="odd"><td>-</td><td>-</td><td>ps</td><td>皮秒</td></tr><tr class="even"><td>-</td><td>-</td><td>fs</td><td>飞秒</td></tr><tr class="odd"><td>-</td><td>-</td><td>as</td><td>阿托秒</td></tr></tbody></table><p>从字符串创建 <code>datetime64</code> 类型时, 会<strong>自动选择</strong>对应的单位.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.datetime64(<span class="string">'2022-02'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02 datetime64[M]</span></span><br><span class="line"></span><br><span class="line">a = np.datetime64(<span class="string">'2022-02-19'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02-19 datetime64[D]</span></span><br><span class="line"></span><br><span class="line">a = np.datetime64(<span class="string">'2022-02-19 17'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02-19T17 datetime64[h]</span></span><br><span class="line"></span><br><span class="line">a = np.datetime64(<span class="string">'2022-02-19 17:16'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02-19T17:16 datetime64[m]</span></span><br><span class="line"></span><br><span class="line">a = np.datetime64(<span class="string">'2022-02-19 17:16:02'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02-19T17:16:02 datetime64[s]</span></span><br></pre></td></tr></tbody></table></figure><p>但也能够强制指定类型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.datetime64(<span class="string">'2022-02'</span>, <span class="string">'Y'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022 datetime64[Y]</span></span><br></pre></td></tr></tbody></table></figure><p>在时间数组中, 若单位不统一, 则全部转化为最小的单位.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="string">'2022-02'</span>, <span class="string">'2022-02-19'</span>, <span class="string">'2020-02-19 17:16'</span>], dtype=<span class="string">'datetime64'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)</span><br><span class="line"><span class="comment"># ['2022-02-01T00:00' '2022-02-19T00:00' '2020-02-19T17:16'] datetime64[m]</span></span><br></pre></td></tr></tbody></table></figure><p>使用 <code>arange</code> 也可以生成时间类型的数组, 若时间单位不一致, 则按照较小的单位作为间隔生成时间区间.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="string">'2022-02'</span>, <span class="string">'2022-05'</span>, dtype=np.datetime64)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># ['2022-02' '2022-03' '2022-04']</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="string">'2022'</span>, <span class="string">'2022-05'</span>, dtype=np.datetime64)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># ['2022-01' '2022-02' '2022-03' '2022-04']</span></span><br></pre></td></tr></tbody></table></figure><h4 id="日期时间差-timedelta64">日期时间差 timedelta64</h4><p><code>timedelta64</code> 表示两个 <code>datetime64</code> 之间的差, 其单位与相减运算中的两个 <code>datetime64</code> 中的较小的单位保持一致.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.datetime64(<span class="string">'2022-02-19'</span>) - np.datetime64(<span class="string">'2022-02-02'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 17 days timedelta64[D]</span></span><br><span class="line"></span><br><span class="line">b = np.datetime64(<span class="string">'2022-02-19'</span>) - np.datetime64(<span class="string">'2022-02-18 08'</span>)</span><br><span class="line"><span class="built_in">print</span>(b, b.dtype)  <span class="comment"># 16 hours timedelta64[h]</span></span><br><span class="line"></span><br><span class="line">c = np.datetime64(<span class="string">'2022-02-19'</span>) - np.datetime64(<span class="string">'2022-02-17 23:00'</span>, <span class="string">'D'</span>)</span><br><span class="line"><span class="built_in">print</span>(c, c.dtype)  <span class="comment"># 2 days timedelta64[D]</span></span><br></pre></td></tr></tbody></table></figure><p>除了计算<strong>时间差</strong>得到 <code>timedelta64</code> 类型, 该类型还可以直接创建, 表示有多少个时间单位, 并可以进行<strong>四则运算</strong>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.timedelta64(<span class="number">2</span>, <span class="string">'Y'</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2 years</span></span><br><span class="line">b = np.timedelta64(a, <span class="string">'M'</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 24 months</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要注意的是: 'Y'和'M'类型是无法与其他类型进行计算的, 因为无法确定一年有多少天, 一个月有多少天的问题.</p></blockquote><p>那么这样可以进行加法计算, 实现在<strong>多久之前</strong>和<strong>多久之后</strong>的计算.</p><p>计算结果的单位依旧以较小的为准</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.datetime64(<span class="string">'2022-02'</span>) + np.timedelta64(<span class="number">20</span>, <span class="string">'D'</span>)</span><br><span class="line"><span class="built_in">print</span>(a, a.dtype)  <span class="comment"># 2022-02-21 datetime64[D]</span></span><br><span class="line"></span><br><span class="line">b = np.datetime64(<span class="string">'2022-02-15 00:00'</span>) + np.timedelta64(<span class="number">12</span>, <span class="string">'h'</span>)</span><br><span class="line"><span class="built_in">print</span>(b, b.dtype)  <span class="comment"># 2022-02-15T12:00 datetime64[m]</span></span><br></pre></td></tr></tbody></table></figure><p>数组的时间格式 <code>datetime64</code> 和 <code>datetime</code> 库中的时间格式 <code>datetime</code> 相互转换</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.datetime(year=<span class="number">2022</span>, month=<span class="number">2</span>, day=<span class="number">19</span>, hour=<span class="number">17</span>, minute=<span class="number">22</span>, second=<span class="number">30</span>)</span><br><span class="line">dt64 = np.datetime64(dt, <span class="string">'s'</span>)</span><br><span class="line"><span class="built_in">print</span>(dt64, dt64.dtype)</span><br><span class="line"><span class="comment"># 2022-02-19T17:22:30 datetime64[s]</span></span><br><span class="line"></span><br><span class="line">dt2 = dt64.astype(datetime.datetime)</span><br><span class="line"><span class="built_in">print</span>(dt2, <span class="built_in">type</span>(dt2))</span><br><span class="line"><span class="comment"># 2022-02-19 17:22:30 &lt;class 'datetime.datetime'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="工作日">工作日</h4><p>有些应用场景只有工作日的数据需要操作, 那么在这里也包含了 <code>busday</code> 功能, 可以计算 <code>offset</code> 天后的工作日.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2022-02-18 是星期五</span></span><br><span class="line">a = np.busday_offset(<span class="string">'2022-02-18'</span>, offsets=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2022-02-21</span></span><br></pre></td></tr></tbody></table></figure><p>若操作的时间本身不是工作日, 则会报错, 例如 <code>'2022-02-19'</code> 是周六, 那么将会抛出 <code>ValueError</code>.</p><p>这时可以使用参数 <code>roll</code> 来找到前一个 (<code>forward</code>) 或后一个 (<code>backward</code>) 工作日.</p><blockquote><p>前一个指: 例如 21 号在 19 号之前; 后一个指: 例如 18 号在 19 号之后; 这个概念和平时理解的前天后天顺序不一样, 是类似数字大小的概念 <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2022-02-19 是星期六</span></span><br><span class="line">a = np.busday_offset(<span class="string">'2022-02-19'</span>, offsets=<span class="number">1</span>, roll=<span class="string">'forward'</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2022-02-22</span></span><br><span class="line">b = np.busday_offset(<span class="string">'2022-02-19'</span>, offsets=<span class="number">1</span>, roll=<span class="string">'backward'</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 2022-02-21</span></span><br></pre></td></tr></tbody></table></figure><p>判断是否是工作日也很简单, 使用 <code>np.is_busday</code> 即可.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.is_busday(<span class="string">'2022-02-18'</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># True</span></span><br><span class="line">b = np.is_busday(<span class="string">'2022-02-19'</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure><p>例如统计数组中的工作日天数, 可以结合布尔值和计算非零数的方法 <code>count_nonzero</code> 进行解决.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="string">'2022-02-01'</span>, <span class="string">'2022-03'</span>, dtype=np.datetime64)</span><br><span class="line">cnt = np.count_nonzero(np.is_busday(a))</span><br><span class="line"><span class="built_in">print</span>(cnt)  <span class="comment"># 20</span></span><br></pre></td></tr></tbody></table></figure><p>对于日期区间内的工作日天数, 则可以直接使用 <code>busday_count</code> 来计算.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnt = np.busday_count(<span class="string">'2022-02'</span>, <span class="string">'2022-03'</span>)</span><br><span class="line"><span class="built_in">print</span>(cnt)  <span class="comment"># 20</span></span><br></pre></td></tr></tbody></table></figure><p>最后, 工作日还可以进行自定义, <del>毕竟一周可不是只上班五天呢~ (不是)</del>. 使用 <code>0/1</code> 表示周几属于工作日.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2022-02-18 是星期五</span></span><br><span class="line"><span class="comment"># 自定义设置工作日为 一 二 三 四 六</span></span><br><span class="line">a = np.is_busday(<span class="string">'2022-02-18'</span>, weekmask=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">b = np.is_busday(<span class="string">'2022-02-19'</span>, weekmask=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># True</span></span><br></pre></td></tr></tbody></table></figure><h2 id="个人收获">个人收获</h2><p>本章对数据类型进行了一个汇总, 尤其是数据类型对于的字符代码, 之前不是很清楚什么 <code>U</code> 啊之类的, 这次整理好了, 可以方便以后查询.</p><p>还有日期类型, 之前还好奇为何多了一个 <code>64</code> 在 <code>datetime</code> 后面, 原来是为了进行区分. 并熟悉了工作日的使用方法.</p><p>还有一个就是学到了计算非零数的函数 <code>count_nonzero</code> 可以与布尔数组联合使用, 达到计算满足条件的元素个数的目的.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是根据 &lt;code&gt;DataWhale&lt;/code&gt;『巨硬的 &lt;code&gt;numpy&lt;/code&gt;』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.&lt;/p&gt;
&lt;p&gt;详细的代码我也放入了天池学习的&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营&quot;&gt;AI训练营&lt;/a&gt;合集中&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="numpy" scheme="https://gipbear.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy学习——01数组创建</title>
    <link href="https://gipbear.github.io/2022/02/18/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9401%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA/"/>
    <id>https://gipbear.github.io/2022/02/18/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9401%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA/</id>
    <published>2022-02-18T15:59:53.000Z</published>
    <updated>2022-02-23T13:18:10.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是根据 <code>DataWhale</code>『巨硬的 <code>numpy</code>』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.</p><p>详细的代码我也放入了天池学习的<a href="https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营">AI训练营</a>合集中</p></blockquote><span id="more"></span><h2 id="安装和导库">安装和导库</h2><p>首先是安装 <code>numpy</code>.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></tbody></table></figure><p>然后是导入库, 通常简写为 <code>np</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 后续的画图工具</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></tbody></table></figure><h2 id="数组的创建和生成">数组的创建和生成</h2><p>数组 <code>ndarry</code> 是 <code>numpy</code> 内最基本的数据结构, 本意是: <code>n-dim array</code>, 即 <code>n</code> 维的数组. 判断数组维度, 一般是根据轴 <code>(axis)</code> 来判断, 几个轴就是几维, 这个参数后续再提, 很多方法中会使用. 更简单的, 可以直接<strong>数括号</strong> <span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p><p>首先创建和生成 <code>numpy</code> 数组对象 <code>array</code>, 通常我们有几种常见的创建方式:</p><ul><li>使用列表或元组</li><li>使用 <code>arange</code></li><li>使用 <code>linspace</code> / <code>logspace</code> (常用于绘制坐标轴)</li><li>使用 <code>ones</code> / <code>zeros</code></li><li>使用 <code>random</code> (常用于生成一些模拟数据)</li><li>从文件读取</li></ul><h3 id="使用列表创建">使用列表创建</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一个 list</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 输出 array([1, 2, 3])</span></span><br></pre></td></tr></tbody></table></figure><p>其中存在一个小数 <code>float</code>, 那么 <code>numpy</code> 就会为了保持数据类型相同, 都转换为 <code>float</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用二维 list （多维类似）</span></span><br><span class="line">np.array([[<span class="number">1</span>, <span class="number">2.</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></tbody></table></figure><p>如果指定了 <code>dtype</code>, 输入的值都会被转为对应的类型, 而且<strong>不会四舍五入</strong>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以直接指定数据类型</span></span><br><span class="line">lst = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6.8</span>]</span><br><span class="line">]</span><br><span class="line">np.array(lst, dtype=np.int32)</span><br><span class="line"><span class="comment"># array([[1, 2, 3],</span></span><br><span class="line"><span class="comment">#        [4, 5, 6]])</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-arange-生成">使用 arange 生成</h3><p><code>arange</code> 的原理类似于 python 内置的整数序列生成器 <code>range</code>, 通常在需要创建连续一维向量时使用.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建0-11的一维向量</span></span><br><span class="line">np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="comment"># array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般使用 reshape 直接转换为其他形状</span></span><br><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="comment">#        [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="comment">#        [ 8,  9, 10, 11]])</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是, <code>reshape</code> 前后的元素个数必须相同, 否则 <code>reshape</code> 会出现错误.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arange也可以是浮点数, reshape也可以有多个维度</span></span><br><span class="line">np.arange(<span class="number">10</span>, <span class="number">40</span>, <span class="number">2.5</span>).reshape(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([[[10. , 12.5],</span></span><br><span class="line"><span class="comment">#         [15. , 17.5]],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        [[20. , 22.5],</span></span><br><span class="line"><span class="comment">#         [25. , 27.5]],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        [[30. , 32.5],</span></span><br><span class="line"><span class="comment">#         [35. , 37.5]]])</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-linspacelogspace-生成">使用 linspace/logspace 生成</h3><ul><li><code>linspace</code> 是一个线性序列, 需要三个参数 (开始, 结尾, <strong>数量</strong>), 而不是步长, 这里需要注意.</li><li><code>logspace</code> 是 <code>linspace</code> 的扩展, 是指数序列, 需要的参数多了一个 <code>base</code>, 默认是 <code>10</code>.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性</span></span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([[0., 1., 2., 3., 4.],</span></span><br><span class="line"><span class="comment">#        [5., 6., 7., 8., 9.]])</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指数 base 默认为 10</span></span><br><span class="line">np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, base=np.e).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># array([[1.00000000e+00, 6.04964746e+00, 3.65982344e+01],</span></span><br><span class="line"><span class="comment">#        [2.21406416e+02, 1.33943076e+03, 8.10308393e+03]])</span></span><br></pre></td></tr></tbody></table></figure><p>画图观察一下(黑暗主题可能看不见坐标轴)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">20</span></span><br><span class="line">x = np.arange(N)</span><br><span class="line">y1 = np.linspace(<span class="number">0</span>, <span class="number">10</span>, N) * <span class="number">100</span></span><br><span class="line">y2 = np.logspace(<span class="number">0</span>, <span class="number">10</span>, N, base=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y2, <span class="string">'*'</span>);</span><br><span class="line">plt.plot(x, y1, <span class="string">'o'</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/2022/02/18/numpy%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9401%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA/linspace%E5%92%8Clogspace%E5%AF%B9%E6%AF%94.png" class="" title="linspace和logspace对比.png"><h3 id="补充-关于数组的比较">补充: 关于数组的比较</h3><p>比较的结果依旧是一个由布尔值组成的 <code>array</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不能直接用 if 判断 array 是否符合某个条件 cond1</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">cond1 = arr &gt; <span class="number">2</span></span><br><span class="line">cond1</span><br><span class="line"><span class="comment"># array([False, False,  True])</span></span><br></pre></td></tr></tbody></table></figure><p>如果需要进行 <code>if</code> 判断一些是否存在 <code>true</code>, 或者全部为 <code>true</code> 的, 则需要使用 <code>any()</code> 或 <code>all()</code> 来使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> cond1.<span class="built_in">any</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"只要有一个为True就可以，所以——我可以"</span>)</span><br><span class="line"><span class="keyword">if</span> cond1.<span class="built_in">all</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"所有值为True才可以，我正好这样"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-oneszerosfull-创建">使用 ones/zeros/full 创建</h3><p>需要常数值的矩阵时使用, 注意是有 <code>s</code> 的.</p><ul><li>零数组<ul><li>zeros()函数: 返回给定形状和类型的零数组.</li><li>zeros_like()函数: 返回与给定数组形状和类型相同的零数组.</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zeros 同理</span></span><br><span class="line">np.ones(shape=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[1., 1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1., 1.]])</span></span><br><span class="line"></span><br><span class="line">np.full(shape=(<span class="number">2</span>,<span class="number">3</span>), fill_value=<span class="number">666</span>)</span><br><span class="line"><span class="comment"># array([[666, 666, 666],</span></span><br><span class="line"><span class="comment">#        [666, 666, 666]])</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 像给定向量那样的 0 向量（ones_like 是 1 向量）</span></span><br><span class="line">np.zeros_like(np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)))</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-eyediag-创建">使用 eye/diag 创建</h3><ul><li>eye()函数: 返回一个对角线上为1, 其它地方为零的单位数组.</li><li>diag(v, k=0)函数: 提取对角线或构造对角数组, k代表向左上偏移几个单位.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x = np.eye(<span class="number">4</span>)  <span class="comment"># 同 np.identity(4)</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[1. 0. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 0. 1.]]</span></span><br><span class="line"></span><br><span class="line">x = np.eye(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[1. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0.]]</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[0 1 2]</span></span><br><span class="line"><span class="comment">#  [3 4 5]</span></span><br><span class="line"><span class="comment">#  [6 7 8]]</span></span><br><span class="line"><span class="built_in">print</span>(np.diag(x))  <span class="comment"># [0 4 8]</span></span><br><span class="line"><span class="built_in">print</span>(np.diag(x, k=<span class="number">1</span>))  <span class="comment"># [1 5]</span></span><br><span class="line"><span class="built_in">print</span>(np.diag(x, k=-<span class="number">1</span>))  <span class="comment"># [3 7]</span></span><br><span class="line"></span><br><span class="line">v = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">x = np.diag(v,k=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[1 0 0 0]</span></span><br><span class="line"><span class="comment">#  [0 3 0 0]</span></span><br><span class="line"><span class="comment">#  [0 0 5 0]</span></span><br><span class="line"><span class="comment">#  [0 0 0 7]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-random-生成">使用 random 生成</h3><p><code>random</code> 是本章相对重要且常用的内容, 一般用来生成用于测试的随机数组.</p><p>但是在<code>1.17</code>版本后, 更推荐使用<strong>新的API</strong>来生成, 即使用<code>rng = np.random.default_rng(seed)</code> 来获得 <code>Generator</code>, 在此基础上再进行各种分布的随机数生成.</p><h4 id="连续均匀分布">连续均匀分布</h4><p>产生符合 <strong>0-1 分布</strong>的随机数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个元素</span></span><br><span class="line">np.random.rand()</span><br><span class="line"><span class="comment"># 指定数组大小</span></span><br><span class="line">np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 与上一个同样, 但传入的是一个list或tuple表示数组形状</span></span><br><span class="line">np.random.random(size=(<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><p>指定上下限的随机数.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(-<span class="number">100</span>, <span class="number">100</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><p>使用推荐的 <code>default_rng</code> 的方法.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">10086</span>)</span><br><span class="line"><span class="comment"># 连续均匀分布用法</span></span><br><span class="line">rng.random(size=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[0.52249719, 0.59701344, 0.29232232],</span></span><br><span class="line"><span class="comment">#        [0.28906326, 0.63037747, 0.73431908]])</span></span><br><span class="line"><span class="comment"># 推荐的连续均匀分布</span></span><br><span class="line">rng.uniform(<span class="number">0</span>, <span class="number">1</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="离散均匀分布整数">离散均匀分布(整数)</h4><p>生成随机整数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成不超过10的2个随机整数</span></span><br><span class="line">np.random.randint(<span class="number">10</span>, size=<span class="number">2</span>)</span><br><span class="line">np.random.randint(<span class="number">20</span>, <span class="number">30</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><p>使用推荐的 <code>default_rng</code> 的方法.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 离散均匀分布</span></span><br><span class="line">rng.integers(<span class="number">10</span>, size=<span class="number">2</span>)</span><br><span class="line">rng.integers(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="标准正态分布">标准正态分布</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准正态分布</span></span><br><span class="line">np.random.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用推荐的 <code>default_rng</code> 的方法.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上面推荐的标准正态分布用法</span></span><br><span class="line">rng.standard_normal(size=(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="高斯分布">高斯分布</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高斯分布</span></span><br><span class="line">np.random.normal(loc=<span class="number">0</span>, scale=<span class="number">1</span>, size=(<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></tbody></table></figure><p>使用推荐的 <code>default_rng</code> 的方法.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rng.normal(loc=<span class="number">0</span>, scale=<span class="number">1</span>, size=(<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></tbody></table></figure><p>以上新旧版本的写法其实很类似, 简单来说就是使用了一个生成器 <code>rng</code> 来代替原本的 <code>np.random</code>, 习惯就好.</p><h3 id="从文件中读写矩阵">从文件中读写矩阵</h3><p>主要是用于加载已经进行预处理的数组或保存好的权重参数, 便于一些耗时项目直接存储, 不需要重复训练.</p><blockquote><p>注意: 此处保存的时候不需要增加后缀, 会自动添加</p></blockquote><h4 id="保存矩阵">保存矩阵</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接将给定矩阵存为 a.npy</span></span><br><span class="line">np.save(<span class="string">'./data/a'</span>, np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以将多个矩阵存在一起，名为 `b.npz`</span></span><br><span class="line">np.savez(<span class="string">"./data/b"</span>, a=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>), b=np.arange(<span class="number">12.</span>).reshape(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和上一个一样，不过进行了压缩</span></span><br><span class="line">np.savez_compressed(<span class="string">"./data/c"</span>, a=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>), b=np.arange(<span class="number">12.</span>).reshape(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="读取矩阵">读取矩阵</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载单个 array</span></span><br><span class="line">np.load(<span class="string">"data/a.npy"</span>)</span><br></pre></td></tr></tbody></table></figure><p>是否压缩并不影响读取文件.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载多个，可以像字典那样取出对应的 array</span></span><br><span class="line">arr = np.load(<span class="string">"data/b.npz"</span>)</span><br><span class="line">arr[<span class="string">"a"</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="其他创建方法">其他创建方法</h2><p>除了常见的<code>np.array</code>创建新数组, 还可以使用其他方法进行创建.</p><h3 id="使用-asarray-进行创建">使用 asarray() 进行创建</h3><p>与 <code>array</code> 相同, 都可以将普通的结构数据转化为 <code>ndarray</code> 但是当数据源就是 <code>ndarray时</code>, 且 <code>dtype</code> 不变时, <code>asarray</code> 创建的数组将不会开辟一个新的内存地址, 也就是, 而 <code>array</code> 则都会<strong>开辟一个新的内存空间</strong>来创建.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">y = np.array(x)</span><br><span class="line">z = np.asarray(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(x,<span class="built_in">type</span>(x),x.dtype)</span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 2]</span></span><br><span class="line"><span class="comment">#  [1 1 1]] &lt;class 'numpy.ndarray'&gt; int32</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y,<span class="built_in">type</span>(y),y.dtype)</span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]] &lt;class 'numpy.ndarray'&gt; int32</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(z,<span class="built_in">type</span>(z),z.dtype)</span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 2]</span></span><br><span class="line"><span class="comment">#  [1 1 1]] &lt;class 'numpy.ndarray'&gt; int32</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-fromfunction-进行创建">使用 fromfunction() 进行创建</h3><p>该方法是根据<strong>函数</strong>来创建数组, 常在绘图时使用. 该函数的参数 <code>x, y</code> 分别代表数组的坐标位置, 所以在绘图时非常方便.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x + y</span><br><span class="line"></span><br><span class="line">x = np.fromfunction(func, (<span class="number">5</span>, <span class="number">4</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[ 0  1  2  3]</span></span><br><span class="line"><span class="comment">#  [10 11 12 13]</span></span><br><span class="line"><span class="comment">#  [20 21 22 23]</span></span><br><span class="line"><span class="comment">#  [30 31 32 33]</span></span><br><span class="line"><span class="comment">#  [40 41 42 43]]</span></span><br><span class="line"></span><br><span class="line">x = np.fromfunction(<span class="keyword">lambda</span> i, j: i == j, (<span class="number">3</span>, <span class="number">3</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[ True False False]</span></span><br><span class="line"><span class="comment">#  [False  True False]</span></span><br><span class="line"><span class="comment">#  [False False  True]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="个人收获">个人收获</h2><p>这里将原本的 <code>numpy</code> 知识重新回归了一下, 并且学到了一个新的创建数组的方法, 既然是新方法就应该多多适应, 在以后的使用中, 对比其中的优劣.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是根据 &lt;code&gt;DataWhale&lt;/code&gt;『巨硬的 &lt;code&gt;numpy&lt;/code&gt;』文档进行学习, 辅之以天池平台, 之前学习过, 此时进行进一步的整理, 着重学习未完全熟悉的知识点.&lt;/p&gt;
&lt;p&gt;详细的代码我也放入了天池学习的&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying/tree/main/AI训练营&quot;&gt;AI训练营&lt;/a&gt;合集中&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="numpy" scheme="https://gipbear.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>python基础进阶</title>
    <link href="https://gipbear.github.io/2022/02/13/python%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6/"/>
    <id>https://gipbear.github.io/2022/02/13/python%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6/</id>
    <published>2022-02-13T13:27:58.000Z</published>
    <updated>2022-02-14T15:51:46.099Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是在天池学习路线中的『python基础进阶』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.</p><p>详细知识点的所有代码均可在我的GitHub仓库<a href="https://github.com/Gipbear/TianChi-Studying">TianChi-Studying</a>中找到.</p></blockquote><span id="more"></span><h2 id="函数">函数</h2><p>python中『一切皆对象』, 函数也不例外.</p><p>在之前所学的<code>C++</code>或<code>Java</code>中, 可以发现函数的返回值要么为空, 要么是某种数据类型, 但是在<code>python</code>中, 返回值可以是任何对象, 包括<strong>函数</strong>.</p><h3 id="函数参数">函数参数</h3><p>函数的参数种类比较多, 主要有:</p><ol type="1"><li><p>位置参数 (positional argument): 就是最常见的x, y等</p></li><li><p>默认参数 (default argument): 给定一个默认值, 用户也可以传入实参来调整.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x, y=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x+y)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>)  <span class="comment"># 4</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">666</span>)  <span class="comment"># 667</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>可变参数 (variable argument): 不限制输入参数的个数, 传入后自动保存为<strong>元组类型</strong>.</p><ul><li><code>*args</code> 是可变参数，<code>args</code> 接收的是一个 <code>tuple</code></li></ul><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params">arg1, *args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="built_in">print</span>(args, <span class="built_in">type</span>(args))</span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">10</span>)  <span class="comment"># 仅一个参数, 没有属于args的.</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># () &lt;class 'tuple'&gt;</span></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>)  <span class="comment"># 除arg1位置匹配的, 其他都传入给可变参数</span></span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># (60, 50) &lt;class 'tuple'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>关键字参数 (keyword argument): 不限制关键字的个数和命名, 传入后自动保存为字典的形式.</p><ul><li><code>**kw</code> 是关键字参数，<code>kw</code> 接收的是一个 <code>dict</code></li></ul><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(kwargs, <span class="built_in">type</span>(kwargs))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'age'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        age = kwargs[<span class="string">'age'</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'<span class="subst">{name}</span>今年<span class="subst">{age}</span>岁'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person(<span class="string">'张三'</span>)  <span class="comment"># 仅一个参数, 没有属于kwargs的.</span></span><br><span class="line"><span class="comment"># 张三</span></span><br><span class="line"><span class="comment"># {} &lt;class 'dict'&gt;</span></span><br><span class="line">person(<span class="string">'李四'</span>, age=<span class="number">18</span>, height=<span class="number">1.80</span>)  <span class="comment"># 除 name 位置匹配的, 其他都传入给关键字参数</span></span><br><span class="line"><span class="comment"># 李四</span></span><br><span class="line"><span class="comment"># {'age': 18, 'height': 1.8} &lt;class 'dict'&gt;</span></span><br><span class="line"><span class="comment"># 李四今年18岁</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>命名关键字参数 (name keyword argument)</p><ul><li>命名关键字参数是为了限制调用者可以传入的『<strong>参数名</strong>』，也可以提供<strong>默认值</strong>.</li><li>与关键字参数不同的是, 关键字参数的名字和值都是任意的, 后续再进行匹配使用, 而命名关键字则只能接受<strong>给定的关键字</strong>作为参数.</li><li>定义命名关键字参数不要忘了写分隔符 <code>*</code>, 否则定义的是位置参数, 命名关键字参数调用函数时<strong>必须给定参数名</strong>.</li></ul><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, *, age, height=<span class="number">1.90</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'<span class="subst">{name}</span>今年<span class="subst">{age}</span>岁, 身高<span class="subst">{height:<span class="number">.2</span>f}</span>m'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person(<span class="string">'张三'</span>, age=<span class="number">18</span>, height=<span class="number">1.80</span>)  <span class="comment"># 张三今年18岁, 身高1.80m</span></span><br><span class="line">person(<span class="string">'李四'</span>, age=<span class="number">18</span>)  <span class="comment"># 李四今年18岁, 身高1.90m</span></span><br><span class="line">person(<span class="string">'王五'</span>)  <span class="comment"># TypeError, 需要传入给定关键字</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>参数组合</p><p>在<code>Python</code>中定义函数时, 以上这5种参数都可以使用, d但最多可以使用4种, 并且要注意顺序:</p><ul><li>位置参数、默认参数、可变参数和关键字参数.</li><li>位置参数、默认参数、命名关键字参数和关键字参数.</li></ul></li></ol><h3 id="变量作用域">变量作用域</h3><p>在python程序中, 处于不同位置的变量, 有不同的作用域.</p><ul><li>定义在函数内部的变量拥有局部作用域, 该变量称为<strong>局部变量</strong>.</li><li>定义在函数外部的变量拥有全局作用域, 该变量称为<strong>全局变量</strong>.</li><li>局部变量只能在其被声明的函数内部访问, 而全局变量可以在整个程序范围内访问.</li></ul><p>需要注意的是:</p><blockquote><ul><li>当局部变量试图访问全局变量时, 一定要在函数内声明<code>global</code>.</li><li>当局部变量与全局变量<strong>命名冲突</strong>时, 程序会优先选择局部变量.</li></ul></blockquote><h3 id="内嵌函数和闭包">内嵌函数和闭包</h3><p><strong>内嵌函数</strong>就是在外层函数内定义内层函数.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'outer函数在这被调用'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'inner函数在这被调用'</span>)</span><br><span class="line"></span><br><span class="line">    inner()  <span class="comment"># 该函数只能在outer函数内部被调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># outer函数在这被调用</span></span><br><span class="line"><span class="comment"># inner函数在这被调用</span></span><br></pre></td></tr></tbody></table></figure><p><strong>闭包</strong>是一个比较重要的语法结构, 结构上与内嵌函数类似, 区别在于返回值, 闭包的外层函数<strong>返回值是一个函数</strong>.</p><ul><li>如果在一个内部函数里对外层非全局作用域的变量进行引用, 那么内部函数就被认为是<strong>闭包</strong>.</li><li>通过闭包可以访问外层非全局作用域的变量, 这个作用域称为<strong>闭包作用域</strong>.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funY</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'使用funY(y)'</span>)</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> funY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = funX(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(i))  <span class="comment"># &lt;class 'function'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(i(<span class="number">5</span>))  <span class="comment"># 40</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意到上述代码中, 内部函数<code>FunY</code>中使用了外部非全局作用域的变量<code>x</code>.</p></blockquote><p>同样是, 函数内嵌套的函数作用域也需要特别注意, 若我们需要修改闭包内的变量, 需要使用<code>nonlocal</code>关键字.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num  <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'inner中num = <span class="subst">{num}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'outer中num = <span class="subst">{num}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># inner中num = 100</span></span><br><span class="line"><span class="comment"># outer中num = 100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'全局中num = <span class="subst">{num}</span>'</span>)</span><br><span class="line"><span class="comment"># 全局中num = 999</span></span><br></pre></td></tr></tbody></table></figure><h3 id="lambda-表达式">lambda 表达式</h3><p>lambda需要注意的是:</p><ul><li>匿名函数没有<code>return</code>, 表达式本身就是返回值.</li><li>匿名函数拥有『<strong>自己的命名空间</strong>』, 不能访问参数列表之外或全局变量.</li></ul><p>匿名函数主要适用于函数式编程(函数不会影响函数之外的内容)的一些高阶函数中. 例如map映射和filter过滤, 当然也可以在自己自定义函数中使用.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">odd = <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">templist = <span class="built_in">filter</span>(odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(templist))  <span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(m1))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="面向对象">面向对象</h2><h3 id="三大特性">三大特性</h3><p>面向对象就必须了解三大特性:</p><ul><li>封装: 把客观事物封装成抽象的类, 让数据和方法给信任的类或对象操作, 而隐藏部分信息.</li><li>继承: 子类自动共享父类的属性和方法.<ul><li>一般认为一个类是自身的子类;</li><li>可以使用<code>issubclass(B, A)</code>查看<code>B</code>是否是<code>A</code>的子类.</li><li>python也支持多继承, 但会使得类的整体层次复杂, 所以并<strong>不建议使用</strong>.</li></ul></li><li>多态: 同一个<strong>方法</strong>的调用, 会由于不同对象而得到不同的结果.<ul><li>必要条件是<code>继承</code>和<code>方法的重写</code>.</li></ul></li></ul><h3 id="类类对象-和-实例对象">类、类对象 和 实例对象</h3><ul><li>类: 就是指对类的定义</li><li>类对象: 是在创建类的时候, 在内存开辟的一个空间, 一个类只有<strong>一个类对象</strong>.</li><li>实例对象: 通过实例化类创建的对象, 可以有多个.</li></ul><h3 id="类属性-和-对象属性">类属性 和 对象属性</h3><ul><li>类属性: 类定义内, 类方法外定义的变量称为类属性, 类属性属于类对象, 可以被多个实例化对象所<strong>共享</strong>, 就像<code>我们都有一个家, 名字叫中国</code>一样.</li><li>对象属性: 对象属性和具体创建的对象实例直接相关, 并且相互之间不共享属性, 就像<code>我的老婆只是我的</code>一样.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    a = <span class="number">0</span>  <span class="comment">#类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, xx</span>):</span></span><br><span class="line">        A.a = xx  <span class="comment">#使用类属性可以通过 （类名.类属性）调用。</span></span><br></pre></td></tr></tbody></table></figure><p>有一些操作属性的方法:</p><ul><li>使用<code>hasattr(object, name)</code>来判断对象是否包含对应的<strong>属性或方法</strong>.</li><li>使用<code>getattr(object, name)</code>来获取<strong>属性或方法</strong>.</li><li>使用<code>setattr(object, name, value)</code>来修改属性值, 或创建新的属性和值.</li><li>使用<code>delattr(object, name)</code>来删除属性.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">'张三'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">        x = a</span><br><span class="line">        a = b</span><br><span class="line">        b = x</span><br><span class="line">        <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(a, <span class="string">'name'</span>))  <span class="comment"># 判断是否有name属性 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(a, <span class="string">'set'</span>))  <span class="comment"># 判断是否有set方法 True</span></span><br><span class="line">x = <span class="built_in">getattr</span>(a, <span class="string">'name'</span>)  <span class="comment"># 获取属性值</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 张三</span></span><br><span class="line">c = <span class="built_in">getattr</span>(a, <span class="string">'set'</span>)  <span class="comment"># 获取方法</span></span><br><span class="line">c(a=<span class="string">'1'</span>, b=<span class="string">'2'</span>)  <span class="comment"># 2 1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="私有">私有</h3><p>私有属性和方法仅需在定义命名的时候加上两个下划线"<code>__</code>"即可.</p><p>相对于公有属性和公有方法来说, 私有属性和私有方法更加的安全. 从定义上来说, 将需要安全保护的属性和方法封装为私有, 可以阻止外部直接调用, 而必须使用<code>实例化对象方法</code>或<code>类方法</code>进行调用, 从而提高安全性.</p><p>但在python中的私有是『伪私有』, 即可以使用类名, 通过 <code>object._className__attrName</code> 访问私有属性，用 <code>object._className__func()</code> 访问私有方法.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JustCounter</span>:</span></span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>  <span class="comment"># 公开变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(self.__secretCount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(counter.publicCount)  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 特殊方法依旧可以访问</span></span><br><span class="line"><span class="built_in">print</span>(counter._JustCounter__secretCount)  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 直接访问则会报错.</span></span><br><span class="line"><span class="built_in">print</span>(counter.__secretCount)</span><br></pre></td></tr></tbody></table></figure><p>实例直接使用<strong>点</strong>就可以<strong>增加属性</strong>了, 这点需要注意一下.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'调用func方法'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="built_in">print</span>(b.__dict__)  <span class="comment"># 查看属性 {}</span></span><br><span class="line">b.name = <span class="string">'张三'</span></span><br><span class="line">b.age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(b.__dict__)  <span class="comment"># 查看属性{'name': '张三', 'age': 18}</span></span><br><span class="line"></span><br><span class="line">b1 = B()</span><br><span class="line"><span class="built_in">print</span>(b1.__dict__)  <span class="comment"># 查看属性 {}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="魔法方法">魔法方法</h2><h3 id="基本的魔法方法">基本的魔法方法</h3><p>魔法方法基本上是被下划线包围的一些特殊方法. 相比于普通的方法, 它能够在适当的时候自动调用. 第一个参数一般是<code>cls</code>『类方法』或者<code>self</code>『实例方法』.</p><ul><li><code>__init__(self[, ...])</code> 构造器, 当一个实例被创建的时候调用的初始化方法.</li><li><code>__new__(cls[, ...])</code> 在一个对象实例化的时候所调用的第一个方法, 在调用<code>__init__</code>初始化前, 先调用<code>__new__</code>.<ul><li>需要注意的是, <code>__new__</code>的返回值必须为当前类的实例, 否则将不会调用<code>__init__</code>初始化.</li><li>主要是在继承一些不可变的class(比如<code>int, str, tuple</code>)时, 提供一个自定义该类实例化过程的途径.</li></ul></li><li><code>__del__(self)</code> 析构器, 当一个对象将要被系统回收之时调用的方法.</li><li><code>__str__(self)</code>: 当你打印一个对象、使用<code>%s</code>格式化或使用<code>str</code>强转数据类型的时候，触发<code>__str__</code>.</li><li><code>__repr__(self)</code>是<code>__str__(self)</code>的备胎, 情况类似, 不过自定义时往往更加准确, 主要用于调试.</li></ul><h3 id="算术运算符">算术运算符</h3><p>普通的计算在对象中是无法进行的, 需要自定义计算方式.</p><ul><li><code>__add__(self, other)</code>定义加法的行为: <code>+</code></li><li><code>__sub__(self, other)</code>定义减法的行为: <code>-</code></li><li><code>__mul__(self, other)</code>定义乘法的行为: <code>*</code></li><li><code>__truediv__(self, other)</code>定义真除法的行为: <code>/</code></li><li><code>__floordiv__(self, other)</code>定义整数除法的行为: <code>//</code></li><li><code>__mod__(self, other)</code> 定义取模算法的行为: <code>%</code></li><li><code>__divmod__(self, other)</code>定义当被 <code>divmod()</code> 调用时的行为<ul><li><code>divmod(a, b)</code>把除数和余数运算结果结合起来，返回一个包含商和余数的元组<code>(a // b, a % b)</code>。</li></ul></li><li><code>__pow__(self, other[, module])</code>定义当被 <code>power()</code> 调用或 <code>**</code> 运算时的行为</li><li><code>__lshift__(self, other)</code>定义按位左移位的行为: <code>&lt;&lt;</code></li><li><code>__rshift__(self, other)</code>定义按位右移位的行为: <code>&gt;&gt;</code></li><li><code>__and__(self, other)</code>定义按位与操作的行为: <code>&amp;</code></li><li><code>__xor__(self, other)</code>定义按位异或操作的行为: <code>^</code></li><li><code>__or__(self, other)</code>定义按位或操作的行为: <code>|</code></li></ul><p>还有对应的<strong>反运算符</strong>, 在之前加上<code>r</code>即可, 例如<code>__rsub__</code>. 对应增量赋值运算符, 在之前加上<code>i</code>即可, 例如<code>__isub__</code>.</p><h3 id="属性访问">属性访问</h3><ul><li><code>__getattr__(self, name)</code>: 定义当用户试图获取一个不存在的属性时的行为.</li><li><code>__getattribute__(self, name)</code>: 定义当该类的属性被访问时的行为(先调用该方法, 查看是否存在该属性, 若不存在, 接着去调用<code>__getattr__</code>).</li><li><code>__setattr__(self, name, value)</code>: 定义当一个属性被设置时的行为.</li><li><code>__delattr__(self, name)</code>: 定义当一个属性被删除时的行为.</li></ul><h3 id="描述符">描述符</h3><p>描述符就是将某种特殊类型的类的实例指派给另一个类的属性.</p><ul><li><code>__get__(self, instance, owner)</code>: 用于访问属性, 它返回属性的值.</li><li><code>__set__(self, instance, value)</code>: 将在属性分配操作中调用, 不返回任何内容.</li><li><code>__del__(self, instance)</code>: 控制删除操作, 不返回任何内容.</li></ul><h2 id="迭代器和生成器">迭代器和生成器</h2><h3 id="迭代器">迭代器</h3><p>迭代是<code>Python</code>最强大的功能之一, 是访问集合元素的一种方式.</p><ul><li>迭代器是一个可以记住遍历的位置的对象.</li><li>迭代器对象从集合的第一个元素开始访问, 直到所有的元素被访问完结束.</li><li>迭代器只能往前不会后退.</li><li>字符串, 列表或元组对象都可用于创建迭代器.</li></ul><p>迭代器有两个基本的方法: <code>iter()</code> 和 <code>next()</code>:</p><ul><li><code>iter(object)</code> 函数用来生成迭代器.</li><li><code>next(iterator[, default])</code> 返回迭代器的下一个项目. 在元素为空时返回默认值, 若没有则会触发 <code>StopIteration</code> 异常. 在<a href="https://gipbear.github.io/2022/02/11/python基础入门/#元组推导式和next">元组推导式和next</a>中使用过, 不过是下面的『生成器』.</li></ul><p>把一个类作为一个迭代器使用需要在类中实现两个魔法方法 <code>__iter__()</code> 与 <code>__next__()</code> .</p><ul><li><code>__iter__(self)</code>定义当迭代容器中的元素的行为, 返回一个特殊的迭代器对象, 这个迭代器对象实现了 <code>__next__()</code> 方法并通过 <code>StopIteration</code> 异常标识迭代的完成.</li><li><code>__next__()</code> 返回下一个迭代器对象.<ul><li><code>StopIteration</code> 异常用于标识迭代的完成，防止出现无限循环的情况，在 <code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 <code>StopIteration</code> 异常来结束迭代。</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibs</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n=<span class="number">10</span></span>):</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; self.n:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fibs = Fibs(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> fibs:</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34 55 89</span></span><br></pre></td></tr></tbody></table></figure><h3 id="生成器">生成器</h3><p>在 Python 中，使用了 <code>yield</code> 的函数被称为生成器(generator)。</p><ul><li>跟普通函数不同的是, 生成器是一个返回迭代器的函数, 只能用于迭代操作, 更简单点理解生成器就是一个迭代器.</li><li>在调用生成器运行的过程中, 每次遇到 <code>yield</code> 时函数会<strong>暂停并保存</strong>当前所有的运行信息, 返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置<strong>继续</strong>运行.</li><li>调用一个生成器函数, 返回的是一个迭代器对象.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">libs</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">if</span> a &gt; n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> libs(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34 55 89</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考">参考</h2><ol type="1"><li>内容来自<a href="https://tianchi.aliyun.com/specials/promotion/aicamppython">python训练营</a></li><li><a href="https://www.cnblogs.com/wkkkkk/p/5731947.html">Python——函数的命名关键字参数</a></li><li><a href="https://www.cnblogs.com/DylanHooz/p/8436629.html">类：属性方法的私有公有详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/58727281">Python面向对象三大特性</a></li></ol><h2 id="个人收获">个人收获</h2><p>函数部分收获是关于『命名关键字参数』, 之前确实没有学习到这个知识点. 以及关于变量作用域的问题进一步加深体会, 闭包函数十分神奇, 还需要理解.</p><p>还学习了面向对象的基础知识, 尤其是关于魔法方法这里, 内容虽多, 不过常用的不多.</p><p>生成器和迭代器的构造也了解了一下, 感觉到了斐波那契似乎在哪里都可以用一下<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是在天池学习路线中的『python基础进阶』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.&lt;/p&gt;
&lt;p&gt;详细知识点的所有代码均可在我的GitHub仓库&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying&quot;&gt;TianChi-Studying&lt;/a&gt;中找到.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python数据结构</title>
    <link href="https://gipbear.github.io/2022/02/12/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://gipbear.github.io/2022/02/12/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-12T04:49:01.000Z</published>
    <updated>2022-02-12T10:12:12.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是在天池学习路线中的『python数据结构』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.</p><p>详细知识点的所有代码均可在我的GitHub仓库<a href="https://github.com/Gipbear/TianChi-Studying">TianChi-Studying</a>中找到.</p></blockquote><span id="more"></span><h2 id="数据类型">数据类型</h2><p>常见的数据类型如下:</p><ul><li>简单数据类型<ul><li>整型<code>&lt;class 'int'&gt;</code></li><li>浮点型<code>&lt;class 'float'&gt;</code></li><li>布尔型<code>&lt;class 'bool'&gt;</code></li></ul></li><li>容器数据类型<ul><li>列表<code>&lt;class 'list'&gt;</code></li><li>字典<code>&lt;class 'dict'&gt;</code></li><li>集合<code>&lt;class 'set'&gt;</code></li><li>元组<code>&lt;class 'tuple'&gt;</code></li><li>字符串<code>&lt;class 'str'&gt;</code></li></ul></li></ul><p>在我们的数据类型中, 有些数据类型的不可修改的, 从而没有增删改查, 修改操作基本上都是重新创建对象后赋值.</p><ul><li>可变类型(不可被hash)<ul><li>列表、集合、字典</li></ul></li><li>不可变类型(可被hash)<ul><li>数值、字符、元组</li></ul></li></ul><blockquote><p>检测类型是否可变, 可以使用<code>id()</code>观察修改前后地址是否发生变化, 但更常用的是使用<code>hash()</code>, 不可哈希的将会被报错, 也就是是可变类型将会报错</p></blockquote><h2 id="列表-list">列表 list</h2><p>在<code>list</code>中可以存放任意对象, 且由于存放的是<strong>对象指针</strong>, 所以即使是简单的<code>[1,2,3]</code>中也存放了3个对象和3个指针.</p><p>列表可以进行如下乘法计算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x)) <span class="comment"># [0, 0, 0, 0, 0] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x)) <span class="comment"># [0, 3, 0, 0, 0] &lt;class 'list'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上结果符合期望, 而看下面这个例子</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>x是将<code>[0] * 3</code>这个对象复制了4遍, 所以<code>x</code>列表中保存的是<strong>1个对象</strong>和<strong>4个指向该对象的指针</strong>!</p><p>那么对<code>[0] * 3</code>对象进行修改的时候, 就会得到上述的结果. 这是一个<strong>小坑</strong><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>, 需要注意一下.</p><h3 id="浅拷贝与深拷贝">浅拷贝与深拷贝</h3><p>列表的浅拷贝与深拷贝是在编程时容易遇到的坑, 这里表述一下.</p><ul><li>浅拷贝是: 简单的将元素<strong>对象</strong>完全复制过来.</li><li>深拷贝是: 创建新的元素对象, 仅复制原本的<strong>对象值</strong>.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line">list2 = list1</span><br><span class="line">list3 = list1[:]</span><br><span class="line"></span><br><span class="line">list1[<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">777</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [999, 2, [777, 4], 5]</span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [1, 2, [777, 4], 5]</span></span><br></pre></td></tr></tbody></table></figure><p>容易发现, 列表<code>list2</code>, 采用<strong>直接赋值</strong>的方法, 相当于将原<code>list1</code>中的所有元素对象地址直接复制过来, 那么两个列表<strong>完全等价</strong>.</p><p>而<code>list3</code>是使用了<strong>切片</strong>的方法, 对列表元素的对象值进行了<strong>深拷贝</strong>, 所以未受到修改<code>999</code>的影响. 但是其中的<code>[3,4]</code>对象的是一个<strong>指针</strong>, 复制的依旧是指向该对象的指针, 所以修改<code>777</code>的作用生效了.</p><blockquote><p>除了切片, copy方法、列表推导式和<code>for+append</code>也同样的效果</p></blockquote><p><strong>也就是说</strong>, 这种深拷贝<strong>只能深拷贝一层</strong>, 更多层次的由指针指向的对象则只能浅拷贝.</p><p>那么想要进行『完全的深拷贝』, 创建一个与原对象值相同, 但毫无关系的对象, 则需要使用<code>copy.deepcopy</code>方法进行拷贝.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line">list2 = copy.deepcopy(list1)</span><br><span class="line"></span><br><span class="line">list1[<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">777</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [1, 2, [3, 4], 5]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表排序">列表排序</h3><p>列表的排序可以使用<code>list.sort()</code>或<code>sorted</code>来实现, 前者会改变列表本身, 而后者会<strong>返回</strong>一个排序后的新列表对象.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [[<span class="number">9</span>,<span class="number">33</span>,<span class="number">666</span>], [<span class="number">1</span>,<span class="number">44</span>,<span class="number">666</span>],[<span class="number">1</span>,<span class="number">33</span>,<span class="number">555</span>]]</span><br><span class="line"></span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1,key=(<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 第2列升序 [[9, 33, 666], [1, 33, 555], [1, 44, 666]]</span></span><br><span class="line"></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1,key=(<span class="keyword">lambda</span> x: [x[<span class="number">1</span>],x[<span class="number">2</span>]]))</span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># 第2列升序, 相同按第3列升序 [[1, 33, 555], [9, 33, 666], [1, 44, 666]]</span></span><br></pre></td></tr></tbody></table></figure><p><del>当我们想要对列表进行排序的时候, python似乎不能像c++一样定义cmp, 实现一列升序一列降序的复杂排序, 若需如此则可以进行两次排序.</del></p><p>我找到了, 可以使用<code>functools.cmp_to_key</code>来自定义cmp进行复杂比较. 只不过这是<code>python 2.x</code>版本的<strong>旧方法</strong>, 在<code>python 3.x</code>中被集成到了<code>functools</code>工具中.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycmp</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    按照第1列降序排序</span></span><br><span class="line"><span class="string">    第1列相等按照第2列升序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">0</span>] != b[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = [[<span class="number">98</span>,<span class="number">88</span>],[<span class="number">66</span>,<span class="number">99</span>],[<span class="number">77</span>,<span class="number">44</span>],[<span class="number">77</span>,<span class="number">77</span>]]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1, key=cmp_to_key(mycmp))</span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [[98, 88], [66, 99], [77, 44], [77, 77]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="元组-tuple">元组 tuple</h2><p>单个元素需要加逗号, 与括号运算符区分开.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">8</span> * (<span class="number">8</span>))  <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span> * (<span class="number">8</span>,))  <span class="comment"># (8, 8, 8, 8, 8, 8, 8, 8)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解压元组">解压元组</h3><p>使用多个变量来接收元组, 多余的可以全部使用<code>*rest</code>来接收, 接收后为<strong>列表</strong>形式.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'python'</span>)</span><br><span class="line">a, b, *rest = t</span><br><span class="line"><span class="built_in">print</span>(a, b, rest)  <span class="comment"># 1 2 [3, 4, 5, 'python']</span></span><br><span class="line"><span class="comment"># 1 10.31 python</span></span><br></pre></td></tr></tbody></table></figure><h2 id="字符串-str">字符串 str</h2><h3 id="字符映射">字符映射</h3><p>将字符串中的部分字符替换为另外的字符, 可以联合使用<code>maketrans</code>和<code>translate</code>方法, <code>maketrans</code>是得到一个可供<code>translate</code>使用的<strong>字符映射表</strong>, 遵循<code>Unicode</code>编码.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str7 = <span class="string">'this is string example....好!!!'</span></span><br><span class="line">intab = <span class="string">'aeiou好'</span>  <span class="comment"># 被映射字符</span></span><br><span class="line">outtab = <span class="string">'12345棒'</span>  <span class="comment"># 映射字符一一对应</span></span><br><span class="line">trantab = str7.maketrans(intab, outtab)</span><br><span class="line"><span class="built_in">print</span>(trantab)  <span class="comment"># {97: 49, 111: 52, 117: 53, 101: 50, 105: 51}</span></span><br><span class="line"><span class="built_in">print</span>(str7.translate(trantab))  <span class="comment"># th3s 3s str3ng 2x1mpl2....w4w!!!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="格式化">格式化</h3><p>格式化操作符的一些辅助指令</p><table><thead><tr class="header"><th style="text-align: center;">符号</th><th style="text-align: left;">功能</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>m.n</code></td><td style="text-align: left;">m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</td></tr><tr class="even"><td style="text-align: center;"><code>-</code></td><td style="text-align: left;">用作左对齐</td></tr><tr class="odd"><td style="text-align: center;"><code>+</code></td><td style="text-align: left;">在正数前面显示加号( + )</td></tr><tr class="even"><td style="text-align: center;"><code>#</code></td><td style="text-align: left;">在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')</td></tr><tr class="odd"><td style="text-align: center;"><code>0</code></td><td style="text-align: left;">显示的数字前面填充'0'而不是默认的空格</td></tr></tbody></table><p>下面是一些使用<code>%</code>格式化的例子, 个人更喜欢使用<code>f-string</code>格式化(python 3.6+), 这些指令也都可以使用.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'%5.1f'</span> % <span class="number">27.658</span>)  <span class="comment"># ' 27.7'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%.2e'</span> % <span class="number">27.658</span>)  <span class="comment"># 2.77e+01</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%10d'</span> % <span class="number">10</span>)  <span class="comment"># '        10'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%-10d'</span> % <span class="number">10</span>)  <span class="comment"># '10        '</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%+d'</span> % <span class="number">10</span>)  <span class="comment"># +10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%#o'</span> % <span class="number">10</span>)  <span class="comment"># 0o12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%#x'</span> % <span class="number">108</span>)  <span class="comment"># 0x6c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%010d'</span> % <span class="number">5</span>)  <span class="comment"># 0000000005</span></span><br></pre></td></tr></tbody></table></figure><h2 id="集合">集合</h2><p>集合操作就只整理一下数学中的一些操作.</p><table><thead><tr class="header"><th>操作符</th><th>函数</th><th>作用</th></tr></thead><tbody><tr class="odd"><td><code>a&amp;b</code></td><td><code>a.intersection(b)</code></td><td>交集</td></tr><tr class="even"><td><code>a|b</code></td><td><code>a.union(b)</code></td><td>并集</td></tr><tr class="odd"><td><code>a-b</code></td><td><code>a.difference(b)</code></td><td>差集</td></tr><tr class="even"><td><code>a^b</code></td><td><code>a.symmetric_difference(b)</code></td><td>异或</td></tr><tr class="odd"><td><code>a&lt;=b</code></td><td><code>a.issubset(b)</code></td><td>被包含</td></tr><tr class="even"><td><code>a&gt;=b</code></td><td><code>a.issuperset(b)</code></td><td>包含</td></tr></tbody></table><h3 id="不可变集合">不可变集合</h3><p>集合本身是<a href="#数据类型">可变的数据类型</a>, 但是也提供了不可变的集合, 即将集合<strong>冻结</strong>, 无法进行增删改等操作.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">frozenset</span>(<span class="string">'lsgogroup'</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># frozenset({'g', 's', 'p', 'r', 'u', 'o', 'l'})</span></span><br></pre></td></tr></tbody></table></figure><h2 id="enumerate和zip">enumerate和zip</h2><p>这两个函数是针对可迭代对象的方法.</p><ul><li><code>enumerate(sequence, [start=0])</code><ul><li><p>用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列, 也就是给原本每一个元素增加一个从<code>start</code>开始的索引, 一般用在<code>for</code>循环当中.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><code>zip(iter1 [,iter2 [...]])</code><ul><li><p>用于将可迭代的对象作为参数, 将对象中对应的元素<strong>打包</strong>成一个个<strong>元组</strong>, 然后返回由这些元组组成的对象, 可以<strong>节约内存</strong>.</p></li><li><p>返回的是一个不可打印的变量, 需要使用 <code>list()</code> 转换来输出列表.</p></li><li><p>如果各个迭代器的<strong>长度不一致</strong>, 则返回与列表长度与<strong>最短</strong>的对象相同.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">c = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line"></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, b)</span><br><span class="line"><span class="built_in">print</span>(zipped)  <span class="comment"># &lt;zip object at 0x0000017880901D40&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))  <span class="comment"># [(1, 'a'), (2, 'b'), (3, 'c')]</span></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))  <span class="comment"># [(1, 'A'), (2, 'B'), (3, 'C')]</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>反过来, 可以利用 <code>*</code> 号操作符, 可以将元组解压为列表.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">a1, a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a1))  <span class="comment"># [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a2))  <span class="comment"># ['a', 'b', 'c']</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="参考">参考</h2><ol type="1"><li>内容来自<a href="https://tianchi.aliyun.com/specials/promotion/aicamppython">python训练营</a></li><li><a href="https://blog.csdn.net/qq_24502469/article/details/104185122">Python中List的复制（直接复制、浅拷贝、深拷贝）</a></li><li><a href="https://docs.python.org/zh-cn/3.9/howto/sorting.html#the-old-way-using-the-cmp-parameter">python官网-排序指南-使用 cmp 参数的旧方法</a></li><li><a href="https://blog.csdn.net/qq_39478403/article/details/105863783">https://blog.csdn.net/qq_39478403/article/details/105863783</a></li></ol><h2 id="个人收获">个人收获</h2><ol type="1"><li>列表中的深浅拷贝做了一次详细的整理, 彻底捋清楚了. 以及在刷题时常用自定义排序<code>cmp</code>也学到了.</li><li>还有字符串的格式化, 除了保留小数还有其他几种辅助指令.</li><li>对可变/不可变有了更深的理解.</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是在天池学习路线中的『python数据结构』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.&lt;/p&gt;
&lt;p&gt;详细知识点的所有代码均可在我的GitHub仓库&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying&quot;&gt;TianChi-Studying&lt;/a&gt;中找到.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础入门</title>
    <link href="https://gipbear.github.io/2022/02/11/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://gipbear.github.io/2022/02/11/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2022-02-11T09:30:46.000Z</published>
    <updated>2022-02-14T15:35:08.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是在天池学习路线中的『python基础入门』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.</p><p>详细知识点的所有代码均可在我的GitHub仓库<a href="https://github.com/Gipbear/TianChi-Studying">TianChi-Studying</a>中找到.</p></blockquote><span id="more"></span><h2 id="运算符">运算符</h2><h3 id="位运算">位运算</h3><p>位运算对于我们人类来说是反直觉的, 而对于计算机来说是更加符合计算方式的, 所以位运算的速度通常来的较快.</p><p>二进制有原码-反码-补码3种形式, 计算机存储的二进制是<code>补码</code>的形式.</p><blockquote><p>正数的原码补码和反码都相同.</p><p>负数是开头使用一位符号位1, 其余部分: 原码同正数, 反码取反, 补码是反码+1.</p></blockquote><p>例如:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原码</span></span><br><span class="line"><span class="number">0000</span> 0011 -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">1000</span> 0011 -&gt; -<span class="number">3</span></span><br><span class="line"><span class="comment"># 反码</span></span><br><span class="line"><span class="number">0000</span> 0011 -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">1100</span> -&gt; -<span class="number">3</span></span><br><span class="line"><span class="comment"># 补码</span></span><br><span class="line"><span class="number">0000</span> 0011 -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">1111</span> <span class="number">1101</span> -&gt; -<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>那我们来看看python中二进制转换函数bin的表现吧.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">3</span>))  <span class="comment"># 0b11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(-<span class="number">3</span>))  <span class="comment"># -0b11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(-<span class="number">3</span> &amp; <span class="number">0xffffffff</span>))  </span><br><span class="line"><span class="comment"># 0b11111111111111111111111111111101</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 注意到<code>-3</code> 是不是跟我们说的不一样(＠_＠;), 而实现正则的负数需要和<code>0xffffffff</code>按位与才行, 记住就行.</p><p>下面列举常见操作符:</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>~</code></td><td style="text-align: center;">按位取反</td><td style="text-align: center;"><code>~4</code></td></tr><tr class="even"><td style="text-align: center;"><code>&amp;</code></td><td style="text-align: center;">按位与</td><td style="text-align: center;"><code>4 &amp; 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>|</code></td><td style="text-align: center;">按位或</td><td style="text-align: center;"><code>4 | 5</code></td></tr><tr class="even"><td style="text-align: center;"><code>^</code></td><td style="text-align: center;">按位异或</td><td style="text-align: center;"><code>4 ^ 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;&lt;</code></td><td style="text-align: center;">左移</td><td style="text-align: center;"><code>4 &lt;&lt; 2</code></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;&gt;</code></td><td style="text-align: center;">右移</td><td style="text-align: center;"><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>一般多用于快速计算2的倍数.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span>  <span class="comment"># 计算 n*2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span>  <span class="comment"># 计算 n/2，负奇数的运算不可用</span></span><br><span class="line">n &lt;&lt; m  <span class="comment"># 计算 n*(2^m)，即乘以 2 的 m 次方</span></span><br><span class="line">n &gt;&gt; m  <span class="comment"># 计算 n/(2^m)，即除以 2 的 m 次方</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; n  <span class="comment"># 2^n</span></span><br></pre></td></tr></tbody></table></figure><p>在算法中也经常有使用整数的二进制位来表示类似数组元素存在与否, 可以降低时空复杂度, 不在此处阐述. 当然还有其他的技巧, 可以多搜搜看.</p><blockquote><p>补充2个位运算的小技巧: 练习的话可以参考leetcode<a href="https://leetcode-cn.com/problems/power-of-two/">231. 2 的幂</a>和<a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位1的个数</a></p><ul><li>判断偶数: <code>(n &amp; 1)</code></li><li>消去二进制位最后一个1: <code>(n &amp; (n-1))</code></li></ul></blockquote><h3 id="is-和">is 和 ==</h3><ul><li><code>is</code>: 表示是或不是;</li><li><code>==</code>: 表示等或不等.</li></ul><p>看起来差别不大, 但是他们比较的对象不同</p><ul><li><code>is</code>: 比较的是变量的<strong>内存地址</strong>;</li><li><code>==</code>: 比较的是变量的<strong>值</strong>.</li></ul><p>针对<strong>不可修改</strong>的变量, 例如字符串, 值相同的变量, 指向的内存地址是一致的.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"hello"</span></span><br><span class="line">b = <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b)  <span class="comment"># 结果是 True True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b, a != b)  <span class="comment"># 结果是 False False</span></span><br></pre></td></tr></tbody></table></figure><p>针对<strong>可修改</strong>的变量, 例如列表, 每次创建新变量都是会重新开辟内存地址的.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"hello"</span>]</span><br><span class="line">b = [<span class="string">"hello"</span>]</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b)  <span class="comment"># 结果是 False True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b, a != b)  <span class="comment"># 结果是 True False</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运算符优先级">运算符优先级</h3><table><thead><tr class="header"><th>运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>**</td><td>指数（最高优先级）</td></tr><tr class="even"><td>~ + -</td><td>按位翻转, 一元加号和减号</td></tr><tr class="odd"><td>* / % //</td><td>乘, 除, 取模和取整</td></tr><tr class="even"><td>+ -</td><td>加法减法</td></tr><tr class="odd"><td>&gt;&gt; &lt;&lt;</td><td>右移, 左移运算符</td></tr><tr class="even"><td>&amp;</td><td>按位与</td></tr><tr class="odd"><td>^ |</td><td>按位取反, 按位或</td></tr><tr class="even"><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr class="odd"><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr class="even"><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr class="odd"><td>is 和 is not</td><td>身份运算符</td></tr><tr class="even"><td>in 和 not in</td><td>成员运算符</td></tr><tr class="odd"><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="数据类型">数据类型</h2><h3 id="浮点型">浮点型</h3><p>浮点型的赋值还可以使用<code>e</code>来表示</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0.00000023</span></span><br><span class="line">b = <span class="number">2.3e-7</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2.3e-07</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 2.3e-07</span></span><br></pre></td></tr></tbody></table></figure><p>如果精度要求比较高可以考虑使用<code>decimal</code>库, 一般感觉很少需要.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br></pre></td></tr></tbody></table></figure><h3 id="判断数据类型">判断数据类型</h3><p>使用<code>isinstance</code>查看数据类型是否符合预期.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">int</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">5.2</span>, <span class="built_in">float</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="literal">True</span>, <span class="built_in">bool</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">'5.2'</span>, <span class="built_in">str</span>))  <span class="comment"># True</span></span><br></pre></td></tr></tbody></table></figure><h2 id="循环">循环</h2><h3 id="与else">与else</h3><p>之前知道<code>while</code>循环后可以跟一个<code>else</code>, 但是感觉没什么用, 最近刷<code>leetcode</code>后再学习这个知识, 发现原来是<code>while</code>中<code>break</code>的话<code>else</code>可以不执行, 感觉稍微有些用了, <code>for</code>也同理可跟<code>else</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>):  <span class="comment"># 迭代 10 到 20 之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):  <span class="comment"># 根据因子迭代</span></span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:  <span class="comment"># 确定第一个因子</span></span><br><span class="line">            j = num / i  <span class="comment"># 计算第二个因子</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%d 等于 %d * %d'</span> % (num, i, j))</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 跳出当前循环</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 循环的 else 部分</span></span><br><span class="line">        <span class="built_in">print</span>(num, <span class="string">'是一个质数'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 10 等于 2 * 5</span></span><br><span class="line"><span class="comment"># 11 是一个质数</span></span><br><span class="line"><span class="comment"># 12 等于 2 * 6</span></span><br><span class="line"><span class="comment"># 13 是一个质数</span></span><br><span class="line"><span class="comment"># 14 等于 2 * 7</span></span><br><span class="line"><span class="comment"># 15 等于 3 * 5</span></span><br><span class="line"><span class="comment"># 16 等于 2 * 8</span></span><br><span class="line"><span class="comment"># 17 是一个质数</span></span><br><span class="line"><span class="comment"># 18 等于 2 * 9</span></span><br><span class="line"><span class="comment"># 19 是一个质数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="与enumerate">与enumerate</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><ul><li>sequence：一个序列、迭代器或其他支持迭代对象.</li><li>start：下标起始位置.</li><li>返回 enumerate(枚举) 对象.</li></ul><p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素, 还顺便给该元素一个索引值 (默认从 0 开始). 此外, 用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'R'</span>, <span class="string">'Matlab'</span>, <span class="string">'C++'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, language <span class="keyword">in</span> <span class="built_in">enumerate</span>(languages, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">'I love'</span>, language)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Done!'</span>)</span><br><span class="line"><span class="comment"># 2 I love Python</span></span><br><span class="line"><span class="comment"># 3 I love R</span></span><br><span class="line"><span class="comment"># 4 I love Matlab</span></span><br><span class="line"><span class="comment"># 5 I love C++</span></span><br><span class="line"><span class="comment"># Done!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="元组推导式和next">元组推导式和next</h3><p>列表推导式得到的结果是一个列表无疑. 而元组推导式得到的结果是一个『生成器对象』, 这一点需要注意一下. 如果需要转化成元组, 则使用<code>tuple()</code>函数.</p><p>此外, 需要使用生成器对象时, 可以使用<code>next(iterator[, default])</code>进行遍历.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">e = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(e))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(e))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> e:</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(next(e))  # StopIteration</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(e, <span class="string">'hh'</span>))  <span class="comment"># hh</span></span><br></pre></td></tr></tbody></table></figure><p>可以发现, 不管是使用<code>next</code>还是<code>for</code>循环进行遍历, 生成器对象的元素<strong>每输出一次都会减少一个</strong>, 是一次性消耗品.</p><p>对next函数给定默认值时, 则会在生成器对象为空时输出默认值, 否则抛出StopIteration异常.</p><h2 id="异常处理">异常处理</h2><h3 id="标准异常">标准异常</h3><h2 id="python-标准异常总结">Python 标准异常总结</h2><ul><li>BaseException：所有异常的 <strong>基类</strong></li><li>Exception：常规异常的 <strong>基类</strong></li><li>StandardError：所有的内建标准异常的基类</li><li>ArithmeticError：所有数值计算异常的基类</li><li>FloatingPointError：浮点计算异常</li><li><u>OverflowError</u>：数值运算超出最大限制</li><li><u>ZeroDivisionError</u>：除数为零</li><li><u>AssertionError</u>：断言语句（assert）失败</li><li><u>AttributeError</u>：尝试访问未知的对象属性</li><li>EOFError：没有内建输入，到达EOF标记</li><li>EnvironmentError：操作系统异常的基类</li><li>IOError：输入/输出操作失败</li><li><u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）</li><li>WindowsError：系统调用失败</li><li><u>ImportError</u>：导入模块失败的时候</li><li>KeyboardInterrupt：用户中断执行</li><li>LookupError：无效数据查询的基类</li><li><u>IndexError</u>：索引超出序列的范围</li><li><u>KeyError</u>：字典中查找一个不存在的关键字</li><li><u>MemoryError</u>：内存溢出（可通过删除对象释放内存）</li><li><u>NameError</u>：尝试访问一个不存在的变量</li><li>UnboundLocalError：访问未初始化的本地变量</li><li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>RuntimeError：一般的运行时异常</li><li>NotImplementedError：尚未实现的方法</li><li><u>SyntaxError</u>：语法错误导致的异常</li><li>IndentationError：缩进错误导致的异常</li><li>TabError：Tab和空格混用</li><li>SystemError：一般的解释器系统异常</li><li><u>TypeError</u>：不同类型间的无效操作</li><li><u>ValueError</u>：传入无效的参数</li><li>UnicodeError：Unicode相关的异常</li><li>UnicodeDecodeError：Unicode解码时的异常</li><li>UnicodeEncodeError：Unicode编码错误导致的异常</li><li>UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><h3 id="断言-assert-关键词">断言 assert 关键词</h3><p><code>assert</code>这个关键词我们称之为『断言』, 当这个关键词后边的条件为 False 时, 程序自动崩溃并抛出<code>AssertionError</code>的异常.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">assert</span> age &gt; <span class="number">18</span> <span class="comment"># 程序停止, 抛出异常</span></span><br></pre></td></tr></tbody></table></figure><p>常用于单元测试.</p><h3 id="try---except---finally-语句">try - except - finally 语句</h3><p>之前我也一直以为finally没什么用的, 这次学到了.</p><ul><li>若<code>try</code>没有异常, 那么程序执行完<code>try</code>后执行<code>finally</code>;</li><li>若<code>try</code>存在异常, 并被<code>except</code>拦截到了, 那么执行<code>except</code>后执行<code>finally</code>;</li><li>若<code>try</code>存在异常, 但是没有被<code>except</code>拦截到, 那么<strong>先</strong>执行<code>finally</code>, <strong>再</strong>报错!</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = x / y</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"result is"</span>, result)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"division by zero!"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"executing finally clause"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># result is 2.0</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line"></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># division by zero!</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line"></span><br><span class="line">divide(<span class="string">"2"</span>, <span class="string">"1"</span>)</span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line"><span class="comment"># TypeError: unsupported operand type(s) for /: 'str' and 'str'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="raise语句">raise语句</h3><p>Python 使用<code>raise</code>语句抛出一个指定的异常.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'An exception flew by!'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># An exception flew by!</span></span><br></pre></td></tr></tbody></table></figure><p>之前我一直以为raise没什么用, 这次还是o(<em>////▽////</em>)q.</p><h2 id="参考">参考</h2><ol type="1"><li>内容来自<a href="https://tianchi.aliyun.com/specials/promotion/aicamppython">python训练营</a></li><li><a href="https://blog.csdn.net/beautiful77moon/article/details/88938741">Python 元组推导式</a></li></ol><h2 id="个人收获">个人收获</h2><p>巩固了python基础知识, 补充了一些小知识, 一鼓作气继续学.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是在天池学习路线中的『python基础入门』板块, 之前学习过部分, 在此记录一些易错点和不熟悉的地方. 仅作补充, 并不是全部知识点.&lt;/p&gt;
&lt;p&gt;详细知识点的所有代码均可在我的GitHub仓库&lt;a href=&quot;https://github.com/Gipbear/TianChi-Studying&quot;&gt;TianChi-Studying&lt;/a&gt;中找到.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="AI学习" scheme="https://gipbear.github.io/categories/AI%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>算法题解-滑动窗口</title>
    <link href="https://gipbear.github.io/2022/02/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://gipbear.github.io/2022/02/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2022-02-11T06:13:38.000Z</published>
    <updated>2022-02-11T08:44:20.917Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是对算法中的滑动窗口板块刷题时的一些思路和解题方法总结.</p></blockquote><span id="more"></span><h2 id="简单题">简单题</h2><h3 id="学生分数的最小差值窗口不变"><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984. 学生分数的最小差值</a>(窗口不变)</h3><p>这是2022年2月11日的每日一题, 一开始没有理解题目的意思, 这里我分析一下:</p><blockquote><p>给定一个数组<code>nums</code>, 从中任取<code>k</code>个元素, 求<code>k</code>个元素的『最大值与最小值的差』.</p></blockquote><p>一开始容易理解为任意两个值之间的差的最小值, 这是错误的, 举个例子.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">k = <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><p>答案应该是<code>0</code>, 因为可以取出<strong>三个3</strong>, 差值为0.</p><p>其实这道题目很简单, 我们需要取出的k个数差值最小, 那么这k个数一定是<strong>最靠近</strong>的, 那么怎么实现靠近这个条件呢? 就可以先对数组进行<strong>排序</strong>, 然后看<strong>k个一组</strong>的<strong>首尾差值</strong>即可.</p><p>这里倒是用不上双指针, 毕竟窗口大小不变, 可以使用k直接来约束.</p><p>代码如下:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDifference</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 初始为最大值</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left = <span class="number">0</span>; left+k<span class="number">-1</span> &lt; nums.<span class="built_in">size</span>(); left++) {</span><br><span class="line">            res = <span class="built_in">min</span>(res, nums[left+k<span class="number">-1</span>]-nums[left]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="中等题">中等题</h2><h2 id="cv题">CV题</h2><h2 id="个人收获">个人收获</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是对算法中的滑动窗口板块刷题时的一些思路和解题方法总结.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构算法" scheme="https://gipbear.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="c++" scheme="https://gipbear.github.io/tags/c/"/>
    
    <category term="leetcode题解" scheme="https://gipbear.github.io/tags/leetcode%E9%A2%98%E8%A7%A3/"/>
    
    <category term="双指针" scheme="https://gipbear.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="数组" scheme="https://gipbear.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>markdown表情集</title>
    <link href="https://gipbear.github.io/2022/02/05/markdown%E8%A1%A8%E6%83%85%E9%9B%86/"/>
    <id>https://gipbear.github.io/2022/02/05/markdown%E8%A1%A8%E6%83%85%E9%9B%86/</id>
    <published>2022-02-05T13:03:43.000Z</published>
    <updated>2022-02-05T13:08:59.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是小表情的markdown代码, 来自<a href="https://gist.github.com/rxaviers/7360908">GitHub</a>, 也可以使用<code>&lt;Win + .&gt;</code>快捷键来输入.</p></blockquote><span id="more"></span><p>People</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><tbody><tr class="odd"><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bowtie:</code></td><td><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smile:</code></td><td><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:laughing:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blush:</code></td><td><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiley:</code></td><td><span class="github-emoji"><span>☺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:relaxed:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smirk:</code></td><td><span class="github-emoji"><span>😍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_eyes:</code></td><td><span class="github-emoji"><span>😘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_heart:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_closed_eyes:</code></td><td><span class="github-emoji"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flushed:</code></td><td><span class="github-emoji"><span>😌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:relieved:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:satisfied:</code></td><td><span class="github-emoji"><span>😁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grin:</code></td><td><span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wink:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue_winking_eye:</code></td><td><span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue_closed_eyes:</code></td><td><span class="github-emoji"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grinning:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing:</code></td><td><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_smiling_eyes:</code></td><td><span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sleeping:</code></td><td><span class="github-emoji"><span>😟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:worried:</code></td><td><span class="github-emoji"><span>😦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:frowning:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anguished:</code></td><td><span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_mouth:</code></td><td><span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grimacing:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confused:</code></td><td><span class="github-emoji"><span>😯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hushed:</code></td><td><span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:expressionless:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:unamused:</code></td><td><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat_smile:</code></td><td><span class="github-emoji"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:disappointed_relieved:</code></td><td><span class="github-emoji"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:weary:</code></td><td><span class="github-emoji"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pensive:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:disappointed:</code></td><td><span class="github-emoji"><span>😖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confounded:</code></td><td><span class="github-emoji"><span>😨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fearful:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cold_sweat:</code></td><td><span class="github-emoji"><span>😣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:persevere:</code></td><td><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cry:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sob:</code></td><td><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:joy:</code></td><td><span class="github-emoji"><span>😲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:astonished:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scream:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:neckbeard:</code></td><td><span class="github-emoji"><span>😫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tired_face:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:angry:</code></td><td><span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage:</code></td><td><span class="github-emoji"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triumph:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sleepy:</code></td><td><span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yum:</code></td><td><span class="github-emoji"><span>😷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mask:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunglasses:</code></td><td><span class="github-emoji"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dizzy_face:</code></td><td><span class="github-emoji"><span>👿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:imp:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>😈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiling_imp:</code></td><td><span class="github-emoji"><span>😐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:neutral_face:</code></td><td><span class="github-emoji"><span>😶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_mouth:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:innocent:</code></td><td><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:alien:</code></td><td><span class="github-emoji"><span>💛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yellow_heart:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_heart:</code></td><td><span class="github-emoji"><span>💜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:purple_heart:</code></td><td><span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_heart:</code></td><td><span class="github-emoji"><span>💔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:broken_heart:</code></td><td><span class="github-emoji"><span>💓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heartbeat:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heartpulse:</code></td><td><span class="github-emoji"><span>💕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_hearts:</code></td><td><span class="github-emoji"><span>💞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:revolving_hearts:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cupid:</code></td><td><span class="github-emoji"><span>💖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkling_heart:</code></td><td><span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkles:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:star:</code></td><td><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:star2:</code></td><td><span class="github-emoji"><span>💫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dizzy:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boom:</code></td><td><span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:collision:</code></td><td><span class="github-emoji"><span>💢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anger:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:exclamation:</code></td><td><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:question:</code></td><td><span class="github-emoji"><span>❕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grey_exclamation:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>❔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grey_question:</code></td><td><span class="github-emoji"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zzz:</code></td><td><span class="github-emoji"><span>💨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dash:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat_drops:</code></td><td><span class="github-emoji"><span>🎶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notes:</code></td><td><span class="github-emoji"><span>🎵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_note:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fire:</code></td><td><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hankey:</code></td><td><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poop:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shit:</code></td><td>:+1: <code>:+1:</code></td><td><span class="github-emoji"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thumbsup:</code></td></tr><tr class="odd"><td>:-1: <code>:-1:</code></td><td><span class="github-emoji"><span>👎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thumbsdown:</code></td><td><span class="github-emoji"><span>👌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok_hand:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:punch:</code></td><td><span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:facepunch:</code></td><td><span class="github-emoji"><span>✊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fist:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:v:</code></td><td><span class="github-emoji"><span>👋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wave:</code></td><td><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hand:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raised_hand:</code></td><td><span class="github-emoji"><span>👐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_hands:</code></td><td><span class="github-emoji"><span>☝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_up:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_down:</code></td><td><span class="github-emoji"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_left:</code></td><td><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_right:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🙌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raised_hands:</code></td><td><span class="github-emoji"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pray:</code></td><td><span class="github-emoji"><span>👆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_up_2:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clap:</code></td><td><span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:muscle:</code></td><td><span class="github-emoji"><span>🤘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:metal:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🖕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fu:</code></td><td><span class="github-emoji"><span>🚶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:walking:</code></td><td><span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:runner:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:running:</code></td><td><span class="github-emoji"><span>👫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couple:</code></td><td><span class="github-emoji"><span>👪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:family:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_men_holding_hands:</code></td><td><span class="github-emoji"><span>👭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_women_holding_hands:</code></td><td><span class="github-emoji"><span>💃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dancer:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dancers:</code></td><td><span class="github-emoji"><span>🙆♀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok_woman:</code></td><td><span class="github-emoji"><span>🙅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_good:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:information_desk_person:</code></td><td><span class="github-emoji"><span>🙋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raising_hand:</code></td><td><span class="github-emoji"><span>👰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bride_with_veil:</code></td></tr><tr class="odd"><td>:person_with_pouting_face: <code>:person_with_pouting_face:</code></td><td>:person_frowning: <code>:person_frowning:</code></td><td><span class="github-emoji"><span>🙇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bow:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couplekiss:</code></td><td><span class="github-emoji"><span>💑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couple_with_heart:</code></td><td><span class="github-emoji"><span>💆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:massage:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:haircut:</code></td><td><span class="github-emoji"><span>💅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nail_care:</code></td><td><span class="github-emoji"><span>👦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boy:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:girl:</code></td><td><span class="github-emoji"><span>👩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:woman:</code></td><td><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby:</code></td><td><span class="github-emoji"><span>👵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:older_woman:</code></td><td><span class="github-emoji"><span>👴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:older_man:</code></td></tr><tr class="even"><td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td><td><span class="github-emoji"><span>👲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man_with_gua_pi_mao:</code></td><td><span class="github-emoji"><span>👳♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man_with_turban:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:construction_worker:</code></td><td><span class="github-emoji"><span>👮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cop:</code></td><td><span class="github-emoji"><span>👼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:angel:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:princess:</code></td><td><span class="github-emoji"><span>😺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiley_cat:</code></td><td><span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smile_cat:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_eyes_cat:</code></td><td><span class="github-emoji"><span>😽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_cat:</code></td><td><span class="github-emoji"><span>😼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smirk_cat:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🙀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scream_cat:</code></td><td><span class="github-emoji"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crying_cat_face:</code></td><td><span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:joy_cat:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>😾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pouting_cat:</code></td><td><span class="github-emoji"><span>👹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_ogre:</code></td><td><span class="github-emoji"><span>👺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_goblin:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:see_no_evil:</code></td><td><span class="github-emoji"><span>🙉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hear_no_evil:</code></td><td><span class="github-emoji"><span>🙊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speak_no_evil:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💂♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:guardsman:</code></td><td><span class="github-emoji"><span>💀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:skull:</code></td><td><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:feet:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lips:</code></td><td><span class="github-emoji"><span>💋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kiss:</code></td><td><span class="github-emoji"><span>💧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:droplet:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ear:</code></td><td><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eyes:</code></td><td><span class="github-emoji"><span>👃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nose:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tongue:</code></td><td><span class="github-emoji"><span>💌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:love_letter:</code></td><td><span class="github-emoji"><span>👤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bust_in_silhouette:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:busts_in_silhouette:</code></td><td><span class="github-emoji"><span>💬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speech_balloon:</code></td><td><span class="github-emoji"><span>💭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thought_balloon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:feelsgood:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/finnadie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:finnadie:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/goberserk.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:goberserk:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/godmode.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:godmode:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hurtrealbad:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage1:</code></td></tr><tr class="even"><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage2:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage3:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage4:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/suspect.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:suspect:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/trollface.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trollface:</code></td><td></td></tr></tbody></table><p>Nature</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><tbody><tr class="odd"><td><span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunny:</code></td><td><span class="github-emoji"><span>☔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:umbrella:</code></td><td><span class="github-emoji"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cloud:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>❄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowflake:</code></td><td><span class="github-emoji"><span>⛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowman:</code></td><td><span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zap:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cyclone:</code></td><td><span class="github-emoji"><span>🌁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:foggy:</code></td><td><span class="github-emoji"><span>🌊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ocean:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cat:</code></td><td><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dog:</code></td><td><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mouse:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hamster:</code></td><td><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rabbit:</code></td><td><span class="github-emoji"><span>🐺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wolf:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:frog:</code></td><td><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tiger:</code></td><td><span class="github-emoji"><span>🐨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:koala:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bear:</code></td><td><span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig:</code></td><td><span class="github-emoji"><span>🐽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig_nose:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cow:</code></td><td><span class="github-emoji"><span>🐗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boar:</code></td><td><span class="github-emoji"><span>🐵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monkey_face:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monkey:</code></td><td><span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:horse:</code></td><td><span class="github-emoji"><span>🐎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:racehorse:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:camel:</code></td><td><span class="github-emoji"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sheep:</code></td><td><span class="github-emoji"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:elephant:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:panda_face:</code></td><td><span class="github-emoji"><span>🐍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snake:</code></td><td><span class="github-emoji"><span>🐦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bird:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_chick:</code></td><td><span class="github-emoji"><span>🐥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hatched_chick:</code></td><td><span class="github-emoji"><span>🐣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hatching_chick:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chicken:</code></td><td><span class="github-emoji"><span>🐧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:penguin:</code></td><td><span class="github-emoji"><span>🐢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:turtle:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bug:</code></td><td><span class="github-emoji"><span>🐝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:honeybee:</code></td><td><span class="github-emoji"><span>🐜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ant:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beetle:</code></td><td><span class="github-emoji"><span>🐌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snail:</code></td><td><span class="github-emoji"><span>🐙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:octopus:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tropical_fish:</code></td><td><span class="github-emoji"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fish:</code></td><td><span class="github-emoji"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:whale:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:whale2:</code></td><td><span class="github-emoji"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dolphin:</code></td><td><span class="github-emoji"><span>🐄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cow2:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ram:</code></td><td><span class="github-emoji"><span>🐀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rat:</code></td><td><span class="github-emoji"><span>🐃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:water_buffalo:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tiger2:</code></td><td><span class="github-emoji"><span>🐇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rabbit2:</code></td><td><span class="github-emoji"><span>🐉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dragon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:goat:</code></td><td><span class="github-emoji"><span>🐓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rooster:</code></td><td><span class="github-emoji"><span>🐕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dog2:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig2:</code></td><td><span class="github-emoji"><span>🐁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mouse2:</code></td><td><span class="github-emoji"><span>🐂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ox:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dragon_face:</code></td><td><span class="github-emoji"><span>🐡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blowfish:</code></td><td><span class="github-emoji"><span>🐊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crocodile:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🐪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dromedary_camel:</code></td><td><span class="github-emoji"><span>🐆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leopard:</code></td><td><span class="github-emoji"><span>🐈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cat2:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🐩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poodle:</code></td><td><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:paw_prints:</code></td><td><span class="github-emoji"><span>💐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bouquet:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cherry_blossom:</code></td><td><span class="github-emoji"><span>🌷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tulip:</code></td><td><span class="github-emoji"><span>🍀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:four_leaf_clover:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rose:</code></td><td><span class="github-emoji"><span>🌻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunflower:</code></td><td><span class="github-emoji"><span>🌺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hibiscus:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:maple_leaf:</code></td><td><span class="github-emoji"><span>🍃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leaves:</code></td><td><span class="github-emoji"><span>🍂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fallen_leaf:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:herb:</code></td><td><span class="github-emoji"><span>🍄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mushroom:</code></td><td><span class="github-emoji"><span>🌵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cactus:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:palm_tree:</code></td><td><span class="github-emoji"><span>🌲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:evergreen_tree:</code></td><td><span class="github-emoji"><span>🌳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:deciduous_tree:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chestnut:</code></td><td><span class="github-emoji"><span>🌱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seedling:</code></td><td><span class="github-emoji"><span>🌼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blossom:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ear_of_rice:</code></td><td><span class="github-emoji"><span>🐚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shell:</code></td><td><span class="github-emoji"><span>🌐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:globe_with_meridians:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sun_with_face:</code></td><td><span class="github-emoji"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:full_moon_with_face:</code></td><td><span class="github-emoji"><span>🌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new_moon_with_face:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new_moon:</code></td><td><span class="github-emoji"><span>🌒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waxing_crescent_moon:</code></td><td><span class="github-emoji"><span>🌓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:first_quarter_moon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waxing_gibbous_moon:</code></td><td><span class="github-emoji"><span>🌕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:full_moon:</code></td><td><span class="github-emoji"><span>🌖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waning_gibbous_moon:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:last_quarter_moon:</code></td><td><span class="github-emoji"><span>🌘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waning_crescent_moon:</code></td><td><span class="github-emoji"><span>🌜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:last_quarter_moon_with_face:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:first_quarter_moon_with_face:</code></td><td><span class="github-emoji"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moon:</code></td><td><span class="github-emoji"><span>🌍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_africa:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_americas:</code></td><td><span class="github-emoji"><span>🌏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_asia:</code></td><td><span class="github-emoji"><span>🌋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:volcano:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:milky_way:</code></td><td><span class="github-emoji"><span>⛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:partly_sunny:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:octocat:</code></td></tr><tr class="odd"><td>:squirrel: <code>:squirrel:</code></td><td></td><td></td></tr></tbody></table><p>Objects</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><tbody><tr class="odd"><td><span class="github-emoji"><span>🎍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bamboo:</code></td><td><span class="github-emoji"><span>💝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gift_heart:</code></td><td><span class="github-emoji"><span>🎎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dolls:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:school_satchel:</code></td><td><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mortar_board:</code></td><td><span class="github-emoji"><span>🎏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flags:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fireworks:</code></td><td><span class="github-emoji"><span>🎇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkler:</code></td><td><span class="github-emoji"><span>🎐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wind_chime:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_scene:</code></td><td><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jack_o_lantern:</code></td><td><span class="github-emoji"><span>👻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ghost:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:santa:</code></td><td><span class="github-emoji"><span>🎄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:christmas_tree:</code></td><td><span class="github-emoji"><span>🎁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gift:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bell:</code></td><td><span class="github-emoji"><span>🔕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_bell:</code></td><td><span class="github-emoji"><span>🎋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tanabata_tree:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tada:</code></td><td><span class="github-emoji"><span>🎊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confetti_ball:</code></td><td><span class="github-emoji"><span>🎈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:balloon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crystal_ball:</code></td><td><span class="github-emoji"><span>💿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cd:</code></td><td><span class="github-emoji"><span>📀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dvd:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:floppy_disk:</code></td><td><span class="github-emoji"><span>📷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:camera:</code></td><td><span class="github-emoji"><span>📹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:video_camera:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:movie_camera:</code></td><td><span class="github-emoji"><span>💻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:computer:</code></td><td><span class="github-emoji"><span>📺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tv:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:iphone:</code></td><td><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:phone:</code></td><td><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telephone:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telephone_receiver:</code></td><td><span class="github-emoji"><span>📟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pager:</code></td><td><span class="github-emoji"><span>📠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fax:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:minidisc:</code></td><td><span class="github-emoji"><span>📼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vhs:</code></td><td><span class="github-emoji"><span>🔉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sound:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speaker:</code></td><td><span class="github-emoji"><span>🔇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mute:</code></td><td><span class="github-emoji"><span>📢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:loudspeaker:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mega:</code></td><td><span class="github-emoji"><span>⌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hourglass:</code></td><td><span class="github-emoji"><span>⏳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hourglass_flowing_sand:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:alarm_clock:</code></td><td><span class="github-emoji"><span>⌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:watch:</code></td><td><span class="github-emoji"><span>📻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:radio:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:satellite:</code></td><td><span class="github-emoji"><span>➿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:loop:</code></td><td><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mag:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mag_right:</code></td><td><span class="github-emoji"><span>🔓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:unlock:</code></td><td><span class="github-emoji"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lock:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lock_with_ink_pen:</code></td><td><span class="github-emoji"><span>🔐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_lock_with_key:</code></td><td><span class="github-emoji"><span>🔑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:key:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bulb:</code></td><td><span class="github-emoji"><span>🔦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flashlight:</code></td><td><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:high_brightness:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:low_brightness:</code></td><td><span class="github-emoji"><span>🔌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:electric_plug:</code></td><td><span class="github-emoji"><span>🔋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:battery:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:calling:</code></td><td><span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:email:</code></td><td><span class="github-emoji"><span>📫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:postbox:</code></td><td><span class="github-emoji"><span>🛀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bath:</code></td><td><span class="github-emoji"><span>🛁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bathtub:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shower:</code></td><td><span class="github-emoji"><span>🚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:toilet:</code></td><td><span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wrench:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nut_and_bolt:</code></td><td><span class="github-emoji"><span>🔨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hammer:</code></td><td><span class="github-emoji"><span>💺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seat:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moneybag:</code></td><td><span class="github-emoji"><span>💴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yen:</code></td><td><span class="github-emoji"><span>💵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dollar:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pound:</code></td><td><span class="github-emoji"><span>💶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:euro:</code></td><td><span class="github-emoji"><span>💳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:credit_card:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:money_with_wings:</code></td><td>:e-mail: <code>:e-mail:</code></td><td><span class="github-emoji"><span>📥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:inbox_tray:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:outbox_tray:</code></td><td><span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:envelope:</code></td><td><span class="github-emoji"><span>📨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:incoming_envelope:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:postal_horn:</code></td><td><span class="github-emoji"><span>📪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_closed:</code></td><td><span class="github-emoji"><span>📬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_with_mail:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_with_no_mail:</code></td><td><span class="github-emoji"><span>🚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:door:</code></td><td><span class="github-emoji"><span>🚬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smoking:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bomb:</code></td><td><span class="github-emoji"><span>🔫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gun:</code></td><td><span class="github-emoji"><span>🔪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hocho:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pill:</code></td><td><span class="github-emoji"><span>💉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:syringe:</code></td><td><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:page_facing_up:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:page_with_curl:</code></td><td><span class="github-emoji"><span>📑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bookmark_tabs:</code></td><td><span class="github-emoji"><span>📊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bar_chart:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart_with_upwards_trend:</code></td><td><span class="github-emoji"><span>📉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart_with_downwards_trend:</code></td><td><span class="github-emoji"><span>📜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scroll:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clipboard:</code></td><td><span class="github-emoji"><span>📆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:calendar:</code></td><td><span class="github-emoji"><span>📅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:date:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:card_index:</code></td><td><span class="github-emoji"><span>📁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:file_folder:</code></td><td><span class="github-emoji"><span>📂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_file_folder:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>✂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scissors:</code></td><td><span class="github-emoji"><span>📌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pushpin:</code></td><td><span class="github-emoji"><span>📎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:paperclip:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_nib:</code></td><td><span class="github-emoji"><span>✏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pencil2:</code></td><td><span class="github-emoji"><span>📏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:straight_ruler:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triangular_ruler:</code></td><td><span class="github-emoji"><span>📕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_book:</code></td><td><span class="github-emoji"><span>📗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_book:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_book:</code></td><td><span class="github-emoji"><span>📙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:orange_book:</code></td><td><span class="github-emoji"><span>📓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notebook:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notebook_with_decorative_cover:</code></td><td><span class="github-emoji"><span>📒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ledger:</code></td><td><span class="github-emoji"><span>📚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:books:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bookmark:</code></td><td><span class="github-emoji"><span>📛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:name_badge:</code></td><td><span class="github-emoji"><span>🔬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:microscope:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telescope:</code></td><td><span class="github-emoji"><span>📰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:newspaper:</code></td><td><span class="github-emoji"><span>🏈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:football:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🏀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:basketball:</code></td><td><span class="github-emoji"><span>⚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:soccer:</code></td><td><span class="github-emoji"><span>⚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baseball:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tennis:</code></td><td><span class="github-emoji"><span>🎱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:8ball:</code></td><td><span class="github-emoji"><span>🏉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rugby_football:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bowling:</code></td><td><span class="github-emoji"><span>⛳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:golf:</code></td><td><span class="github-emoji"><span>🚵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_bicyclist:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bicyclist:</code></td><td><span class="github-emoji"><span>🏇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:horse_racing:</code></td><td><span class="github-emoji"><span>🏂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowboarder:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🏊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:swimmer:</code></td><td><span class="github-emoji"><span>🏄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:surfer:</code></td><td><span class="github-emoji"><span>🎿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ski:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>♠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:spades:</code></td><td><span class="github-emoji"><span>♥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hearts:</code></td><td><span class="github-emoji"><span>♣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clubs:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>♦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:diamonds:</code></td><td><span class="github-emoji"><span>💎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gem:</code></td><td><span class="github-emoji"><span>💍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ring:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🏆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trophy:</code></td><td><span class="github-emoji"><span>🎼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_score:</code></td><td><span class="github-emoji"><span>🎹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_keyboard:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:violin:</code></td><td><span class="github-emoji"><span>👾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:space_invader:</code></td><td><span class="github-emoji"><span>🎮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:video_game:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🃏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_joker:</code></td><td><span class="github-emoji"><span>🎴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flower_playing_cards:</code></td><td><span class="github-emoji"><span>🎲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:game_die:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dart:</code></td><td><span class="github-emoji"><span>🀄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mahjong:</code></td><td><span class="github-emoji"><span>🎬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clapper:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:memo:</code></td><td><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pencil:</code></td><td><span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:book:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:art:</code></td><td><span class="github-emoji"><span>🎤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:microphone:</code></td><td><span class="github-emoji"><span>🎧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:headphones:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trumpet:</code></td><td><span class="github-emoji"><span>🎷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:saxophone:</code></td><td><span class="github-emoji"><span>🎸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:guitar:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shoe:</code></td><td><span class="github-emoji"><span>👡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sandal:</code></td><td><span class="github-emoji"><span>👠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:high_heel:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lipstick:</code></td><td><span class="github-emoji"><span>👢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boot:</code></td><td><span class="github-emoji"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shirt:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tshirt:</code></td><td><span class="github-emoji"><span>👔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:necktie:</code></td><td><span class="github-emoji"><span>👚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womans_clothes:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dress:</code></td><td><span class="github-emoji"><span>🎽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:running_shirt_with_sash:</code></td><td><span class="github-emoji"><span>👖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jeans:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kimono:</code></td><td><span class="github-emoji"><span>👙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bikini:</code></td><td><span class="github-emoji"><span>🎀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ribbon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tophat:</code></td><td><span class="github-emoji"><span>👑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crown:</code></td><td><span class="github-emoji"><span>👒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womans_hat:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mans_shoe:</code></td><td><span class="github-emoji"><span>🌂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_umbrella:</code></td><td><span class="github-emoji"><span>💼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:briefcase:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>👜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:handbag:</code></td><td><span class="github-emoji"><span>👝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pouch:</code></td><td><span class="github-emoji"><span>👛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:purse:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>👓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eyeglasses:</code></td><td><span class="github-emoji"><span>🎣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fishing_pole_and_fish:</code></td><td><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:coffee:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tea:</code></td><td><span class="github-emoji"><span>🍶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sake:</code></td><td><span class="github-emoji"><span>🍼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_bottle:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beer:</code></td><td><span class="github-emoji"><span>🍻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beers:</code></td><td><span class="github-emoji"><span>🍸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cocktail:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tropical_drink:</code></td><td><span class="github-emoji"><span>🍷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wine_glass:</code></td><td><span class="github-emoji"><span>🍴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fork_and_knife:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pizza:</code></td><td><span class="github-emoji"><span>🍔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hamburger:</code></td><td><span class="github-emoji"><span>🍟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fries:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poultry_leg:</code></td><td><span class="github-emoji"><span>🍖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:meat_on_bone:</code></td><td><span class="github-emoji"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:spaghetti:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:curry:</code></td><td><span class="github-emoji"><span>🍤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fried_shrimp:</code></td><td><span class="github-emoji"><span>🍱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bento:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sushi:</code></td><td><span class="github-emoji"><span>🍥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fish_cake:</code></td><td><span class="github-emoji"><span>🍙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_ball:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_cracker:</code></td><td><span class="github-emoji"><span>🍚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice:</code></td><td><span class="github-emoji"><span>🍜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ramen:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stew:</code></td><td><span class="github-emoji"><span>🍢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oden:</code></td><td><span class="github-emoji"><span>🍡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dango:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🥚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:egg:</code></td><td><span class="github-emoji"><span>🍞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bread:</code></td><td><span class="github-emoji"><span>🍩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:doughnut:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:custard:</code></td><td><span class="github-emoji"><span>🍦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:icecream:</code></td><td><span class="github-emoji"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ice_cream:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shaved_ice:</code></td><td><span class="github-emoji"><span>🎂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:birthday:</code></td><td><span class="github-emoji"><span>🍰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cake:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cookie:</code></td><td><span class="github-emoji"><span>🍫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chocolate_bar:</code></td><td><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:candy:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lollipop:</code></td><td><span class="github-emoji"><span>🍯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:honey_pot:</code></td><td><span class="github-emoji"><span>🍎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:apple:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_apple:</code></td><td><span class="github-emoji"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tangerine:</code></td><td><span class="github-emoji"><span>🍋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lemon:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cherries:</code></td><td><span class="github-emoji"><span>🍇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grapes:</code></td><td><span class="github-emoji"><span>🍉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:watermelon:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:strawberry:</code></td><td><span class="github-emoji"><span>🍑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:peach:</code></td><td><span class="github-emoji"><span>🍈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:melon:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:banana:</code></td><td><span class="github-emoji"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pear:</code></td><td><span class="github-emoji"><span>🍍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pineapple:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🍠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweet_potato:</code></td><td><span class="github-emoji"><span>🍆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eggplant:</code></td><td><span class="github-emoji"><span>🍅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tomato:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:corn:</code></td><td></td><td></td></tr></tbody></table><p>Places</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><tbody><tr class="odd"><td><span class="github-emoji"><span>🏠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:house:</code></td><td><span class="github-emoji"><span>🏡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:house_with_garden:</code></td><td><span class="github-emoji"><span>🏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:school:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🏢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:office:</code></td><td><span class="github-emoji"><span>🏣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:post_office:</code></td><td><span class="github-emoji"><span>🏥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hospital:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🏦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bank:</code></td><td><span class="github-emoji"><span>🏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:convenience_store:</code></td><td><span class="github-emoji"><span>🏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:love_hotel:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🏨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hotel:</code></td><td><span class="github-emoji"><span>💒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wedding:</code></td><td><span class="github-emoji"><span>⛪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:church:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:department_store:</code></td><td><span class="github-emoji"><span>🏤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:european_post_office:</code></td><td><span class="github-emoji"><span>🌇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:city_sunrise:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:city_sunset:</code></td><td><span class="github-emoji"><span>🏯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_castle:</code></td><td><span class="github-emoji"><span>🏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:european_castle:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>⛺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tent:</code></td><td><span class="github-emoji"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:factory:</code></td><td><span class="github-emoji"><span>🗼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tokyo_tower:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🗾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japan:</code></td><td><span class="github-emoji"><span>🗻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mount_fuji:</code></td><td><span class="github-emoji"><span>🌄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunrise_over_mountains:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🌅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunrise:</code></td><td><span class="github-emoji"><span>🌠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stars:</code></td><td><span class="github-emoji"><span>🗽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:statue_of_liberty:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🌉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bridge_at_night:</code></td><td><span class="github-emoji"><span>🎠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:carousel_horse:</code></td><td><span class="github-emoji"><span>🌈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rainbow:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🎡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ferris_wheel:</code></td><td><span class="github-emoji"><span>⛲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fountain:</code></td><td><span class="github-emoji"><span>🎢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:roller_coaster:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ship:</code></td><td><span class="github-emoji"><span>🚤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speedboat:</code></td><td><span class="github-emoji"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boat:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sailboat:</code></td><td><span class="github-emoji"><span>🚣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rowboat:</code></td><td><span class="github-emoji"><span>⚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anchor:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rocket:</code></td><td><span class="github-emoji"><span>✈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:airplane:</code></td><td><span class="github-emoji"><span>🚁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:helicopter:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:steam_locomotive:</code></td><td><span class="github-emoji"><span>🚊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tram:</code></td><td><span class="github-emoji"><span>🚞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_railway:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bike:</code></td><td><span class="github-emoji"><span>🚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aerial_tramway:</code></td><td><span class="github-emoji"><span>🚟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:suspension_railway:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_cableway:</code></td><td><span class="github-emoji"><span>🚜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tractor:</code></td><td><span class="github-emoji"><span>🚙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_car:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_automobile:</code></td><td><span class="github-emoji"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:car:</code></td><td><span class="github-emoji"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:red_car:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:taxi:</code></td><td><span class="github-emoji"><span>🚖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_taxi:</code></td><td><span class="github-emoji"><span>🚛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:articulated_lorry:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bus:</code></td><td><span class="github-emoji"><span>🚍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_bus:</code></td><td><span class="github-emoji"><span>🚨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rotating_light:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:police_car:</code></td><td><span class="github-emoji"><span>🚔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_police_car:</code></td><td><span class="github-emoji"><span>🚒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fire_engine:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ambulance:</code></td><td><span class="github-emoji"><span>🚐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:minibus:</code></td><td><span class="github-emoji"><span>🚚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:truck:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:train:</code></td><td><span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:station:</code></td><td><span class="github-emoji"><span>🚆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:train2:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bullettrain_front:</code></td><td><span class="github-emoji"><span>🚄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bullettrain_side:</code></td><td><span class="github-emoji"><span>🚈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:light_rail:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monorail:</code></td><td><span class="github-emoji"><span>🚃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:railway_car:</code></td><td><span class="github-emoji"><span>🚎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trolleybus:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🎫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ticket:</code></td><td><span class="github-emoji"><span>⛽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fuelpump:</code></td><td><span class="github-emoji"><span>🚦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vertical_traffic_light:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:traffic_light:</code></td><td><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:warning:</code></td><td><span class="github-emoji"><span>🚧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:construction:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beginner:</code></td><td><span class="github-emoji"><span>🏧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:atm:</code></td><td><span class="github-emoji"><span>🎰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:slot_machine:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:busstop:</code></td><td><span class="github-emoji"><span>💈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:barber:</code></td><td><span class="github-emoji"><span>♨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hotsprings:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🏁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:checkered_flag:</code></td><td><span class="github-emoji"><span>🎌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crossed_flags:</code></td><td><span class="github-emoji"><span>🏮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:izakaya_lantern:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🗿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moyai:</code></td><td><span class="github-emoji"><span>🎪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:circus_tent:</code></td><td><span class="github-emoji"><span>🎭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:performing_arts:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>📍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:round_pushpin:</code></td><td><span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triangular_flag_on_post:</code></td><td><span class="github-emoji"><span>🇯🇵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jp:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🇰🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kr:</code></td><td><span class="github-emoji"><span>🇨🇳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cn:</code></td><td><span class="github-emoji"><span>🇺🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:us:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🇫🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fr:</code></td><td><span class="github-emoji"><span>🇪🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:es:</code></td><td><span class="github-emoji"><span>🇮🇹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:it:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🇷🇺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ru:</code></td><td><span class="github-emoji"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gb:</code></td><td><span class="github-emoji"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:uk:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🇩🇪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:de:</code></td><td></td><td></td></tr></tbody></table><p>Symbols</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><tbody><tr class="odd"><td><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:one:</code></td><td><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two:</code></td><td><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:three:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:four:</code></td><td><span class="github-emoji"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:five:</code></td><td><span class="github-emoji"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:six:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seven:</code></td><td><span class="github-emoji"><span>8⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight:</code></td><td><span class="github-emoji"><span>9⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nine:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:keycap_ten:</code></td><td><span class="github-emoji"><span>🔢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:1234:</code></td><td><span class="github-emoji"><span>0⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zero:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>#⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hash:</code></td><td><span class="github-emoji"><span>🔣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:symbols:</code></td><td><span class="github-emoji"><span>◀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_backward:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_down:</code></td><td><span class="github-emoji"><span>▶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_forward:</code></td><td><span class="github-emoji"><span>⬅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_left:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:capital_abcd:</code></td><td><span class="github-emoji"><span>🔡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:abcd:</code></td><td><span class="github-emoji"><span>🔤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:abc:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>↙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_lower_left:</code></td><td><span class="github-emoji"><span>↘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_lower_right:</code></td><td><span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_right:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>⬆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up:</code></td><td><span class="github-emoji"><span>↖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_upper_left:</code></td><td><span class="github-emoji"><span>↗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_upper_right:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_double_down:</code></td><td><span class="github-emoji"><span>⏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_double_up:</code></td><td><span class="github-emoji"><span>🔽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_down_small:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>⤵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_heading_down:</code></td><td><span class="github-emoji"><span>⤴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_heading_up:</code></td><td><span class="github-emoji"><span>↩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leftwards_arrow_with_hook:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>↪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_right_hook:</code></td><td><span class="github-emoji"><span>↔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:left_right_arrow:</code></td><td><span class="github-emoji"><span>↕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up_down:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up_small:</code></td><td><span class="github-emoji"><span>🔃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrows_clockwise:</code></td><td><span class="github-emoji"><span>🔄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrows_counterclockwise:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rewind:</code></td><td><span class="github-emoji"><span>⏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fast_forward:</code></td><td><span class="github-emoji"><span>ℹ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:information_source:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok:</code></td><td><span class="github-emoji"><span>🔀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:twisted_rightwards_arrows:</code></td><td><span class="github-emoji"><span>🔁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:repeat:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:repeat_one:</code></td><td><span class="github-emoji"><span>🆕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new:</code></td><td><span class="github-emoji"><span>🔝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:top:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🆙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:up:</code></td><td><span class="github-emoji"><span>🆒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cool:</code></td><td><span class="github-emoji"><span>🆓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:free:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🆖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ng:</code></td><td><span class="github-emoji"><span>🎦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cinema:</code></td><td><span class="github-emoji"><span>🈁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:koko:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>📶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:signal_strength:</code></td><td><span class="github-emoji"><span>🈹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u5272:</code></td><td><span class="github-emoji"><span>🈴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u5408:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🈺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u55b6:</code></td><td><span class="github-emoji"><span>🈯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6307:</code></td><td><span class="github-emoji"><span>🈷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6708:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🈶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6709:</code></td><td><span class="github-emoji"><span>🈵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6e80:</code></td><td><span class="github-emoji"><span>🈚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7121:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🈸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7533:</code></td><td><span class="github-emoji"><span>🈳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7a7a:</code></td><td><span class="github-emoji"><span>🈲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7981:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🈂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sa:</code></td><td><span class="github-emoji"><span>🚻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:restroom:</code></td><td><span class="github-emoji"><span>🚹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mens:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womens:</code></td><td><span class="github-emoji"><span>🚼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_symbol:</code></td><td><span class="github-emoji"><span>🚭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_smoking:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🅿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:parking:</code></td><td><span class="github-emoji"><span>♿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wheelchair:</code></td><td><span class="github-emoji"><span>🚇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:metro:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baggage_claim:</code></td><td><span class="github-emoji"><span>🉑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:accept:</code></td><td><span class="github-emoji"><span>🚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wc:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:potable_water:</code></td><td><span class="github-emoji"><span>🚮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:put_litter_in_its_place:</code></td><td><span class="github-emoji"><span>㊙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:secret:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>㊗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:congratulations:</code></td><td><span class="github-emoji"><span>Ⓜ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:m:</code></td><td><span class="github-emoji"><span>🛂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:passport_control:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:left_luggage:</code></td><td><span class="github-emoji"><span>🛃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:customs:</code></td><td><span class="github-emoji"><span>🉐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ideograph_advantage:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🆑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cl:</code></td><td><span class="github-emoji"><span>🆘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sos:</code></td><td><span class="github-emoji"><span>🆔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:id:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_entry_sign:</code></td><td><span class="github-emoji"><span>🔞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:underage:</code></td><td><span class="github-emoji"><span>📵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_mobile_phones:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🚯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:do_not_litter:</code></td><td>:non-potable_water: <code>:non-potable_water:</code></td><td><span class="github-emoji"><span>🚳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_bicycles:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🚷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_pedestrians:</code></td><td><span class="github-emoji"><span>🚸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:children_crossing:</code></td><td><span class="github-emoji"><span>⛔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_entry:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>✳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight_spoked_asterisk:</code></td><td><span class="github-emoji"><span>✴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight_pointed_black_star:</code></td><td><span class="github-emoji"><span>💟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_decoration:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🆚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vs:</code></td><td><span class="github-emoji"><span>📳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vibration_mode:</code></td><td><span class="github-emoji"><span>📴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mobile_phone_off:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>💹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart:</code></td><td><span class="github-emoji"><span>💱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:currency_exchange:</code></td><td><span class="github-emoji"><span>♈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aries:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>♉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:taurus:</code></td><td><span class="github-emoji"><span>♊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gemini:</code></td><td><span class="github-emoji"><span>♋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cancer:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>♌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leo:</code></td><td><span class="github-emoji"><span>♍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:virgo:</code></td><td><span class="github-emoji"><span>♎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:libra:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>♏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scorpius:</code></td><td><span class="github-emoji"><span>♐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sagittarius:</code></td><td><span class="github-emoji"><span>♑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:capricorn:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>♒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aquarius:</code></td><td><span class="github-emoji"><span>♓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pisces:</code></td><td><span class="github-emoji"><span>⛎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ophiuchus:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:six_pointed_star:</code></td><td><span class="github-emoji"><span>❎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:negative_squared_cross_mark:</code></td><td><span class="github-emoji"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:a:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🅱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:b:</code></td><td><span class="github-emoji"><span>🆎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ab:</code></td><td><span class="github-emoji"><span>🅾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:o2:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:diamond_shape_with_a_dot_inside:</code></td><td><span class="github-emoji"><span>♻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:recycle:</code></td><td><span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:end:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:on:</code></td><td><span class="github-emoji"><span>🔜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:soon:</code></td><td><span class="github-emoji"><span>🕐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🕜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock130:</code></td><td><span class="github-emoji"><span>🕙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock10:</code></td><td><span class="github-emoji"><span>🕥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1030:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🕚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock11:</code></td><td><span class="github-emoji"><span>🕦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1130:</code></td><td><span class="github-emoji"><span>🕛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock12:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🕧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1230:</code></td><td><span class="github-emoji"><span>🕑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock2:</code></td><td><span class="github-emoji"><span>🕝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock230:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock3:</code></td><td><span class="github-emoji"><span>🕞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock330:</code></td><td><span class="github-emoji"><span>🕓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock4:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🕟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock430:</code></td><td><span class="github-emoji"><span>🕔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock5:</code></td><td><span class="github-emoji"><span>🕠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock530:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🕕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock6:</code></td><td><span class="github-emoji"><span>🕡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock630:</code></td><td><span class="github-emoji"><span>🕖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock7:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🕢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock730:</code></td><td><span class="github-emoji"><span>🕗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock8:</code></td><td><span class="github-emoji"><span>🕣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock830:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🕘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock9:</code></td><td><span class="github-emoji"><span>🕤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock930:</code></td><td><span class="github-emoji"><span>💲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_dollar_sign:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>©</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:copyright:</code></td><td><span class="github-emoji"><span>®</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:registered:</code></td><td><span class="github-emoji"><span>™</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tm:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:x:</code></td><td><span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_exclamation_mark:</code></td><td><span class="github-emoji"><span>‼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bangbang:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>⁉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:interrobang:</code></td><td><span class="github-emoji"><span>⭕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:o:</code></td><td><span class="github-emoji"><span>✖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_multiplication_x:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_plus_sign:</code></td><td><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_minus_sign:</code></td><td><span class="github-emoji"><span>➗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_division_sign:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>💮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_flower:</code></td><td><span class="github-emoji"><span>💯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:100:</code></td><td><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_check_mark:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>☑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ballot_box_with_check:</code></td><td><span class="github-emoji"><span>🔘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:radio_button:</code></td><td><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:link:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>➰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:curly_loop:</code></td><td><span class="github-emoji"><span>〰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wavy_dash:</code></td><td><span class="github-emoji"><span>〽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:part_alternation_mark:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trident:</code></td><td>:black_square: <code>:black_square:</code></td><td>:white_square: <code>:white_square:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_check_mark:</code></td><td><span class="github-emoji"><span>🔲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_square_button:</code></td><td><span class="github-emoji"><span>🔳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_square_button:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>⚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_circle:</code></td><td><span class="github-emoji"><span>⚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_circle:</code></td><td><span class="github-emoji"><span>🔴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:red_circle:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_blue_circle:</code></td><td><span class="github-emoji"><span>🔷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_blue_diamond:</code></td><td><span class="github-emoji"><span>🔶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_orange_diamond:</code></td></tr><tr class="even"><td><span class="github-emoji"><span>🔹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_blue_diamond:</code></td><td><span class="github-emoji"><span>🔸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_orange_diamond:</code></td><td><span class="github-emoji"><span>🔺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_red_triangle:</code></td></tr><tr class="odd"><td><span class="github-emoji"><span>🔻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_red_triangle_down:</code></td><td><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/shipit.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shipit:</code></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是小表情的markdown代码, 来自&lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;GitHub&lt;/a&gt;, 也可以使用&lt;code&gt;&amp;lt;Win + .&amp;gt;&lt;/code&gt;快捷键来输入.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="我的小工具" scheme="https://gipbear.github.io/categories/%E6%88%91%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="markdown" scheme="https://gipbear.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>seleniumn的简单使用</title>
    <link href="https://gipbear.github.io/2022/02/04/seleniumn%E4%BD%BF%E7%94%A8/"/>
    <id>https://gipbear.github.io/2022/02/04/seleniumn%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-04T09:18:58.000Z</published>
    <updated>2022-02-05T13:03:00.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于爬虫工具selenium的介绍, 包括安装和常见的使用方法, 稍作整理以备之后使用.</p></blockquote><span id="more"></span><h2 id="selenium-安装">1. selenium 安装</h2><p>selenium是一款常用的爬虫工具, 与常见的爬虫库相比, 它是直接模拟并调用浏览器直接运行, 从而可以避免很多的反爬机制, 某些程度上类似于按键精灵. 但功能更强大, 自定义性更强.</p><p>首先我们需要在python环境中安装selenium库.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">conda install selenium</span><br></pre></td></tr></tbody></table></figure><p>除了基本python依赖库, 我们还需要安装<strong>浏览器驱动</strong>, 由于我使用chrome较多, 这里选择的是<code>chomedriver</code>, 其他浏览器需要寻找对应驱动.</p><ol type="1"><li>首先打开chrome浏览器, 在地址栏输入<code>Chrome://version</code>, 查看浏览器对应版本号, 例如目前我的是:<code>98.0.4758.82 (正式版本) （64 位）</code>.</li><li>然后在<a href="https://chromedriver.storage.googleapis.com/index.html">chromedriver网址</a>中寻找到对应版本<strong>下载并解压</strong>即可.(这是<a href="https://sites.google.com/chromium.org/driver/">官网</a>, 有墙)</li><li>最后将<code>chromedriver.exe</code>放在python环境的<code>Scripts</code>文件夹中, 或项目文件夹中, 或者<del>放在喜欢的文件夹下</del>(不是).</li></ol><p>ok, 然后就开始我们的学习之路吧!</p><h2 id="基本用法">2. 基本用法</h2><ol type="1"><li><p><strong>导入库</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>初始化浏览器</strong> 若已经放入<code>Scripts</code>文件夹中, 则直接调用.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化选择chrome浏览器</span></span><br><span class="line">browser = webdriver.Chrome()</span><br></pre></td></tr></tbody></table></figure><p></p><p>否则需要手动选择浏览器的路径, 相对路径或绝对路径都可以.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化选择chrome浏览器</span></span><br><span class="line">browser = webdriver.Chrome(path)</span><br></pre></td></tr></tbody></table></figure><p></p><p>这时运行会发现有一个chrome浏览器自动弹出, 若我们想要程序安静运行的时候, 就可以设置<strong>无界面</strong>, 也叫<code>无头浏览器</code>.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">"headless"</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>访问网址</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问百度</span></span><br><span class="line">browser.get(<span class="string">r'https://www.baidu.com/'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>关闭浏览器</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="浏览器设置">3. 浏览器设置</h2><ol type="1"><li><p><strong>浏览器大小</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全屏</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分辨率 600*800</span></span><br><span class="line">browser.set_window_size(<span class="number">600</span>,<span class="number">800</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>浏览器刷新</strong> 同刷新键, 最好写个异常检测</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 刷新页面</span></span><br><span class="line">    browser.refresh()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'刷新页面'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'刷新失败'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>前进/后退</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后退</span></span><br><span class="line">browser.back()</span><br><span class="line"><span class="comment"># 前进</span></span><br><span class="line">browser.forward()</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="网页基本信息">4. 网页基本信息</h2><p>当前网页的标题等信息.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网页标题</span></span><br><span class="line"><span class="built_in">print</span>(browser.title)</span><br><span class="line"><span class="comment"># 当前网址</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)</span><br><span class="line"><span class="comment"># 浏览器名称</span></span><br><span class="line"><span class="built_in">print</span>(browser.name)    </span><br></pre></td></tr></tbody></table></figure><p>也可以直接获取网页源码, 这就可以直接使用<code>正则表达式</code>、<code>Bs4</code>和<code>xpath</code>等工具进行解析了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br></pre></td></tr></tbody></table></figure><h2 id="定位页面元素">5. 定位页面元素</h2><p>定位页面元素, 即直接寻找浏览器的中渲染后的元素, 而不是源代码, 以如下搜索框标签为例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 百度页面的搜索框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"kw"</span> <span class="attr">name</span>=<span class="string">"wd"</span> <span class="attr">class</span>=<span class="string">"s_ipt"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">maxlength</span>=<span class="string">"255"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol type="1"><li><p><strong>按照id/name/class定位</strong></p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在百度搜索框中输入python</span></span><br><span class="line">browser.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'python'</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">'wd'</span>).send_keys(<span class="string">'python'</span>)</span><br><span class="line">browser.find_element_by_class_name(<span class="string">'s_ipt'</span>).send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>按照tag定位</strong> 但是实际上一个页面可能会存在很多个相同的tag, 这时候会使得tag<strong>指向模糊</strong>, 从而引发报错.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在百度搜索框中输入python</span></span><br><span class="line">browser.find_element_by_tag_name(<span class="string">'input'</span>).send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>link定位</strong> 定位连接名称, 例如在百度左上角链接的例子中进行定位.</p><p></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s-top-left"</span> <span class="attr">class</span>=<span class="string">"s-top-left-new s-isindex-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"mnav c-font-normal c-color-t"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.hao123.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"mnav c-font-normal c-color-t"</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://map.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"mnav c-font-normal c-color-t"</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>直接根据链接的名称来定位.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击新闻链接</span></span><br><span class="line">browser.find_element_by_link_text(<span class="string">'新闻'</span>).click()</span><br></pre></td></tr></tbody></table></figure><p></p><p>但有时候链接名称很长, 可以使用<strong>模糊</strong>定位<code>partial</code>, 当然, 链接指向得唯一.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击含有闻的链接</span></span><br><span class="line">browser.find_element_by_partial_link_text(<span class="string">'闻'</span>).click()</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>xpath定位</strong> 以上的方法必须保证<strong>元素唯一</strong>, 当元素不唯一的时候, 就需要使用xpath来进行唯一定位了, 例如使用xpath来寻找搜索框的位置.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在百度搜索框中输入python</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">"//*[@id='kw']"</span>).send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>css定位</strong> 该方法比xpath简洁且更快一些</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在百度搜索框中输入python</span></span><br><span class="line">browser.find_element_by_css_selector(<span class="string">'#kw'</span>).send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>定位多个元素</strong> 当然, 有时候我们就是需要多个元素, 那么就只需要使用<code>复数s</code>即可.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># element s</span></span><br><span class="line">browser.find_elements_by_class_name(name)</span><br><span class="line">browser.find_elements_by_id(id_)</span><br><span class="line">browser.find_elements_by_name(name)</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="获取元素信息">6. 获取元素信息</h2><p>通常在上一步定位元素之后, 会对元素进行一些操作.</p><ol type="1"><li><p><strong>获取元素属性</strong> 例如想要获取百度logo的信息, 先定位图片元素, 再获取信息</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用上述方法获取百度logo元素</span></span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'index-logo-src'</span>)</span><br><span class="line"><span class="comment"># 然后使用get_attribute来获取想要的属性信息</span></span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'index-logo-src'</span>)</span><br><span class="line">logo_url = logo.get_attribute(<span class="string">'src'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>获取元素文本</strong> 首先直接使用class寻找热榜元素, 但是有多个元素, 所以使用复数<code>elements</code>来获得, 并使用<code>for循环</code>打印. 获取文本时使用<code>text</code>来获取</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取热榜</span></span><br><span class="line">hots = browser.find_elements_by_class_name(<span class="string">'title-content-title'</span>)</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> hots:</span><br><span class="line">    <span class="built_in">print</span>(h.text)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>获取其他属性</strong> 获取例如id或tag</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logo = browser.find_element_by_class_name(<span class="string">'index-logo-src'</span>)</span><br><span class="line"><span class="built_in">print</span>(logo.<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(logo.location)</span><br><span class="line"><span class="built_in">print</span>(logo.tag_name)</span><br><span class="line"><span class="built_in">print</span>(logo.size)</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="页面交互">7. 页面交互</h2><p>除了直接获取页面的元素, 有时候还需要对页面进行一些操作.</p><ol type="1"><li><p><strong>输入/清除文本</strong> 例如在百度搜索框输入"冬奥会", 然后清除</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获取搜索框元素, 然后使用send_keys输入内容</span></span><br><span class="line">search_bar = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">search_bar.send_keys(<span class="string">'冬奥会'</span>)</span><br><span class="line"><span class="comment"># 稍微等两秒, 不然就看不见了</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">search_bar.clear()</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>提交(回车)</strong> 上述内容输入后, 需要点击回车来提交, 才能得到想要的搜索信息.</p><blockquote><p>这篇博文<code>2022年2月5日</code>编写时百度已经发现selenium啦, 所以需要增加一些伪装手段, 在本文最后.<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="#反爬">直达反爬</a>.</p></blockquote><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_bar.send_keys(<span class="string">'冬奥会'</span>)</span><br><span class="line">search_bar.submit()</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>点击</strong> 当我们需要进行点击操作的时候, 使用click. 例如之前的提交, 也可以找到<code>百度一下</code>这个按钮, 然后click!</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击热榜第一条</span></span><br><span class="line">hots = browser.find_elements_by_class_name(<span class="string">'title-content-title'</span>)</span><br><span class="line">hots[<span class="number">0</span>].click()</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>单选</strong>和<strong>多选</strong>同理, 定位到对应元素, 然后click即可.</p><p>而偶尔也会使用<strong>右击</strong>, 那就需要新的依赖库.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">hots = browser.find_elements_by_class_name(<span class="string">'title-content-title'</span>)</span><br><span class="line"><span class="comment"># 鼠标右击</span></span><br><span class="line">ActionChains(browser).context_click(hots[<span class="number">0</span>]).perform()</span><br><span class="line"><span class="comment"># 双击</span></span><br><span class="line"><span class="comment"># ActionChains(browser).double_click(hots[0]).perform()</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>双击是<code>double_click</code>, 找不到合适的例子就不提了. 这里是<code>ActionChains</code>可以深入挖掘, 是定义一系列的操作一起<code>perform</code>, 当然, 普通的一些操作其实也够了.</p></li><li><p><strong>悬停</strong> 我就放放不进去.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionChains(browser).move_to_element(move).perform()</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>下拉框选择</strong> 需要导入一个相关的库, 以访问MySQL官网, 选择下载对应操作系统为例.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问mysql下载官网</span></span><br><span class="line">browser.get(<span class="string">r'https://dev.mysql.com/downloads/mysql/'</span>)</span><br><span class="line">select_os = browser.find_element_by_id(<span class="string">'os-ga'</span>)</span><br><span class="line"><span class="comment"># 使用索引选择第三个</span></span><br><span class="line">Select(select_os).select_by_index(<span class="number">3</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 使用value选择value="3"的</span></span><br><span class="line">Select(select_os).select_by_value(<span class="string">"3"</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 使用文本值选择macOS</span></span><br><span class="line">Select(select_os).select_by_visible_text(<span class="string">"macOS"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>拖拽</strong> 多用于验证码之类的, 参考菜鸟小例子</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)  </span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始位置</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">"#draggable"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束位置</span></span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">"#droppable"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行元素的拖放操作</span></span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br><span class="line"><span class="comment"># 拖拽</span></span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="键盘操作">8. 键盘操作</h2><p>键盘的大部分操作都有相应的命令使用, 需要导入<code>Keys</code>类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见键盘操作</span></span><br><span class="line">send_keys(Keys.BACK_SPACE)  <span class="comment"># 删除键</span></span><br><span class="line">send_keys(Keys.SPACE)  <span class="comment"># 空格键</span></span><br><span class="line">send_keys(Keys.TAB)  <span class="comment"># 制表键</span></span><br><span class="line">send_keys(Keys.ESCAPE)  <span class="comment"># 回退键</span></span><br><span class="line">send_keys(Keys.ENTER)  <span class="comment"># 回车键</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">'a'</span>)  <span class="comment"># 全选(Ctrl+A)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">'c'</span>)  <span class="comment"># 复制(Ctrl+C)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">'x'</span>)  <span class="comment"># 剪切(Ctrl+X)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">'v'</span>)  <span class="comment"># 粘贴(Ctrl+V)</span></span><br><span class="line">send_keys(Keys.F1)  <span class="comment"># 键盘F1</span></span><br><span class="line">send_keys(Keys.F12)  <span class="comment"># 键盘F12</span></span><br></pre></td></tr></tbody></table></figure><h2 id="其他">9. 其他</h2><ol type="1"><li><p><strong>延时等待</strong> 可以发现, 在上面的程序中, 有些效果需要延时等待才能够出现, 在实际中也是需要一定的延时, 一方面是为了<strong>不过于频繁访问</strong>而被认为是爬虫, 另一方面也是由于<strong>网络资源加载</strong>需要一定时间来等待.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单的就可以直接使用</span></span><br><span class="line">time.sleep(<span class="number">2</span>)  <span class="comment"># 睡眠2秒</span></span><br><span class="line"><span class="comment"># 还有一些 隐式等待 implicitly_wait 和显示等待 WebDriverWait等操作, 另寻</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>截图</strong> 可以保存为base64/png/file三种</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.get_screenshot_as_file(<span class="string">'截图.png'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>窗口切换</strong> 我们的程序是针对当前窗口进行工作的, 但有时候程序需要切换窗口, 那么就需要切换当前工作窗口.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问网址:百度</span></span><br><span class="line">browser.get(<span class="string">r'https://www.baidu.com/'</span>)</span><br><span class="line">hots = browser.find_elements_by_class_name(<span class="string">'title-content-title'</span>)</span><br><span class="line">hots[<span class="number">0</span>].click()  <span class="comment"># 点击第一个热榜</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 回到第 i 个窗口(按顺序)</span></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">hots[<span class="number">1</span>].click()  <span class="comment"># 点击第一个热榜</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>当然, 若页面内有iframe元素的话, 则需要切换到该iframe元素中, 可以根据其id切换, 类似的如下</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到子框架</span></span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>下拉进度条</strong> 有些网页的内容是随着进度条的下滑而出现的, 所以需要下拉进度条这个操作. 这个操作是使用js代码实现的, 所以我们需要让浏览器<strong>执行js代码</strong>即可, 其他js代码类似.</p><p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="反爬">10. 反爬</h2><p>例如上面的百度被发现了, 就需要更好的伪装我们的浏览器browser.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">browser.execute_cdp_cmd(</span><br><span class="line">    <span class="string">"Page.addScriptToEvaluateOnNewDocument"</span>,</span><br><span class="line">    {<span class="string">"source"</span>: <span class="string">"""Object.defineProperty(</span></span><br><span class="line"><span class="string">        navigator,</span></span><br><span class="line"><span class="string">        'webdriver',</span></span><br><span class="line"><span class="string">        {get: () =&gt; undefined})"""</span></span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>网站检测selenium的原理是:</p><ol type="1"><li>selenium 在开启后的浏览器加了一些变量值, 如：window.navigator.webdriver 等等.</li><li>像window.navigator.webdriver, 在正常的谷歌浏览器是undefined, 在selenium打开的谷歌浏览器是true. 网站就下发js代码, 检测这个变量值给网站, 网站判断这个值, 为true就是爬虫程序就封杀或需要验证码.</li></ol><p>当然还有其他的一些手段, 以后遇到再补充.</p><h2 id="参考">参考</h2><ol type="1"><li><a href="https://mp.weixin.qq.com/s/3AaLPivHNTuWEH-4hhJlig">2万字带你了解Selenium全攻略！</a></li><li><a href="https://blog.csdn.net/u013595395/article/details/108714775">selenium webdriver 开启网页失败，被发现为爬虫，的解决办法</a></li></ol><h2 id="个人收获">个人收获</h2><p>这次回顾了selenium的使用方法, 仔细深究的话操作是很细的, 模仿真正的浏览器运行是没有问题的, 包括登录访问什么的都很简单, 还可以作为浏览器上的按键精灵来使用<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p><p>相比于直接获取资源的爬虫来说肯定是较慢的, 但胜于功能强大, 还是可以提高<del>摸鱼</del>工作效率的:+1:.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于爬虫工具selenium的介绍, 包括安装和常见的使用方法, 稍作整理以备之后使用.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="我的小工具" scheme="https://gipbear.github.io/categories/%E6%88%91%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="python" scheme="https://gipbear.github.io/tags/python/"/>
    
    <category term="爬虫" scheme="https://gipbear.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://gipbear.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>cpp数据结构之string的常见用法</title>
    <link href="https://gipbear.github.io/2022/02/02/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
    <id>https://gipbear.github.io/2022/02/02/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</id>
    <published>2022-02-02T09:05:08.000Z</published>
    <updated>2022-02-17T12:16:31.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于c++中常用的数组<code>string</code>的一些常见用法的总结, 主要是一些常用的调用方法, 主要是我的平时的<a href="https://gipbear.github.io/tags/leetcode题解/">leetcode题解</a>中经常会使用的.</p></blockquote><span id="more"></span><h2 id="字符串-string">字符串 string</h2><p>字符串可以说是基本的数据类型, 也可以说是数据结构, 其本质是<code>多个字符顺序组成</code>的数据结构.</p><h2 id="常见用法">常见用法</h2><p>首先导入标准库</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化">初始化</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line">string s = <span class="string">"hello world!"</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; s; <span class="comment">// 写入s</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="查询属性">查询属性</h3><ol type="1"><li><p>字符串长度</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>判断字符串是否为空</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h3 id="增删改查">增删改查</h3><ol type="1"><li><p>增加元素</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 末尾添加</span></span><br><span class="line">s1 += <span class="string">"hhh"</span> <span class="comment">// 添加字符串</span></span><br><span class="line">s1 += <span class="string">'g'</span> <span class="comment">// 添加字符</span></span><br><span class="line">s.<span class="built_in">push_back</span>(<span class="string">'a'</span>) <span class="comment">// 该方法只能添加字符</span></span><br><span class="line">s.<span class="built_in">append</span>(); <span class="comment">// 方法很丰富, 可以自行查询</span></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">6</span>, <span class="string">"hhh"</span>);  <span class="comment">// 只支持插入字符串</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>删除元素</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">erase</span>(<span class="number">6</span>); <span class="comment">// 索引6之后字符串都删除</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">4</span>,<span class="number">6</span>); <span class="comment">// 索引4之后删除6个字符</span></span><br><span class="line">s.<span class="built_in">clear</span>(); <span class="comment">// 清空</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>修改元素</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">replace</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"python"</span>); <span class="comment">// 索引1开始的2个字符串替换成python</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>查找元素</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>]; <span class="comment">// 直接去除第0个元素</span></span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h3 id="其他">其他</h3><ol type="1"><li><p>字符子串</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">substr</span>(<span class="number">4</span>,<span class="number">5</span>); <span class="comment">// 从索引4开始的5个字符</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>正则匹配 使用正则表达式进行一些处理, 相比于直接模拟较慢, 但是很方便. 有些大部分的内容和之前在<a href="https://gipbear.github.io/2021/02/19/快乐Linux学习（六）/">linux中的正则</a>很相似.</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"></span><br><span class="line">string s = <span class="string">"文本"</span>;</span><br><span class="line"><span class="function">regex <span class="title">s_reg</span><span class="params">(<span class="string">"正则表达式"</span>)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> res = <span class="built_in">regex_match</span>(s, s_reg);</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>字母大小写转换</p><p>最近学到一个小知识, 利用<strong>位运算</strong>来将大小写字母进行转化.</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">ch ^= <span class="number">32</span>;   <span class="comment">// 大小写相互转换;</span></span><br><span class="line">ch &amp;= <span class="number">-32</span>;  <span class="comment">// 转大写</span></span><br><span class="line">ch |= <span class="number">32</span>;   <span class="comment">// 转小写</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>字符按空格分割</p><p>需要使用<code>sstream</code>库进行操作.</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="function">istringstream <span class="title">str1</span><span class="params">(s1)</span></span>;  <span class="comment">// 将s1转化为str1</span></span><br><span class="line">string out;</span><br><span class="line"><span class="keyword">while</span>(str1 &gt;&gt; out){</span><br><span class="line">    <span class="comment">// 此处的out就是一个一个单词</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h2 id="个人收获">个人收获</h2><p>字符串本质上和数组很相似, 有些处理的技巧也很相似, 多刷题, 多熟悉, 多总结!</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于c++中常用的数组&lt;code&gt;string&lt;/code&gt;的一些常见用法的总结, 主要是一些常用的调用方法, 主要是我的平时的&lt;a href=&quot;https://gipbear.github.io/tags/leetcode题解/&quot;&gt;leetcode题解&lt;/a&gt;中经常会使用的.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言特性" scheme="https://gipbear.github.io/categories/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="c++" scheme="https://gipbear.github.io/tags/c/"/>
    
    <category term="string" scheme="https://gipbear.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>机器学习西瓜书——第06章支持向量机</title>
    <link href="https://gipbear.github.io/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    <id>https://gipbear.github.io/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</id>
    <published>2022-01-26T07:52:34.000Z</published>
    <updated>2022-01-27T15:12:44.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于周志华老师编写的机器学习书籍『西瓜书』的第六章支持向量机.</p><p>主要的内容有: 支持向量机的模型理解、支持向量、硬间隔与软间隔、在不等式约束下使用拉格朗日乘子法转化为对偶问题、KKT条件、支持向量回归等.</p></blockquote><span id="more"></span><h2 id="间隔与支持向量">6.1 间隔与支持向量</h2><p>面对二分类问题, 最基本的想法是基于训练集, 在样本空间中找到一个合适的<strong>划分超平面</strong>, 从而将样本划分为两类. 但是划分超平面有很多, 选择最合适的超平面就是我们接下来要解决的问题了.</p><p>所谓『最合适』就是指: 不仅在训练集中表现良好, 更要在新的测试集中表现良好, 即泛化性能最好. 那么最直观的就行找到「正中间」的那个超平面.</p><p>首先使用线性方程来描述一下超平面:</p><p><span class="math display">\[\boldsymbol{w}^T\boldsymbol{x} + b = 0  \tag{1}\]</span></p><p>其中<span class="math inline">\(\boldsymbol{w}\)</span>为<strong>法向量</strong>, 决定平面的方向, <span class="math inline">\(d\)</span>是<strong>位移项</strong>, 决定偏移原点的距离.</p><p>若样本点在超平面上侧, 即<span class="math inline">\(\boldsymbol{w}^T\boldsymbol{x} + b &gt; 0\)</span>, 那么<span class="math inline">\(x_i\)</span>为正样本, 记为<span class="math inline">\(y_i=1\)</span>, 反之为负样本, 记为<span class="math inline">\(y_i=-1\)</span>.</p><p>若超平面能够正确分类, 那么使用一个<code>sign函数</code>将会得到模型:</p><p><span class="math display">\[y = sign(\boldsymbol{w}^T\boldsymbol{x}_i + b) =\begin{cases}  +1, \quad \boldsymbol{w}^T\boldsymbol{x}_i + b \geq +1; \\  -1, \quad \boldsymbol{w}^T\boldsymbol{x}_i + b \leq -1; \tag{2}\end{cases}\]</span></p><blockquote><p>后面的<span class="math inline">\(\pm1\)</span>是<span class="math inline">\((\boldsymbol{w}, b)\)</span>变换过的, 因为任意<span class="math inline">\(\boldsymbol{w}^T\boldsymbol{x}_i + b \geq c\)</span>可以变化为<span class="math inline">\(\frac{1}{c}\boldsymbol{w}^T\boldsymbol{x}_i + \frac{b}{c} \geq 1\)</span>. 此处的变换仅仅是「常规操作」, 也可以取其他值, 主要目的是使得后续的最优化问题有约束可解. 其中<span class="math inline">\(c\)</span>即为下面所说的「最近距离」.</p></blockquote><p>注意到公式<span class="math inline">\((2)\)</span>中的<strong>等号</strong>, 当且仅当某些样本点距离超平面<strong>最近</strong>时取得, 称为『<strong>支持向量</strong>』(support vector)!. 那么, 两侧异类样本点距离超平面的最近距离相同时, 是不是就是最合适的划分呀!</p><p>接下来计算样本<span class="math inline">\(\boldsymbol{x}\)</span>距离超平面的距离计算为:</p><p><span class="math display">\[\gamma = \frac{y_i(\boldsymbol{w}^T\boldsymbol{x} + b)}{\|\boldsymbol{w}\|} \tag{3}\]</span></p><p>那么左右两侧最近的「异类点」到达超平面的距离之和为:</p><p><span class="math display">\[\gamma = \frac{2}{\|\boldsymbol{w}\|} \tag{4}\]</span></p><p>这距离之和就称为『<strong>间隔</strong>』(margin) !</p><img src="/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E4%B8%8E%E9%97%B4%E9%9A%94.png" class="" title="支持向量与间隔.png"><p>那么我们的问题就是去寻找最大的间隔<span class="math inline">\(\frac{2}{\|\boldsymbol{w}\|}\)</span>, 使得泛化误差最小, 也等价于寻找最小的<span class="math inline">\(\|\boldsymbol{w}\|^2\)</span>, 问题就转化为:</p><p><span class="math display">\[\begin{aligned}  \min_{(\boldsymbol{w}, b)} &amp;\quad{\frac{1}{2}\|\boldsymbol{w}\|^2} \\  s.t &amp;\quad 1-y_i(\boldsymbol{w}^T\boldsymbol{x} + b) \leq 0, \quad i = 1,2,\dots, m. \tag{5}\end{aligned}\]</span></p><blockquote><p>凸优化的问题一般将优化函数转化为最小值, 约束条件转化为小于等于的形式.</p></blockquote><h2 id="对偶问题">6.2 对偶问题</h2><p>以上的问题我们可以使用拉格朗日乘子法得到『对偶问题』的拉格朗日函数:</p><p><span class="math display">\[L(\boldsymbol{w}, b, \boldsymbol{\alpha}) = \frac{1}{2}\|\boldsymbol{w}\|^2 + \sum^m_{i=1}\alpha_i{(1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b))} \tag{6}\]</span></p><p>并对上式对<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>求偏导为<span class="math inline">\(0\)</span>可得:</p><p><span class="math display">\[\begin{aligned}\boldsymbol{w} &amp;= \sum^m_{i=1}{\alpha_i y_i\boldsymbol{x}_i} \\0 &amp;= \sum^m_{i=1}{\alpha_i y_i}\end{aligned} \tag{7}\]</span></p><p>将求得的结果带入拉格朗日函数中, 就可以得到对偶问题:</p><p><span class="math display">\[\begin{aligned}\max_{\boldsymbol{\alpha}} &amp;\quad {\sum^m_{i=1}{\alpha_i}-\frac{1}{2}\sum^m_{i=1}{\sum^m_{j=1}{\alpha_i \alpha_j y_i y_j\boldsymbol{x}_i^T\boldsymbol{x}_j}}} \\s.t. &amp;\quad\sum^m_{i=1}{\alpha_i y_i} = 0\end{aligned} \tag{8}\]</span></p><p>那么模型就转化为求解<span class="math inline">\(\boldsymbol{\alpha}\)</span>, 而<span class="math inline">\(\boldsymbol{\alpha}\)</span>是拉格朗日乘子, 与不等式约束条件个数有关, 即与<strong>样本个数成正比</strong>. 而我们原本的模型是求出<span class="math inline">\(\boldsymbol{w}\)</span>, 其实也是可以直接优化的, 但是<span class="math inline">\(\boldsymbol{w}\)</span>表示模型的特征, 所以<strong>原模型与样本的特征数成正比</strong>.</p><p>所以当我们遇到样本数较少, 而特征数较多的情况下可以选择使用对偶问题进行求解. 所以支持向量机在<strong>小样本</strong>中使用效果相对较好.</p><h3 id="kkt条件">KKT条件</h3><p>在上述的过程中, 我们使用了<strong>拉格朗日乘子法</strong>, 但是在<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#拉格朗日乘子法">这里</a>我介绍过, 拉格朗日乘子法是针对<strong>等式约束</strong>的, 如果是<strong>不等式约束</strong>, 则需要满足<code>KKT条件</code>, 这里是:</p><p><span class="math display">\[\begin{cases}  \alpha_i \geq 0; \\  1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b) \leq 0; \\  \alpha_i(1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b)) = 0.\end{cases}\]</span></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>在这里可以发现<strong>很重要的结论</strong>:</p><ol type="1"><li>由第三个条件可以推出, 要么<span class="math inline">\(\alpha_i = 0\)</span>, 要么<span class="math inline">\(y_if(\boldsymbol{x}_i) = 1\)</span>!</li><li>若<span class="math inline">\(\alpha_i = 0\)</span>, 那么该样本点不对模型产生影响;</li><li>若<span class="math inline">\(y_if(\boldsymbol{x}_i) = 1\)</span>, 也就是等式约束, 那么该样本点在<strong>最大间隔边界上</strong>!, 此处的样本就是支持向量!</li></ol><p>也就是说, 我们的模型仅仅与<strong>支持向量</strong>有关, 这也是为什么叫做支持向量机的原因.</p><h3 id="smo算法">SMO算法</h3><ul class="task-list"><li><input type="checkbox" disabled="">todo 至于求解的SMO算法以及核函数/核方法之类的后续再补.</li></ul><h2 id="核函数">6.3 核函数</h2><ul class="task-list"><li><input type="checkbox" disabled="">todo</li></ul><h2 id="软间隔">6.4 软间隔</h2><p>在上述的内容中, 我们要求样本严格可分, 来得到一个『间隔』使得样本分开, 这个间隔称为"<strong>硬间隔</strong>"(hard margin). 但是在实际的情况中, 有很多样本并不是严格线性可分, 可能存在部分(<strong>少量</strong>)的『出错点』.</p><img src="/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/%E8%BD%AF%E9%97%B4%E9%9A%94.png" class="" title="软间隔.png"><p>所以我们需要寻找一个允许存在误差的间隔, 称之为"<strong>软间隔</strong>"(soft margin). 当然, 存在的误差要尽可能的少, 所以我们在优化目标上增加『损失函数』, 使得不满足约束的, 赋予一定损失, 满足约束的没有损失:</p><p><span class="math display">\[\min_{(\boldsymbol{w}, b)} {\frac{1}{2}\|\boldsymbol{w}\|^2} + C\sum^m_{i=1}\ell_{0/1}(y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b)-1) \tag{9}\]</span></p><p>其中<span class="math inline">\(C\)</span>是一个常数, 若定义<span class="math inline">\(C\)</span>很大, 则对损失要求严格, 反之则越宽松. <span class="math inline">\(\ell_{0/1}\)</span>则代表『0/1损失函数』, 但是非凸, 非连续, 数学性质不好, 所以常使用『hinge(合页)损失』.</p><p>那么损失函数变成</p><p><span class="math display">\[\min_{(\boldsymbol{w}, b)} {\frac{1}{2}\|\boldsymbol{w}\|^2} + C\sum^m_{i=1}{\max{(0, 1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b))}} \tag{10}\]</span></p><p>还有常见的指数损失和对率损失等.</p><img src="/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/%E5%B8%B8%E8%A7%81%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" class="" title="常见损失函数.png"><p>引入<strong>松弛变量</strong>(slack variable)<span class="math inline">\(\xi_i\)</span>, 那么可以重写为</p><p><span class="math display">\[\begin{aligned}  \min_{(\boldsymbol{w}, b)} &amp;\quad{\frac{1}{2}\|\boldsymbol{w}\|^2} + C\sum^m_{i=1}{\xi_i} \\  s.t. &amp;\quad 1-y_i(\boldsymbol{w}^T\boldsymbol{x} + b) \leq \xi_i \\  &amp;\quad \xi_i \geq 0, i = 1,2,\dots, m. \tag{11}\end{aligned}\]</span></p><p>这就是常见的<strong>软间隔支持向量机</strong>.</p><p>故意化简为上述形式, 那么就可以和普通支持向量机一样使用拉格朗日函数化为对偶问题再进行求解.</p><h2 id="支持向量回归">6.5 支持向量回归</h2><p>之前提到过的<a href="https://gipbear.github.io/2022/01/14/机器学习西瓜书——第03章线性模型/#线性回归">线性回归模型</a>, 是学习得到一条线<span class="math inline">\(f(x)\)</span>, 而将支持向量运用于回归的问题上, 是学习得到一条「间隔带」<span class="math inline">\(f(x)\pm\epsilon\)</span>.</p><img src="/2022/01/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC06%E7%AB%A0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E5%9B%9E%E5%BD%92.png" class="" title="支持向量回归"><p>为了类似支持向量的分类模型, 写出如下形式:</p><p><span class="math display">\[\min_{(\boldsymbol{w}, b)} {\frac{1}{2}\|\boldsymbol{w}\|^2} + C\sum^m_{i=1}\ell_{\epsilon}(f(\boldsymbol{x}_i)-y_i) \tag{12}\]</span></p><p>其中<span class="math inline">\(C\)</span>为正则化尝试, <span class="math inline">\(\ell_{\epsilon}\)</span>是<span class="math inline">\(\epsilon\)</span>-不敏感损失函数</p><p><span class="math display">\[\ell_{\epsilon}(z) =\begin{cases}  0, &amp;if |z| \leq \epsilon; \\  |z| - \epsilon, &amp; otherwise.\end{cases}\]</span></p><p>模仿软间隔支持向量机的形式, 再引入松弛变量<span class="math inline">\(\xi_i\)</span>和<span class="math inline">\(\hat{\xi}_i\)</span>, 两个松弛变量的原因是正负两侧的松弛程度可以不一样, 从而重写为:</p><p><span class="math display">\[\begin{aligned}  \min_{(\boldsymbol{w}, b, \xi_i, \hat{\xi}_i)} &amp;\quad{\frac{1}{2}\|\boldsymbol{w}\|^2} + C\sum^m_{i=1}{(\xi_i + \hat{\xi}_i)} \\  s.t. &amp;\quad f(\boldsymbol{x}_i) - y_i \leq \xi_i + \epsilon \\  &amp;\quad y_i - f(\boldsymbol{x}_i) \leq \hat{\xi}_i + \epsilon \\  &amp;\quad \xi_i \geq 0, \hat{\xi_i} \geq 0, i = 1,2,\dots, m. \tag{11}\end{aligned}\]</span></p><p>又是类似的优化形式, 同样使用拉格朗日函数转化后求解.</p><h2 id="核方法">6.6 核方法</h2><ul class="task-list"><li><input type="checkbox" disabled="">todo</li></ul><h2 id="个人收获">个人收获</h2><p>首先这一章对我来说是比较困难的, 主要是有些地方懵懵懂懂, 需要花一定的时间来消化.</p><ol type="1"><li>这次对拉格朗日函数有了更进一步的理解!, 终于明白为什么之前说拉格朗日乘子法只能用于等式约束, 而这里可以用于不等式约束, 原来是KKT条件的作用.</li><li>之前两次都是看到KKT条件然后放弃, 因为不理解这几个条件是干什么的, 这次终于明白了, 是增加约束, 使得不等式项消失, 而保留等式, 从而满足拉格朗日乘子法的使用条件, 也是因此获得支持向量.</li><li>软间隔这次也明白了, 是为了容错, 从而增加了松弛变量, 变化为相同形式求解.</li><li>关于支持向量回归这里, 我倒是感觉意义不大(不是), 所以没有太深入理解.</li><li>在拉格朗日乘子法这里还有一个对偶函数, 听的有些懵懵的, 后续再进一步整理这个理论.</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于周志华老师编写的机器学习书籍『西瓜书』的第六章支持向量机.&lt;/p&gt;
&lt;p&gt;主要的内容有: 支持向量机的模型理解、支持向量、硬间隔与软间隔、在不等式约束下使用拉格朗日乘子法转化为对偶问题、KKT条件、支持向量回归等.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
    <category term="支持向量机" scheme="https://gipbear.github.io/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>机器学习西瓜书——第05章神经网络</title>
    <link href="https://gipbear.github.io/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://gipbear.github.io/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2022-01-22T16:01:54.000Z</published>
    <updated>2022-01-27T15:12:16.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于周志华老师编写的机器学习书籍『西瓜书』的第五章神经网络.</p><p>主要的内容有: M-P神经元模型的构成、简单感知机和多层网络、以及著名BP算法的推导过程(激活函数是Sigmoid).</p></blockquote><span id="more"></span><p>这里所说的神经网络是指: 由具有<strong>适应性</strong>的<code>简单单元</code>组成的广泛<strong>并行互联</strong>的网络, 能够<strong>模拟</strong>生物神经对现实世界做出的交互反映.</p><h2 id="神经元模型">5.1 神经元模型</h2><p>在神经网络中, 最基本的组成成分就是神经元(neuron)模型, 即上述的<code>简单单元</code>.</p><h3 id="工作过程">工作过程</h3><p>首先介绍以下最简单的神经元的工作过程:</p><ol type="1"><li>首先神经元通过接收来自n个其他神经元传输来的<code>输入</code>信号<span class="math inline">\(x_i\)</span>;</li><li>并通过带<code>权重</code><span class="math inline">\(w_i\)</span>的连接(connection)进行传递;</li><li>然后, 神经元收到的总输入值将与神经元的<code>阈值</code><span class="math inline">\(\theta\)</span>(threshold))进行比较;</li><li>再通过<code>激活函数</code><span class="math inline">\(f\)</span>(activation function)处理以产生神经元的<code>输出</code><span class="math inline">\(y\)</span>.</li></ol><img src="/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/mp%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B.png" class="" title="mp神经元模型.png"><p>这就是非常经典的<strong>M-P神经元模型</strong>, 模拟生物的神经元的连接与激活过程.</p><h3 id="激活函数">激活函数</h3><p>其中最理想的激活函数是<strong>阶跃函数</strong>, 直接表示神经元是否激活, 但是阶跃函数并不光滑连续, 数学性质并不好. 所以实际上常用的是<code>sigmoid</code>函数<span class="math inline">\(f(z) = \frac{1}{1+e^{-z}}\)</span>, 这在<a href="https://gipbear.github.io/2022/01/14/机器学习西瓜书——第03章线性模型/#对数几率回归">对数几率模型</a>中也使用过.</p><img src="/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E9%98%B6%E8%B7%83%E5%87%BD%E6%95%B0%E5%92%8Csigmoid%E5%87%BD%E6%95%B0.png" class="" title="阶跃函数和sigmoid函数.png"><blockquote><p>激活函数是对<code>总输入与阈值的比较</code>进行处理! (我之前错误的以为是激活函数对输入进行处理后再与阈值比较);</p><p>激活函数本质上是在加入非线性因素, 使得神经网络来解决非线性问题.</p></blockquote><h2 id="感知机与多层网络">5.2 感知机与多层网络</h2><h3 id="感知机">感知机</h3><p>感知机(Perceptron)由两层神经元组成, 其中<code>输入层</code>接收外界传输的输入信号, 并传递给输出层, <code>输出层</code>即为上述所说的<code>M-P神经元</code>, 亦称<code>阈值逻辑单元</code>(threshold logic unit). 所以实际上<strong>具有处理能力的功能神经元只有一层输出层</strong>, 学习能力有限.</p><p>在感知机中, 输入的数据集和输出的激活函数都是给定的, 感知机需要学习的就是未知的<strong>权重</strong><span class="math inline">\(w_i\)</span>和<strong>阈值</strong><span class="math inline">\(\theta\)</span>来使其有效的工作.</p><p>但是从输出<span class="math inline">\(y = f(\sum_{i=1}^n{w_ix_i-\theta})\)</span>中来看, 阈值可以被看作<code>第n+1项</code>输入, 值为<code>-1</code>, 这样就可以将阈值和权重统一为<strong>权重学习</strong>即可!</p><p>学习规则:</p><p><span class="math display">\[w_i \leftarrow w_i + \Delta w_i \\\Delta w_i = \eta(y-\hat{y})x_i\]</span></p><p>其中<span class="math inline">\(\hat{y}\)</span>是感知机的输出, <span class="math inline">\(\eta\in(0, 1)\)</span>称为<strong>学习率</strong>(learning rate), 若预测正确, 则感知机不变, 若预测错误, 则根据错误程度调整权重.</p><h3 id="多层网络">多层网络</h3><p>若两类模式是线性可分的, 即存在一个线性超平面能将它们分开, 那么感知机的学习过程一定会<strong>收敛</strong>(converge), 从而求得合适的权值; 反之, 感知机的学习过程将会<strong>振荡</strong>(fluctuation), 难以求得合适的解.</p><p>若要解决非线性可分的问题, 就需要考虑使用多层<strong>功能神经元</strong>, 一般称输入层和输出层之间的一层神经元层为<strong>隐层或隐含层</strong>(hidden layer).</p><p>常见的神经元是层级结构的, 每层神经元与下一层的神经元全互连, 神经元之间不存在同层连接, 也不存在跨层连接, 这样的神经网络结构通常称为"<strong>多层前馈神经网络</strong>"(multi-layer feedforward neural networks). 其中输入层仅接收输入, 隐层与输出层使用功能神经元进行函数处理.</p><blockquote><p>"前馈"并不是信号不能向后传播, 而是指网络拓扑结构中不存在<strong>环</strong>或回路.</p></blockquote><img src="/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%A4%9A%E5%B1%82%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="多层前馈神经网络结构示意图"><p>(a)图可以称为"单隐层网络"或"两层网络". 我们的学习过程就是通过训练数据来调整神经元之间的连接权值(connection weight), 以及每个功能神经元的阈值, 看依旧是这权值和阈值.</p><h2 id="误差逆传播算法">5.3 误差逆传播算法</h2><p>对于多层的网络结构, 简单的感知机学习算法就不够使用了. 而<strong>误差逆传播</strong>(error BackPropagation, BP)算法是迄今为止最成功的神经网络学习算法.</p><p>为了说明<strong>BP算法</strong>, 先规定一些变量符号:</p><ol type="1"><li>训练集: <span class="math inline">\(D = \{(\boldsymbol{x}_1, \boldsymbol{y}_1), (\boldsymbol{x}_2, \boldsymbol{y}_2), \dots, (\boldsymbol{x}_m, \boldsymbol{y}_m)\}, \boldsymbol{x}_i \in \mathbb{R}^d, \boldsymbol{y}_i \in \mathbb{R}^l\)</span>.</li><li>输入层: 输入示例<span class="math inline">\(x\)</span>由<span class="math inline">\(d\)</span>个属性描述. 则输入层有<span class="math inline">\(d\)</span>个输入神经元.</li><li>输出层: 输出<span class="math inline">\(y\)</span>是<span class="math inline">\(l\)</span>维向量. 则输出层有<span class="math inline">\(l\)</span>个输出神经元. 第<span class="math inline">\(j\)</span>个神经元的<strong>阈值</strong>用<span class="math inline">\(\theta_j\)</span>表示.</li><li>隐层: 隐层<span class="math inline">\(b\)</span>假设使用<span class="math inline">\(q\)</span>个隐层神经元. 第<span class="math inline">\(h\)</span>个神经元的<strong>阈值</strong>使用<span class="math inline">\(\gamma_h\)</span>表示.</li><li>输入层--隐层: 输入层第<span class="math inline">\(i\)</span>个神经元与隐层第<span class="math inline">\(h\)</span>个神经元的<strong>权值</strong>使用<span class="math inline">\(v_{ih}\)</span>表示, 那么第<span class="math inline">\(h\)</span>个隐层神经元的总输入为<span class="math inline">\(\alpha_h = \sum\limits_{i=1}^d{(v_{ih}x_i)}\)</span>.</li><li>隐层--输出层: 隐层第<span class="math inline">\(h\)</span>个神经元与输出层第<span class="math inline">\(j\)</span>个神经元的<strong>权值</strong>使用<span class="math inline">\(w_{hj}\)</span>表示, 那么第<span class="math inline">\(j\)</span>个输出神经元的总输入为<span class="math inline">\(\beta_j = \sum\limits_{h=1}^q{(w_{hj}b_h)}\)</span>.</li><li>激活函数: 此处依旧使用<a href="#激活函数">sigmoid函数</a>.</li></ol><p>示意图如下:</p><img src="/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E7%BD%91%E7%BB%9C%E5%8F%8A%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E7%AC%A6%E5%8F%B7.png" class="" title="BP网络及算法中的变量符号.png"><h2 id="参数学习过程">5.3 参数学习过程</h2><p>其中需要确定的权值有<span class="math inline">\((dq+ql)\)</span>个, 阈值有<span class="math inline">\((q+l)\)</span>个.</p><p>同样假设输出为<span class="math inline">\(\hat{\boldsymbol{y}} = \{\hat{y}_1, \hat{y}_2, \dots, \hat{y}_l\}\)</span>, 其中<span class="math inline">\(\hat{y}_j = f(\beta_j-\theta_j)\)</span>.</p><p>其中对于<strong>第K例输入样本</strong>可以求出网络的<strong>均方误差</strong>为:</p><p><span class="math display">\[E_k = \frac{1}{2} \sum^l_{j=1}(\hat{y}_j-y_j)^2\]</span></p><p>将均方误差作为我们的损失函数, 与感知机的更新方法类似, 对任意参数<span class="math inline">\(\omega\)</span>, 更新估计式为</p><p><span class="math display">\[\omega \leftarrow \omega + \Delta \omega\]</span></p><p>也同样将阈值加入其中一起计算, 那么只需要估计<strong>两个参数</strong>即可, 即输入层神经元与隐层神经元的<strong>权值</strong><span class="math inline">\(v_{ih}\)</span>, 以及隐层神经元与输出层神经元的<strong>权值</strong><span class="math inline">\(w_{hj}\)</span>.</p><h3 id="梯度下降法求解">梯度下降法求解</h3><p>BP算法基于<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#梯度下降法">梯度下降法</a>(gradient descent), 以目标的负梯度方向对参数进行调整.</p><p>以隐层到输出层的权值<span class="math inline">\(w_{hj}\)</span>为例进行推导, 对于给定的学习率<span class="math inline">\(\eta\)</span>, 有</p><p><span class="math display">\[\Delta w_{hj} = -\eta \frac{\partial E_k}{\partial w_{hj}}\]</span></p><p>而我们注意到, 权值<span class="math inline">\(w_{hj}\)</span>先影响到输入总值<span class="math inline">\(\beta\)</span>, 然后影响到输出值<span class="math inline">\(\hat{y}_j\)</span>, 最后影响到误差<span class="math inline">\(E\)</span>, 由此展开有:</p><p><span class="math display">\[\frac{\partial E_k}{\partial w_{hj}} = \frac{\partial E_k}{\partial \hat{y}_j} \cdot \frac{\partial \hat{y}_j}{\partial \beta_j} \cdot \frac{\partial \beta_j}{\partial w_{hj}}\]</span></p><p>根据<span class="math inline">\(\beta_j\)</span>的定义, 显然有<span class="math inline">\(\frac{\partial \beta_j}{\partial w_{hj}} = b_h\)</span>.</p><p>又根据<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#sigmoid性质">Sigmoid函数的性质</a>, 有:</p><p><span class="math display">\[\begin{aligned}  g_j  &amp;= - \frac{\partial E_k}{\partial \hat{y}_j} \cdot \frac{\partial \hat{y}_j}{\partial \beta_j} \\  &amp;= -(\hat{y}_j-y_j)f'(\beta_j-\theta_j) \\  &amp;= (y_j-\hat{y}_j)\hat{y}_j(1-\hat{y}_j)\end{aligned}\]</span></p><p>由此可得权值<span class="math inline">\(w_{hj}\)</span>的更新公式</p><p><span class="math display">\[\Delta w_{hj} = \eta g_j b_h;\]</span></p><p>同理其他三个参数的更新公式, 此处不再赘述.</p><p>算法伪代码如下:</p><img src="/2022/01/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC05%E7%AB%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%AF%AF%E5%B7%AE%E9%80%86%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95.png" class="" title="误差逆传播算法.png"><blockquote><p>其中<strong>停止条件</strong>根据缓解BP的<strong>过拟合策略</strong>有关.</p></blockquote><h3 id="过拟合策略">过拟合策略</h3><p>由于表达效果往往非常好, 所以经常会遭遇<strong>过拟合</strong>的问题. 通常有两种策略来解决:</p><ol type="1"><li><p>第一种是早停(early stopping): 将数据集分为训练集和验证集, 当训练集误差降低但验证集误差升高时停止训练, 并返回具有最小验证集误差的连接权值和阈值.</p></li><li><p>第二种是正则化(regularization), 在误差函数中增加一个用于描述<strong>网络复杂度</strong>的部分, 使得训练过程中偏好较小的参数, 降低网络复杂度. 例如使用连接权值与阈值的平方和:</p><p><span class="math display">\[E = \lambda \frac{1}{m}\sum_{k=1}^m {E_k} + (1-\lambda) \sum_i{w_i^2}\]</span></p><p>其中的<span class="math inline">\(\lambda\)</span>是对<strong>经验误差</strong>和<strong>网络复杂度</strong>的折中, 通常用交叉验证来估计值.</p></li></ol><h3 id="不同的bp算法">不同的BP算法</h3><p>可以发现, 上述过程中我们是对<strong>每个训练样例</strong>来更新连接权值和阈值, 更新参数非常频繁, 不同样例的训练可能会对之前更新的效果进行<strong>抵消</strong>, 最终得到我们需要的积累误差:</p><p><span class="math display">\[E = \frac{1}{m}\sum_{k=1}^m {E_k}\]</span></p><p>所以为了积累误差达到极小值点, 往往需要<strong>更多次数的迭代</strong>, 这个方法称为『<strong>标准BP算法</strong>』.</p><p>类似的, 基于累积误差最小化的更新规则也可以推导出『<strong>累积BP算法</strong>』, 该方法直接针对累积误差最小化, 在读取整个训练集后才对参数进行更新, 更新参数频率低得多, 而且在很多任务中, 积累误差下降到一定之后,下一步下降会非常缓慢, 而此时的标准BP算法则可以更快的获得较好的解.</p><blockquote><p>区别类似于随机梯度下降算法(stochastic gradient descent, SGD)和标准梯度下降算法之间的区别.</p></blockquote><p>虽然两者都很常用, 但是在<strong>大数据集</strong>中, 标准BP算法的速度会更快.</p><h3 id="隐层神经元个数">隐层神经元个数</h3><p>有证明称, 只需要一个包含足够多神经元的隐层, 多层前馈网络就能以任意精度逼近任意复杂的连续函数.</p><p>但是如何设置神经元个数依旧没有定论, 一般使用『试错法』(trial-by-error)进行调整.</p><h2 id="个人收获">个人收获</h2><p>关于神经网络的学习, 之前在初步了解的时候被公式劝退, 这次再认真学习之后终于有些明朗了.</p><p>感知机中起作用的功能神经层只有输出层, 包括单隐层网络中输入层的结点仅起到输入作用, 所以这也是为什么明明<strong>画了三层</strong>网络,但是却叫<strong>双层网络</strong>的原因.</p><p>在学习公式推导之前一定要将符号弄清楚, 清楚符号的含义之后再推公式就清清楚楚了.</p><p>待更新: 关于全局最小和局部最小放在另外要写的<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#梯度下降法">梯度下降法</a>模块中再进一步阐述. 其他神经网络也有待进一步的学习, 最后向深度学习迈进.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于周志华老师编写的机器学习书籍『西瓜书』的第五章神经网络.&lt;/p&gt;
&lt;p&gt;主要的内容有: M-P神经元模型的构成、简单感知机和多层网络、以及著名BP算法的推导过程(激活函数是Sigmoid).&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
    <category term="神经网络" scheme="https://gipbear.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习西瓜书——第04章决策树</title>
    <link href="https://gipbear.github.io/2022/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC04%E7%AB%A0%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>https://gipbear.github.io/2022/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC04%E7%AB%A0%E5%86%B3%E7%AD%96%E6%A0%91/</id>
    <published>2022-01-19T16:06:16.000Z</published>
    <updated>2022-01-27T15:12:19.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于周志华老师编写的机器学习书籍『西瓜书』的第四章决策树的学习.</p><p>主要的内容有: 决策树的基本流程、信息熵、信息增益(ID3决策树)、信息增益率(C4.5决策树)和基尼指数(CART决策树)等.</p></blockquote><span id="more"></span><h2 id="基本流程模型">4.1 基本流程(模型)</h2><p>决策树(decision tree)是基于<strong>树结构</strong>来进行决策的, 是符合人类习惯的一种决策机制.</p><p>其中, 叶结点对应的是决策结果, 其他结点对应的是一个属性决策『决定按照什么属性, 将结点中的样本集合划分为子结点』, 从根结点到每个叶子结点的路径对应了一个决策序列.</p><p>既然是一棵树, 那么自然就符合递归的定义, 那么什么时候停止决策呢? 有如下三种情况:</p><ol type="1"><li>当前结点包含的样本均属于<code>同一标记</code>, 无需划分.</li><li>当前结点包含的样本均属于<code>同一属性</code>, 不可划分; 其归属标记为<strong>该结点</strong>中包含样本数量最多的标记.</li><li>当前结点样本集合为<code>空</code>, 不可划分; 其归属标记为<strong>父结点</strong>中包含样本数量最多的标记.</li></ol><blockquote><p>其中第三种情况我的理解是:</p><p>在父结点的样本中, 不存在该属性标记, 所以结点划分的时候该结点的样本为空, 但是我们依旧需要考虑这种情况, 因为我们是针对训练集进行的训练, 但是模型在应用的新样本中, 有可能会遇到该情况, 所以也需要考虑在分支上.</p><p>那如何归类呢? 就是按照父结点中样本数量最多的标记来标记该结点!</p></blockquote><p>我们的目的就是在生成树结点的过程中去做出<code>正确</code>的决策划分, 通过训练集构建的决策树需要能够在进行分类决策的时候<strong>泛化能力</strong>更强.</p><p>什么决策才是正确的决策呢?</p><h2 id="划分选择">4.2 划分选择</h2><p>正确的划分是将决策树的分支结点所包含的样本尽可能<strong>属于同一标记</strong>. 即, 结点的<strong>纯度</strong>(purity)最高.</p><h3 id="信息熵">信息熵</h3><p>想要度量结点的<code>纯度</code>, 我们一般使用<strong>信息熵</strong>(information entropy)这个指标.</p><blockquote><p>首先, 假设当前的样本集合<span class="math inline">\(D\)</span>中包含<span class="math inline">\(n\)</span>类样本，其中，第<span class="math inline">\(k\)</span>类样本所占的比例为<span class="math inline">\(p_k,(k=1, 2, 3, ···, n)\)</span>则D的信息熵定义为：</p></blockquote><p><span class="math display">\[Ent(D) = -\sum^n_{k=1} {p_k\log_2{p_k}}\]</span></p><p>其数值则表示数据的混乱程度，<code>信息熵值越大则数据越混乱</code>，则表示不确定性越大，所包含的信息量也就越大，也就越难决策。</p><blockquote><p>这里需要注意信息熵是<strong>负数</strong>.</p></blockquote><p>好嘞, 有了信息熵的基础, 那接下来我们就可以利用信息熵来构建决策树模型.</p><h3 id="信息增益id3决策树">信息增益(ID3决策树)</h3><p>有了信息熵的定义, 我们就可以计算<strong>当前结点</strong>对于分类信息的信息熵, 然后按照哪个属性进行划分呢? 这时候就需要使用到<strong>信息增益</strong>(information gain)了.</p><p>按照如下思路进行考虑:</p><ol type="1"><li><strong>目的</strong>: 我们的目的是找出最适合进行决策的<strong>属性</strong>;</li><li><strong>计算</strong>: 那么不妨假设按照<code>属性A</code>进行决策, 那么当前结点中属于<code>属性A</code>的样本中按照<span class="math inline">\(v\)</span>个<code>属性取值</code>计算得到的信息熵总和是多少呢?</li><li><strong>权重</strong>: 由于属于<code>属性A</code>中每个<code>属性取值</code>的样本个数不同, 那么对于信息熵总和的影响自然也就不同, 所以在计算的时候需要赋予一定的权重, 最简单的就是第v个属性取值占该属性样本的比重<span class="math inline">\(\frac{|D^v|}{|D|}\)</span></li><li><strong>循环</strong>: 依次类推计算当前结点各个属性的信息熵.</li><li><strong>结果</strong>: 所以, 信息增益就是用<strong>当前结点</strong>的信息熵, 分别减去<strong>按照各个属性</strong>决策的信息熵总和, 由于这里是<strong>减</strong>, 自然是选择<strong>信息增益越大</strong>的属性越好啦!</li></ol><p>得到的信息增益计算公式:</p><p><span class="math display">\[Gain(D,a) = Ent(D) - \sum_{v=1}^V{\frac{|D^v|}{|D|}Ent(D^v)}\]</span></p><p>著名的<strong>ID3决策树</strong>就是使用信息增益来实现属性划分的.</p><h3 id="增益率c4.5决策树">增益率(C4.5决策树)</h3><p>但是我们容易发现, 若将『编号』这种属性进行计算的时候</p><p><span class="math display">\[\begin{aligned}Gain(D,编号)&amp;= Ent(D) - \sum_{v=1}^V{\frac{1}{V}Ent(1)} \\&amp;= Ent(D) - Ent(1) \\&amp;= Ent(D)\end{aligned}\]</span></p><p>很明显这种取值不重复的属性的信息增益极大, 换句话说, 是『<strong>属性取值很多</strong>』的属性, 但这很明显不符合我们的预期, 因为我们都知道编号这种属性基本上是没有意义的.</p><p>由此, 我们引入了<strong>信息增益率</strong>(gain ratio)的概念.</p><p>那么我们理解一下是什么是信息增益率? 信息增益自然就是上面提到的部分, 那么『率』呢? 就需要相对于某个值了.</p><p>这里引入一个属性"<strong>固有值</strong>"(intrinsic value)的概念:</p><p><span class="math display">\[IV(a) = -\sum_{v=1}^V {\frac{|D^v|}{|D|}\log_2{\frac{|D^v|}{|D|}}}\]</span></p><blockquote><p>是不是跟信息增益很相似? 类比一下: 这就是衡量该属性取值的『混乱程度』, 数值越大越混乱, 自然就越不能要.</p></blockquote><p>所以将信息增益率定义为:</p><p><span class="math display">\[Gain_ratio(D, a) = \frac{Gain(D, a)}{IV(a)}\]</span></p><p>由于固有值在分母, 所以信息增益率整体会偏好选择属性数目较少的属性.</p><p>著名的<strong>C4.5决策树</strong>就是利用了信息增益率的方法来实现决策树的, 但不是直接选择增益率最大的属性, 而是使用<strong>启发式</strong>的方法: 先选择<strong>信息增益</strong>高于平均水平的属性, 再从中选择出<strong>增益率</strong>最高的.</p><h3 id="基尼指数cart决策树">基尼指数(CART决策树)</h3><p>最后要提的就是<strong>基尼指数</strong>(Gini index)了, 这是使用了一个与信息熵类似的概念——基尼值, 它们都是来衡量数据集的<code>纯度</code>.</p><p><span class="math display">\[\begin{aligned}Gini(D)&amp;= \sum^n_{i=1}\sum_{j\neq{i}}{p_ip_j}&amp;= 1 - \sum^n_{i=1}{p_i^2}\end{aligned}\]</span></p><p>正如公式表示的, 基尼值反映了在样本中随机抽取两个样本, 其标记不一致的概率. 反过来就是用<code>1</code>减去<code>一致</code>的概率, 同样考虑样本个数<strong>权重</strong>的影响, 得到基尼指数计算公式:</p><p><span class="math display">\[Gini_index(D, a) = \sum^V_{v=1}{\frac{|D^v|}{|D|}Gini(D^v)}\]</span></p><p>著名的<strong>CART决策树</strong>就是使用了基尼指数来划分属性的.</p><h2 id="个人收获">个人收获</h2><p>学习了决策树模型的三种建模方式, 起码知道了ID3有比较明显的缺陷, 所以一般可以使用C4.5或CART决策树.</p><p>决策树一般不会直接使用, 多使用在森林等集成算法中, 之后再进一步学习.</p><p>关于后续的剪枝处理也会抽空尽快学习.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于周志华老师编写的机器学习书籍『西瓜书』的第四章决策树的学习.&lt;/p&gt;
&lt;p&gt;主要的内容有: 决策树的基本流程、信息熵、信息增益(ID3决策树)、信息增益率(C4.5决策树)和基尼指数(CART决策树)等.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
    <category term="决策树" scheme="https://gipbear.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>cpp数据结构之vector的常见用法</title>
    <link href="https://gipbear.github.io/2022/01/19/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bvector%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
    <id>https://gipbear.github.io/2022/01/19/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bvector%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-19T12:34:03.000Z</published>
    <updated>2022-02-12T07:18:28.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于c++中常用的数组<code>vector</code>的一些常见用法的总结, 主要是一些常用的调用方法, 主要是我的平时的<a href="https://gipbear.github.io/tags/leetcode题解/">leetcode题解</a>中经常会使用的.</p></blockquote><span id="more"></span><h2 id="数组-vector">数组 vector</h2><p>一般大家应该都学习过C语言, 在C语言中, <strong>数组</strong>通常使用<code>int[]</code>来表示, 但是在使用的过程中, 通常会出现一些麻烦(大佬轻喷), 比如静态初始化大小不能直接使用参数而是一个常量, 动态申请空间需要使用<code>malloc</code>等. 虽然手动分配内存可能会给代码带来一定的效率提升, 但是复杂的细节操作让我这个从<code>python</code>转来刷题应试的小白很难接受呀.</p><p>所以一般直接使用标准库提供的<code>vector</code>(很多人都是这么建议的), 这个是比<code>int[]</code>更加的高级的容器, 可以自动扩容, 让你不需要操心细节, 非常nice<span class="github-emoji"><span>👨💻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>!</p><p>那么接下来我们来看一下vector的一些常见用法吧:</p><h2 id="常见用法">常见用法</h2><p>首先需要导入标准库</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化">初始化</h3><p>一维数组初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; res1;  <span class="comment">//简单初始化一个空数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res2</span><span class="params">(n+<span class="number">1</span>)</span></span>;  <span class="comment">//初始化大小为 n+1 大小的数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res3</span><span class="params">(n+<span class="number">1</span>, <span class="number">666</span>)</span></span>;  <span class="comment">//初始化大小为 n+1 大小的数组, 初始值为 666</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res4{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>};  <span class="comment">// 直接初始化内容</span></span><br></pre></td></tr></tbody></table></figure><p>二维数组初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res1;  <span class="comment">// 初始化一个二维数组;</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">res2</span>(m, vmctor&lt;<span class="keyword">int</span>&gt;(n, <span class="number">2</span>));  <span class="comment">// 初始化一个二维数组, 大小为m*n, 默认值为2.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置大小</span></span><br><span class="line">res.<span class="built_in">resize</span>(m, vector&lt;<span class="keyword">int</span>&gt;(n));</span><br></pre></td></tr></tbody></table></figure><p>其中的元素也可以是其他类型, 例如<code>string</code>, <code>bool</code>等.</p><h3 id="查询属性">查询属性</h3><ol type="1"><li><p><strong>数组大小</strong></p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">size</span>();  <span class="comment">// 返回数组的大小</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>判断数组是否为空</strong></p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">empty</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>返回数组头的指针</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">begin</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>返回数组尾+1的指针, 注意是指向<strong>最后的后一个</strong>, 也就是空</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">end</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>得到数组头的引用</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">front</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>得到数组尾的引用</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">back</span>();</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h3 id="增删改查">增删改查</h3><ol type="1"><li><p><strong>增加元素</strong></p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">push_back</span>(元素);  <span class="comment">// 在尾部插入一个元素</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>删除元素</strong></p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">pop_back</span>(元素);  <span class="comment">// 删除最后一个元素</span></span><br><span class="line">res.<span class="built_in">erase</span>(res.<span class="built_in">begin</span>() + i);  <span class="comment">// 删除第i个元素</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>修改元素</strong></p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res[pos] = 值;  <span class="comment">//  直接在第pos个位置修改为某个值</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>查找元素(按索引查找)</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res[pos];  <span class="comment">// 直接查找第pos个位置的元素</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>那如果想查找值是否在数组中(按值查找) <code>vector</code>没有直接的方法, 就需要使用标准库中的find方法来查找(这也是我写这篇的起因, 以后还有不懂的就加进来).</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span>  <span class="comment">// 首先必须导入标准库, 该库提供了大量基于迭代器的模板函数</span></span></span><br><span class="line"><span class="built_in">find</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>(), key);  <span class="comment">// 返回范围内第一个等于给定key的元素位置指针, 一般用于判断是否存在</span></span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><h3 id="其他">其他</h3><ol type="1"><li><p>重新定义数组大小</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">resize</span>(m);  <span class="comment">// 数组大小重新定义为m</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>清空数组</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">clear</span>();  <span class="comment">// 清空数组</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>与另一个数组交换数据</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">swap</span>(res1, res2);  <span class="comment">// res1与res2交换数组</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>数组求和</strong> 需要借助库函数<code>numeric</code>实现</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>)  <span class="comment">// 从0为基准开始求和</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><strong>数组排序</strong> 需要借助库函数<code>algorithm</code>实现</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());  <span class="comment">// 数组升序</span></span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());  <span class="comment">// 数组降序</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>对于二维数组, 也可以自定义cmp函数, 实现一列升序, 一列降序的方法.</p><p></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照第一列降序排序</span></span><br><span class="line"><span class="comment">// 第一列相等按照第二列升序</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] != b[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), cmp);</span><br></pre></td></tr></tbody></table></figure><p></p></li></ol><p>以上<strong>加粗</strong>的也是比较常用的, 其实也很简单啦, 不用很复杂的操作.</p><h2 id="个人收获">个人收获</h2><p>这些方法对比<code>python</code>的<code>list</code>来学其实很简单, 只不过换了一个函数名而已, 当然还是有很多操作不一样, 比如指针操作, 记住就好了, 积少成多, 熟能生巧!</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于c++中常用的数组&lt;code&gt;vector&lt;/code&gt;的一些常见用法的总结, 主要是一些常用的调用方法, 主要是我的平时的&lt;a href=&quot;https://gipbear.github.io/tags/leetcode题解/&quot;&gt;leetcode题解&lt;/a&gt;中经常会使用的.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言特性" scheme="https://gipbear.github.io/categories/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="c++" scheme="https://gipbear.github.io/tags/c/"/>
    
    <category term="vector" scheme="https://gipbear.github.io/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中可能会使用的理论</title>
    <link href="https://gipbear.github.io/2022/01/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%8F%AF%E8%83%BD%E4%BC%9A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%90%86%E8%AE%BA/"/>
    <id>https://gipbear.github.io/2022/01/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%8F%AF%E8%83%BD%E4%BC%9A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%90%86%E8%AE%BA/</id>
    <published>2022-01-17T12:24:01.000Z</published>
    <updated>2022-01-27T15:12:46.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于一些西瓜书学习过程中的一些数学理论的汇总.</p></blockquote><span id="more"></span><h2 id="线性可分和线性模型1">线性可分和线性模型<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></h2><p>线性可分是指可以使用一个<strong>线性函数</strong>(二维的是直线, 三维的是平面等更高维的线性函数), 将两类样本分开.</p><p>线性模型并不是说一定要使用线性函数去拟合数据, 这是一个<strong>误区</strong>, 区分模型是否线性, 主要是看模型中的自变量<span class="math inline">\(x\)</span>前的系数<span class="math inline">\(w\)</span>, <strong>一个<span class="math inline">\(x\)</span>只受一个<span class="math inline">\(w\)</span>影响</strong>, 那么模型就是线性模型!</p><p>例如有一个模型的函数是:<span class="math inline">\(y = w_0 + w_1x + w_2x^2\)</span>, 很明显是一个非线性的二次方函数, 但是若我们令<span class="math inline">\(x_1 = x, x_2 = x^2\)</span>, 那么模型的函数就可以转化为<span class="math inline">\(y = w_0 + w_1x_1 + w_2x_2\)</span>, 从而变成了一个线性函数, 也就是线性模型.</p><h2 id="分类变量化为连续值2">分类变量化为连续值<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></h2><p>有时我们的有些数据可能是离散的, 这时候我们会考虑将数据化为<strong>连续值</strong>.</p><ul><li>在<strong>有序</strong>(order)数据中, 比如"低" "中" "高"等, 可以使用<span class="math inline">\(\{0, 0.5, 1\}\)</span>来表示.<ul><li>直接使用<code>map</code>映射, 或使用<code>LabelEncoder</code>.</li></ul></li><li>在<strong>无序</strong>数据中, 比如"西瓜" "南瓜" "冬瓜"等, 就需要使用<span class="math inline">\((1,0,0), (0,1,0), (0,0,1)\)</span>来表示.<ul><li>独热编码<code>OneHotEncoder</code>或 pandas 中的<code>get_dummies</code>.</li></ul></li></ul><blockquote><p>无序属性在连续化的时候, 不能像连续值一样直接使用值代替, 因为值之间存在大小, 从而会引入<strong>不当的有序关系</strong>.</p><p>但其实对分类变量化为连续值, 或多或少会引入一些额外的有序关系.</p></blockquote><h2 id="广义特征值与广义瑞利商3">广义特征值与广义瑞利商<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></h2><p>广义特征值和广义瑞利商在<a href="https://gipbear.github.io/2022/01/14/机器学习西瓜书——第03章线性模型/">机器学习西瓜书——第03章线性模型</a>中有涉及</p><h3 id="广义特征值">广义特征值</h3><p>设<span class="math inline">\(\boldsymbol{A}\)</span>, <span class="math inline">\(\boldsymbol{B}\)</span>为<span class="math inline">\(n\)</span>阶方阵, 若存在数<span class="math inline">\(\lambda\)</span>, 使得方程<span class="math inline">\(\boldsymbol{A}x = \lambda \boldsymbol{B}x\)</span>存在非零解, 则称<span class="math inline">\(\lambda\)</span>为<span class="math inline">\(\boldsymbol{A}\)</span>相对于<span class="math inline">\(\boldsymbol{B}\)</span>的<strong>广义特征值</strong>, <span class="math inline">\(x\)</span>为<span class="math inline">\(\boldsymbol{A}\)</span><strong>相对于</strong><span class="math inline">\(\boldsymbol{B}\)</span>的属于广义特征值<span class="math inline">\(\lambda\)</span>的<strong>特征向量</strong>.</p><p>当<span class="math inline">\(\boldsymbol{B} = \boldsymbol{I}\)</span>(单位矩阵) 时, 广义特征值退化为标准特征值问题.</p><h3 id="广义瑞利商">广义瑞利商</h3><blockquote><p>其实准确来说是在厄密矩阵下的, 我们仅考虑实数域, 那么就退化为<strong>对称矩阵</strong>.</p></blockquote><p>设<span class="math inline">\(\boldsymbol{A}\)</span>, <span class="math inline">\(\boldsymbol{B}\)</span>为<span class="math inline">\(n\)</span>阶对称矩阵, 且<span class="math inline">\(\boldsymbol{B}\)</span>正定, 称<span class="math inline">\(R(\boldsymbol{x}) = \frac{\boldsymbol{x}^TA\boldsymbol{x}}{\boldsymbol{x}^TB\boldsymbol{x}}(\boldsymbol{x}\neq \boldsymbol{0})\)</span>为<span class="math inline">\(\boldsymbol{A}\)</span><strong>相对于</strong><span class="math inline">\(\boldsymbol{B}\)</span>的<strong>广义瑞利商</strong>.</p><p>当<span class="math inline">\(\boldsymbol{B} = \boldsymbol{I}\)</span>(单位矩阵) 时, 广义瑞利商退化为瑞利商.</p><h4 id="广义瑞利商性质">广义瑞利商性质</h4><p>知道了广义瑞利商的形式, 那么我们可以直接应用它的性质:</p><p>设<span class="math inline">\(\lambda_i, \boldsymbol{x}_i(i = 1,2,3,\dots,n)\)</span>为<span class="math inline">\(\boldsymbol{A}\)</span>相对于<span class="math inline">\(\boldsymbol{B}\)</span>的广义特征值和特征向量, 且<span class="math inline">\(\lambda_1\leq\lambda_2\leq\dots\leq\lambda_n\)</span>. 那么就有:</p><p><span class="math display">\[\min_{\boldsymbol{x}\neq\boldsymbol{0}}{R(\boldsymbol{x})} = \frac{\boldsymbol{x}^TA\boldsymbol{x}}{\boldsymbol{x}^TB\boldsymbol{x}} = \lambda_1, \boldsymbol{x}^* = \boldsymbol{x}_1; \\\max_{\boldsymbol{x}\neq\boldsymbol{0}}{R(\boldsymbol{x})} = \frac{\boldsymbol{x}^TA\boldsymbol{x}}{\boldsymbol{x}^TB\boldsymbol{x}} = \lambda_n, \boldsymbol{x}^* = \boldsymbol{x}_n;\]</span></p><blockquote><p>更一般来说, 就是前<span class="math inline">\(k\)</span>个大的广义瑞利商对应于其前k个大的广义特征值.</p></blockquote><p>证明的话就可以使用下面的<strong>拉格朗日乘子法</strong>: 当固定<span class="math inline">\(\boldsymbol{x}^TB\boldsymbol{x} = 1\)</span>时, 使用拉格朗日乘子法可推得<span class="math inline">\(\boldsymbol{A}x = \lambda \boldsymbol{B}x\)</span>这样一个广义特征值的问题, 因此, <span class="math inline">\(\boldsymbol{x}\)</span>的所有可能的解即为<span class="math inline">\(\boldsymbol{x}_i(i=1,2,\dots,n)\)</span>这<span class="math inline">\(n\)</span>个广义特征向量, 将其带入<span class="math inline">\(R(\boldsymbol{x})\)</span>就可以得到结论.</p><blockquote><p>固定<span class="math inline">\(\boldsymbol{x}^TB\boldsymbol{x} = 1\)</span>并不关心其值, 而需要的是比值, 这里做的是一般性假设, 也可以令分子为1, 但是令分母为1可以使得更加简化, 不必纠结.</p></blockquote><p>之前在线性判别分析中使用的<a href="https://gipbear.github.io/2022/01/14/机器学习西瓜书——第03章线性模型/#损失函数策略">损失函数</a>中<span class="math inline">\(\max{J}\)</span>的形式就是广义瑞利商. 西瓜书后续还有的多分类问题其实就可以根据广义瑞利商的性质来说明.</p><h2 id="sigmoid函数">Sigmoid函数</h2><p>对于阶跃函数, 具有不光滑不连续的数学性质, 对模型不友好, 所以经常使Sigmoid函数『像S型的函数』来代替. 多使用于神经网络, 在逻辑回归中也有使用.</p><p><span class="math display">\[f(x)=\frac{1}{1+e^{-\lambda x}}\]</span></p><p>其中系数<span class="math inline">\(\lambda\)</span>决定着S函数的<code>压缩程度</code>。该函数的特点是，它是有上、下界，单调增长，连续光滑的，即是连续可微的。它可使同一网络既能处理小信号，也能处理大信号，因为该函数中区的<code>高增益</code>部分解决了小信号需要高放大倍数的问题；而两侧的<code>低增益</code>区正好适于处理大的净输入信号。这正像生物神经元在输入电平范围很大的情况下也能正常工作一样。</p><h3 id="sigmoid性质">Sigmoid性质</h3><p>Sigmoid还有一个很好的性质:</p><p><span class="math display">\[f'(x) = \lambda f(x)(1-f(x))\]</span></p><p>当前<span class="math inline">\(\lambda = 1\)</span>时, 则有</p><p><span class="math display">\[f'(x) = f(x)(1-f(x))\]</span></p><h2 id="优化问题">优化问题</h2><h3 id="拉格朗日乘子法">拉格朗日乘子法</h3><p>拉格朗日乘数法在考研数学中其实做过题目, 还是比较简单的套路, 这里只不过是扩充到了向量形式.</p><p>对于仅含等式约束的优化问题:</p><p><span class="math display">\[\begin{aligned}\min_{\boldsymbol{x}} \quad &amp;{f(\boldsymbol{x})} \\s.t. \quad &amp;h_i(\boldsymbol{x} = 0) \quad i=1,2,\dots,n\end{aligned}\]</span></p><p>其中自变量<span class="math inline">\(\boldsymbol{x}\in\mathbb{R}^n\)</span>, <span class="math inline">\(f(\boldsymbol{x})\)</span>和<span class="math inline">\(h(\boldsymbol{x}_i)\)</span>均一阶连续可偏导. 那么就可以写成拉格朗日函数:</p><p><span class="math display">\[L(\boldsymbol{x}, \boldsymbol{\lambda}) = f(\boldsymbol{x}) + \sum^n_{i=1}{\lambda_ih_i(\boldsymbol{x})}\]</span></p><p>其中的<span class="math inline">\(\boldsymbol{\lambda}=(\lambda_1, \lambda_2, \dots, \lambda_n)^T\)</span>为拉格朗日乘子.</p><p>对其求偏导, 并令为0, 再搭配约束条件<span class="math inline">\(h_i(\boldsymbol{x})=0\)</span>, 可以解出<span class="math inline">\(\boldsymbol{x}\)</span>为上述优化问题的所有可能的<strong>极值点</strong>.</p><p>这就是拉格朗日乘子法, 用来求<strong>仅含等式约束</strong>的优化问题.</p><h3 id="梯度下降法">梯度下降法</h3><p>梯度下降法(gradient descent)是一种常用的一阶(first-order)优化方法, 求解<strong>无约束</strong>优化问题最简单最经典的方法之一.</p><p>考虑无约束优化问题<span class="math inline">\(\min\limits_{\boldsymbol{x}} f(\boldsymbol{x})\)</span>, 其中<span class="math inline">\(f(\boldsymbol{x})\)</span>连续可微, 那么若能构造一个序列<span class="math inline">\(\boldsymbol{x}^0,\boldsymbol{x}^1,\dots\)</span>使得</p><p><span class="math display">\[f(\boldsymbol{x}^t+1) &lt; f(\boldsymbol{x}^t), \quad t = 0,1,2...\]</span></p><p>那么通过不断执行该过程就可以收敛到<strong>局部极小</strong>点.</p><p>根据泰勒展开式有:</p><p><span class="math display">\[f(\boldsymbol{x}+\Delta\boldsymbol{x}) \approxeq f(\boldsymbol{x}) + \Delta \boldsymbol{x}^T\nabla f(\boldsymbol{x})\]</span></p><p>欲使得<span class="math inline">\(f(\boldsymbol{x}+\Delta\boldsymbol{x}) &lt; f(\boldsymbol{x})\)</span>, 则可以选择<span class="math inline">\(\Delta\boldsymbol{x} = -\gamma\nabla f(\boldsymbol{x})\)</span>. 其中步长<span class="math inline">\(\gamma\)</span>是一个小常数.</p><p>每步的步长可以不同, 选取合适的步长来确保使得梯度下降收敛到局部极小值, 太大的步长容易产生<strong>振荡</strong>, 太小的步长则收敛速度<strong>较慢</strong>, 所以需要选取合适的步长, 常设置为<code>0.1</code>. 特别地, 若f(x)满足<strong>L-lipschitz条件</strong>, 那么将步长设置为<span class="math inline">\(\frac{1}{2L}\)</span>就可以确保收敛到局部最小值.</p><blockquote><p>L-lipschitz条件是指, 对任意<span class="math inline">\(\boldsymbol{x}\)</span>, 存在常数<span class="math inline">\(L\)</span>, 使得<span class="math inline">\(\|\nabla f(\boldsymbol{x})\|\leq L\)</span>. 这个在毕设中使用过, 效果还是不错的!</p></blockquote><p>以上所说的都是局部极小点, 因为我们可能陷入一个"低谷"无法下降, 所以当目标函数为<strong>凸函数</strong>时, 我们就可以收敛到<strong>全局最优</strong>解了.</p><blockquote><p>二阶(以后接触再详细表述): 当目标函数<span class="math inline">\(f(\boldsymbol{x})\)</span>二阶连续可导时, 使用二阶泰勒展开式得到牛顿法(Newton's method), 迭代轮数更少, 但使用复杂的海森矩阵求逆运算, 计算复杂度高, 高维问题几乎不可行, 除非找到近似逆矩阵来代替, 这就是拟牛顿法(quasi-Newton method).</p></blockquote><h2 id="参考资料">参考资料</h2><section class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1" role="doc-endnote"><p>海绵彭帆.理解线性可分和线性不可分与机器学习什么叫线性模型[EB/OL].https://blog.csdn.net/qq_45079973/article/details/104051441, 2020.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p>周志华.机器学习[M].北京: 清华大学出版社, 2016: 53-54.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p>二次元的Datawhale.【吃瓜教程】《机器学习公式详解》（南瓜书）与西瓜书公式推导直播合集 第3章-二分类线性判别分析[EB/OL].https://www.bilibili.com/video/BV1Mh411e7VU?p=5, 2021.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于一些西瓜书学习过程中的一些数学理论的汇总.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ML理论" scheme="https://gipbear.github.io/tags/ML%E7%90%86%E8%AE%BA/"/>
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>机器学习西瓜书——第03章线性模型</title>
    <link href="https://gipbear.github.io/2022/01/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC03%E7%AB%A0%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>https://gipbear.github.io/2022/01/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC03%E7%AB%A0%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-01-14T10:35:28.000Z</published>
    <updated>2022-01-27T15:12:23.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于周志华老师编写的机器学习书籍『西瓜书』的第三章线性模型.</p><p>主要的内容有: 线性回归的基本形式、最小二乘法、广义线性回归、对数几率回归（逻辑回归）、最大似然估计、线性判别分析、广义瑞利商、拉格朗日乘子法等.</p></blockquote><span id="more"></span><h2 id="基本形式">3.1 基本形式</h2><p>线性模型(linear model)是一个通过属性的线性组合来进行预测的函数, 形如:</p><p><span class="math display">\[f(x) = w_{1}x_{1} + x_{2}w_{2} + \dots + w_{d}x_{d} + b\]</span></p><p>其中<span class="math inline">\(x_i\)</span>表示第<span class="math inline">\(i\)</span>个属性值.</p><p>容易发现, 每个<span class="math inline">\(w_i\)</span>都表示了属性的权重, 这使得建立的模型有很好的<strong>可解释性</strong>(comprehensibility).</p><p>一般可以写成<strong>向量</strong>形式:</p><p><span class="math display">\[f(x) = \boldsymbol{w}^{T}\boldsymbol{x} + b\]</span></p><p>那么我们的目的就是学习得到<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>来确定模型.</p><h2 id="线性回归">3.2 线性回归</h2><p>线性回归是来学习一个线性模型, 来预测<strong>连续值</strong>. 使得预测的连续值<span class="math inline">\(f(x_i)\)</span>尽可能是与真实值<span class="math inline">\(y_i\)</span>接近, 即, 使得<span class="math inline">\(f(x_i) \approxeq y_{i}\)</span>.</p><h3 id="最小二乘法">最小二乘法</h3><p>那么我们如何来衡量<span class="math inline">\(f(x_i)\)</span>与<span class="math inline">\(y_i\)</span>之间的差距呢, 这时候可以上文提过的<a href="https://gipbear.github.io/2022/01/11/机器学习西瓜书——第02章模型评估和选择/#性能度量">均方误差(MSE)</a>来衡量<span class="math inline">\(f(x_i)\)</span>与<span class="math inline">\(y_i\)</span>之间的差距. 并使其最小化, 就可以得到我们先想要的<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>:</p><p><span class="math display">\[\begin{aligned}(w^*, b^*)&amp;= \argmin_{(\boldsymbol{w}, b)}{\sum^m_{i=1}{(f(x_i)-y_i)^2}} \\&amp;= \argmin_{(\boldsymbol{w}, b)}{\sum^m_{i=1}{(y_i-wx_i-b)^2}}\end{aligned}\]</span></p><blockquote><p>这就是<strong>最小二乘法</strong>(least square method): 使用均方误差这个具有几何意义的<strong>欧氏距离</strong>来度量差距.</p></blockquote><p>OK, 那么我们下一步就是如何求解<span class="math inline">\(E_{(w,b)}= {\sum^m_{i=1}{(y_i-wx_i-b)^2}}\)</span>最小值了, 这一步叫做最小二乘的<strong>参数估计</strong>(parameter estimate), 对<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>和b分别求偏导, 并令为零可以得到<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>的最优解:</p><p><span class="math display">\[w = \frac{\sum\limits^m_{i=1}{y_i(x_i-\bar{x})}}{\sum\limits^m_{i=1}{x_i^2}-\frac{1}{m}(\sum\limits^m_{i=1}{x_i})^2}\]</span></p><p><span class="math display">\[b = \frac{1}{m}\sum^m_{i=1}{(y_i-wx_i)}\]</span></p><h3 id="矩阵形式">矩阵形式</h3><p>当我们将数据扩展为矩阵形式, 把<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>写入向量形式<span class="math inline">\(\boldsymbol{w} = (\boldsymbol{w}, b)\)</span>, 相应地, 把数据集<span class="math inline">\(D\)</span>表示为一个<span class="math inline">\(m*(d+1)\)</span>大小的矩阵<span class="math inline">\(\boldsymbol{X}\)</span>, 其中每一行代表一个实例，每行前d个元素对应实例中的d个属性, 最后一个元素恒为1. <span class="math display">\[\boldsymbol{X} =\begin{pmatrix}x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d} &amp; 1 \\x_{21} &amp; x_{22} &amp; \cdots &amp; x_{2d} &amp; 1 \\\vdots &amp; \vdots &amp;  &amp; \vdots &amp; \vdots \\x_{m1} &amp; x_{m2} &amp; \cdots &amp; x_{md} &amp; 1 \\\end{pmatrix} =\begin{pmatrix}\boldsymbol{x_1}^T &amp; 1 \\\boldsymbol{x_2}^T &amp; 1 \\\vdots &amp; \vdots \\\boldsymbol{x_m}^T &amp; 1 \\\end{pmatrix}\]</span></p><p>再将输入也写成向量形式</p><p><span class="math display">\[\boldsymbol{y} = (y_1, y_2, \cdots, y_m)\]</span></p><p>根据均方差误差最小化原则有:</p><p><span class="math display">\[\boldsymbol{w}^\ast = arg \min_w(\boldsymbol{y}-\boldsymbol{X}\boldsymbol{w})^T(\boldsymbol{y}-\boldsymbol{X}\boldsymbol{w})\]</span></p><p>令<span class="math inline">\(\boldsymbol{E_w} = (\boldsymbol{y}-\boldsymbol{X}\boldsymbol{w})^T(\boldsymbol{y}-\boldsymbol{X}\boldsymbol{w})\)</span>, 对<span class="math inline">\(\boldsymbol{w}\)</span>求导得到</p><p><span class="math display">\[\frac{\partial\boldsymbol{E_w}}{\partial\boldsymbol{w}} = 2\boldsymbol{X}^{T}(\boldsymbol{X}\boldsymbol{w}-\boldsymbol{y})\]</span></p><p>令其为零可得到<span class="math inline">\(\boldsymbol{W}\)</span>的最优解的闭式解。</p><p>以上是当矩阵<span class="math inline">\(X^TX\)</span><strong>满秩(可逆)</strong>时进行的计算, 而实际中, 很多的数据矩阵是<strong>非满秩</strong>的, 则有可能会解出多个解, 那么选择解由学习算法的归纳偏好决定, 常见做法是引入<strong>正则化</strong>.</p><h3 id="广义线性回归">广义线性回归</h3><p>以上我们针对的是一个简单线性回归的模型, 显然预测得到的标记一定是一个线性的结果.</p><blockquote><p>此时我们实验中获得了一组数据, 通过观察是符合<strong>指数</strong>函数形式的, 很明显是一个非线性的标记序列, 那这时是否可以使用线性回归呢?</p></blockquote><p>答案是可以的.</p><p>我们对标记<span class="math inline">\(y\)</span>取<code>ln函数</code>, 这时就会发现:</p><p><span class="math display">\[\ln{y} = \boldsymbol{w}^{T}\boldsymbol{x} + b\]</span></p><p>这就是<strong>对数线性回归</strong>, 在形式上我们可以使用线性回归进行表示, 但本质上却实现了非线性回归. 发生这时神奇变化的东西就是<code>ln</code>这个<strong>单调可微函数</strong>.</p><p>由此推到<strong>广义线性模型</strong>(generalized linear model), 使用单调可微函数<span class="math inline">\(g(\cdot)\)</span>来将预测值和实际值联系起来.</p><p><span class="math display">\[y = g^{-1}(\boldsymbol{w}^{T}\boldsymbol{x} + b)\]</span></p><h2 id="对数几率回归">3.3 对数几率回归</h2><p><strong>对数几率回归</strong>也就是我们之前经常听说的<strong>逻辑回归</strong>. 但是逻辑(logistic)其实并不合适, 而对数几率(log odds, logit)才是这个模型的本质, 下面详细介绍.</p><p>我们在上面所提到的广义线性回归中, 使用一个特定的函数来代替单调可微函数<span class="math inline">\(g^{-1}(\cdot)\)</span>——<strong>sigmoid函数</strong>.</p><p><span class="math display">\[y = \frac{1}{1+e^{-z}}\]</span></p><img src="/2022/01/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC03%E7%AB%A0%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/%E5%8D%95%E4%BD%8D%E9%98%B6%E8%B7%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E6%95%B0%E5%87%A0%E7%8E%87%E5%87%BD%E6%95%B0.png" class="" title="单位阶跃函数与对数几率函数.png"><p>这是一个形如s型曲线的图像, 通过设置不同的<strong>阈值</strong>, 使得取值被划分为0或1, 所以这也是为什么虽然叫做回归函数, 却经常被用作<strong>分类</strong>.</p><h3 id="模型的表示模型">模型的表示(模型)</h3><p>将线性模型带入sigmoid函数中, 可以得到:</p><p><span class="math display">\[y = \frac{1}{1+e^{-(\boldsymbol{w}^{T}\boldsymbol{x} + b)}}\]</span></p><p>通过变化得到:</p><p><span class="math display">\[\ln{\frac{y}{1-y}} = \boldsymbol{w}^{T}\boldsymbol{x} + b\]</span></p><p>此时很关键的一步:</p><ul><li>将<span class="math inline">\(y\)</span>视作样本<span class="math inline">\(\boldsymbol{x}\)</span>为正例的可能性, 用后验概率表示为<span class="math inline">\(p(y=1|\boldsymbol{x})\)</span>;</li><li>将<span class="math inline">\(1-y\)</span>视作样本<span class="math inline">\(\boldsymbol{x}\)</span>为反例的可能性, 用后验概率表示为<span class="math inline">\(p(y=0|\boldsymbol{x})\)</span>.</li></ul><blockquote><p>我们所谓的"几率"就是<span class="math inline">\(\frac{y}{1-y}\)</span>, <strong>反映了x作为正例的相对可能性</strong>. 再取对数, 所以就称为对数几率!</p></blockquote><h3 id="最大似然估计策略">最大似然估计(策略)</h3><p>那么问题回到如何确定模型中的<span class="math inline">\(\boldsymbol{w}\)</span>和<span class="math inline">\(b\)</span>呢? 我们这里使用<strong>最大似然估计</strong>来解释, 同样的还可以使用信息论的角度来解释.</p><p>根据以上的内容, 可以将模型表达写成:</p><p><span class="math display">\[p(y=1|\boldsymbol{x}) = \frac{e^{\boldsymbol{w}^{T}\boldsymbol{x} + b}}{1+e^{\boldsymbol{w}^{T}\boldsymbol{x} + b}}\]</span></p><p><span class="math display">\[p(y=0|\boldsymbol{x}) = \frac{1}{1+e^{\boldsymbol{w}^{T}\boldsymbol{x} + b}}\]</span></p><p>通过极大似然估计法, 并取对数就可以得到:</p><p><span class="math display">\[\begin{aligned}L(\boldsymbol{w}, b) &amp;= \prod^m_{i=1}{p(y_i|\boldsymbol{x}_i;w,b)} \\l(\boldsymbol{w}, b) &amp;= \sum^m_{i=1}{\ln{[y_ip_1(\hat{\boldsymbol{x}}_i;\boldsymbol{w}, b) + (1-y_i)p_0(\hat{\boldsymbol{x}}_i;\boldsymbol{w}, b)]}}\end{aligned}\]</span></p><p>其中<span class="math inline">\(p_1\)</span>是<span class="math inline">\(p(y=1|\boldsymbol{x};\boldsymbol{w}, b)\)</span>, <span class="math inline">\(p_0\)</span>是<span class="math inline">\(p(y=0|\boldsymbol{x};\boldsymbol{w}, b)\)</span>.</p><p>为了便于讨论, 令<span class="math inline">\(\beta=(\boldsymbol{x};b), \hat{\boldsymbol{x}}=(\boldsymbol{x};1)\)</span>, 使得<span class="math inline">\(\boldsymbol{w}^{T}\boldsymbol{x} + b\)</span>可以表示为<span class="math inline">\(\beta^T\boldsymbol{x}\)</span>. 再分别令<span class="math inline">\(y_i\)</span>为0或1:</p><p><span class="math display">\[l(\beta) =\begin{cases}\sum\limits^m_{i=1}{- \ln{(1+e^{\beta^T\boldsymbol{x}_i})}}, \qquad &amp;y_i = 0 \\\sum\limits^m_{i=1}{\beta^T\boldsymbol{x}_i - \ln{(1+e^{\beta^T\boldsymbol{x}_i})}}, \qquad &amp;y_i = 1\end{cases}\]</span></p><p>综合可得如下式子, 并且将其取负数得最小化:</p><p><span class="math display">\[l(\beta) = -\sum^m_{i=1}{[y_i\beta^T\boldsymbol{x}_i - \ln{(1+e^{\beta^T\boldsymbol{x}_i})}]}\]</span></p><p>这就是关于<span class="math inline">\(\beta\)</span>的高阶可导凸函数, 使用梯度下降等优化理论方法进行求解即可.</p><h3 id="模型的优点">模型的优点</h3><ol type="1"><li>该模型直接对分类的可能性进行建模, 也没有要求数据分布, 避免假设数据分布带来的不确定性问题;</li><li>而且得到了近似概率预测, 对许多需要利用概率辅助决策的任务有很大的帮助;</li><li>求解的目标函数是任意阶可导的凸函数, 有很好的数学性质, 许多值优化算法都可以用来求解最优解.</li></ol><h2 id="线性判别分析">3.4 线性判别分析</h2><p>线性判别分析(linear Discrimination Analysis, LDA)是一种典型的二分类方法.</p><p>主要思想是: 在给定的训练样本集中, 试图寻找一条直线, 并让所有的样本点投影到该直线上, 其中<strong>同类样本点的投影之间尽可能的接近, 异类样本点的投影之间尽可能远离</strong>.当需要对新样本进行分类时, 同样将新样本投影到该直线上, 根据其位置判断属于哪一类.</p><img src="/2022/01/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC03%E7%AB%A0%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/LDA%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="LDA示意图.png"><h3 id="针对二分类问题模型">针对二分类问题(模型)</h3><p>接下来, 首先对一些符号进行说明. 数据集: <span class="math inline">\(D=\{(\boldsymbol{x}_i,y_i)\}^m_{i=1}\)</span>, 其中标记取值为0或1: <span class="math inline">\(y_i=\{0,1\}\)</span>, 第<span class="math inline">\(i=\{0, 1\}\)</span>类示例的集合为<span class="math inline">\(X_i\)</span>, 均值向量为<span class="math inline">\(\mu_i\)</span>, 协方差矩阵为<span class="math inline">\(\Sigma_i\)</span>.</p><blockquote><p>协方差矩阵<span class="math inline">\(\Sigma\)</span>(读<code>Sigma</code>)与求和符号<span class="math inline">\(\sum\)</span>(读<code>sum</code>)还是不一样的,注意通过上下文进行区分.</p><p>协方差矩阵表示的是各个<strong>属性</strong>之间的相关性, 为0表示不相关. 因此协方差矩阵的大小与属性的个数有关, 而与样本的个数无关.</p></blockquote><p>根据以上对符号的定义,</p><ol type="1"><li>将样本点投影到直线上得到: <span class="math inline">\(\boldsymbol{w}^T\mu_0\)</span> 和 <span class="math inline">\(\boldsymbol{w}^T\mu_1\)</span>;</li><li>将所有样本点投影到直线上得到两类样本的协方差为: <span class="math inline">\(\boldsymbol{w}^T\Sigma_0\boldsymbol{w}\)</span> 和 <span class="math inline">\(\boldsymbol{w}^T\Sigma_1\boldsymbol{w}\)</span>.</li></ol><p>由于我们的目的是使得两类样本之间的距离尽可能的大, 而样本内的距离尽可能的小, 那么就需要使得<span class="math inline">\(\|\boldsymbol{w}^T\mu_0 - \boldsymbol{w}^T\mu_1\|^2_2\)</span>尽可能的大, 而<span class="math inline">\(\boldsymbol{w}^T\Sigma_0\boldsymbol{w} + \boldsymbol{w}^T\Sigma_1\boldsymbol{w}\)</span>尽可能的小.</p><blockquote><p><span class="math inline">\(\|X\|^2_2这叫做二范数的平方, 表示向量之间的距离, 可以使用向量的内积进行计算\)</span></p></blockquote><p>我们需要注意 <span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ! 我们的目的是为了求出投影直线的<strong>方向</strong>, 所以<span class="math inline">\(\boldsymbol{w}\)</span>的大小无关紧要, 这也是下面很多步骤中的必要条件.</p><h3 id="损失函数策略">损失函数(策略)</h3><p>同时考虑以上两者, 可以得到我们的最大化目标:</p><p><span class="math display">\[\begin{aligned}\max J &amp;= \frac{\|\boldsymbol{w}^T\mu_0 - \boldsymbol{w}^T\mu_1\|^2_2}{\boldsymbol{w}^T\Sigma_0\boldsymbol{w} + \boldsymbol{w}^T\Sigma_1\boldsymbol{w}} \\&amp;= \frac{\|(\mu_0-\mu_1)^T\boldsymbol{w}\|^2_2}{\boldsymbol{w}^T(\Sigma_0+\Sigma_1)\boldsymbol{w}} \\&amp;= \frac{w^T (\mu_0-\mu_1)(\mu_0-\mu_1)^T \boldsymbol{w}}{\boldsymbol{w}^T(\Sigma_0+\Sigma_1)\boldsymbol{w}}\end{aligned}\]</span></p><p>并定义"类内散度矩阵"(within-class scatter matrix): <span class="math inline">\(\boldsymbol{S}_w = \Sigma_0 + \Sigma_1\)</span>, "类间散度矩阵"(between-class scatter matrix): <span class="math inline">\(\boldsymbol{S}_b = (\mu_0-\mu_1)(\mu_0-\mu_1)^T\)</span>.</p><p>那么上式可以表示为:</p><p><span class="math display">\[\max J = \frac{\boldsymbol{w}^T \boldsymbol{S}_b \boldsymbol{w}}{\boldsymbol{w}^T \boldsymbol{S}_w \boldsymbol{w}}\]</span></p><p>以上这个最大化的目标函数其实就是<span class="math inline">\(\boldsymbol{S}_b\)</span>与<span class="math inline">\(\boldsymbol{S}_w\)</span>的"<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#广义瑞利商">广义瑞利商</a>".</p><p>并注意到我们需要求解的<span class="math inline">\(\boldsymbol{w}\)</span>只与方向有关, 而与大小无关, 那么不失一般性的, 可以令分母<span class="math inline">\(\boldsymbol{w}^T \boldsymbol{S}_w \boldsymbol{w}=1\)</span>, 由此等价于:</p><p><span class="math display">\[\begin{aligned}  \min_{\boldsymbol{w}}\quad&amp;{-\boldsymbol{w}^T \boldsymbol{S}_b \boldsymbol{w}} \\  s.t. \quad &amp;\boldsymbol{w}^T \boldsymbol{S}_w \boldsymbol{w}=1\end{aligned}\]</span></p><h3 id="拉格朗日乘子法求解">拉格朗日乘子法(求解)</h3><p>关于这种<strong>仅含有等式约束</strong>的问题, 可以使用<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#拉格朗日乘子法">拉格朗日乘子法</a>进行求解.</p><p>即, 可得:</p><p><span class="math display">\[L(\boldsymbol{w}, \lambda) = -\boldsymbol{w}^T \boldsymbol{S}_b \boldsymbol{w} + \lambda(\boldsymbol{w}^T \boldsymbol{S}_w \boldsymbol{w} - 1)\]</span></p><p>再对<span class="math inline">\(\boldsymbol{w}\)</span>求偏导可得:</p><p><span class="math display">\[\frac{\partial{L(\boldsymbol{w}, \lambda)}}{\partial{\boldsymbol{w}}} = -(\boldsymbol{S}_b+\boldsymbol{S}_b^T)\boldsymbol{w} + \lambda(\boldsymbol{S}_w+\boldsymbol{S}_w^T)\boldsymbol{w}\]</span></p><p>令等式为0可得:</p><p><span class="math display">\[\boldsymbol{S}_b\boldsymbol{w} = \lambda\boldsymbol{S}_w\boldsymbol{w}\]</span></p><p>因为<span class="math inline">\((\mu_0-\mu_1)^T\boldsymbol{w}\)</span>为实数, 所以<span class="math inline">\(\boldsymbol{S}_b\boldsymbol{w} = (\mu_0-\mu_1)(\mu_0-\mu_1)^T\boldsymbol{w}\)</span>的方向恒为<span class="math inline">\((\mu_0-\mu_1)\)</span>, 所以可以解得:</p><p><span class="math display">\[\boldsymbol{w} = \boldsymbol{S}^{-1}_w(\mu_0-\mu_1)\]</span></p><blockquote><p>可以发现, 我们求得的<span class="math inline">\(\boldsymbol{w}\)</span>的值, 就是<span class="math inline">\(\boldsymbol{S}_b\)</span>对应于<span class="math inline">\(\boldsymbol{S}_b\)</span>的广义特征值对应的特征向量</p></blockquote><h3 id="多分类问题">多分类问题</h3><p>而多分类的问题中, 只不过是求矩阵<span class="math inline">\(\boldsymbol{W}\)</span>, 使得<span class="math inline">\(\boldsymbol{S}_b\boldsymbol{W} = \lambda\boldsymbol{S}_w\boldsymbol{W}\)</span>.</p><p>我们将<span class="math inline">\(\boldsymbol{W}\)</span>拆分为多个二分类问题可得: <span class="math inline">\(\boldsymbol{W} = \{\boldsymbol{w}_1, \boldsymbol{w}_1, \dots, \boldsymbol{w}_n\}\)</span>, 结合<a href="https://gipbear.github.io/2022/01/17/机器学习中可能会使用的理论/#广义特征值与广义瑞利商">广义特征值与广义瑞利商的性质</a>可以得到<span class="math inline">\(\boldsymbol{W}\)</span>其实就是<span class="math inline">\(\boldsymbol{S}_b\)</span>相对于<span class="math inline">\(\boldsymbol{S}_w\)</span>最大的非零广义特征值所对应的特征向量组成的矩阵!</p><h2 id="个人收获">个人收获</h2><ol type="1"><li>从单纯的线性模型, 推广到广义的线性模型, 再引出特殊的对数几率回归模型. 从特殊到一般再到特殊的方式, 很好的理清楚了简单线性回归和逻辑回归之间的关系.</li><li>逻辑回归真正的名字应该是对数几率回归, 这对记忆和理解模型都有更好的可解释性.</li><li>线性判别分析法这次终于学明白了! 从"模型-策略-求解"三方面进行学习果然思路清楚了很多.</li><li>公式的推导依旧有难度, 目前处于抛开书想不到怎么推, 但结合西瓜书和南瓜书还是能够看懂推导过程.</li></ol><p>继续加油!</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于周志华老师编写的机器学习书籍『西瓜书』的第三章线性模型.&lt;/p&gt;
&lt;p&gt;主要的内容有: 线性回归的基本形式、最小二乘法、广义线性回归、对数几率回归（逻辑回归）、最大似然估计、线性判别分析、广义瑞利商、拉格朗日乘子法等.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
    <category term="线性模型" scheme="https://gipbear.github.io/tags/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>机器学习西瓜书——第02章模型评估和选择</title>
    <link href="https://gipbear.github.io/2022/01/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC02%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E5%92%8C%E9%80%89%E6%8B%A9/"/>
    <id>https://gipbear.github.io/2022/01/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC02%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E5%92%8C%E9%80%89%E6%8B%A9/</id>
    <published>2022-01-11T11:36:17.000Z</published>
    <updated>2022-01-27T15:12:28.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于周志华老师编写的机器学习书籍『西瓜书』的第二章模型评估和选择.</p><p>主要的内容有: 经验误差与过拟合、模型的评估方法(留出法/交叉验证/自助法)、性能度量(查准率/查全率/F1/ROC曲线等), 部分内容待更新.</p></blockquote><span id="more"></span><h2 id="经验误差与过拟合">2.1 经验误差与过拟合</h2><h3 id="误差">误差</h3><p><strong>错误率</strong>: 分类错误的样本数 <span class="math inline">\(a\)</span> 占样本总数 <span class="math inline">\(m\)</span> 的比例称为"错误率"(error rate).</p><p><span class="math display">\[error rate = \frac{a}{m}\]</span></p><p>与之相对的是<strong>精度</strong>(accuracy):</p><p><span class="math display">\[accuracy = 1 - \frac{a}{m}\]</span></p><p>学习器在训练集上的误差称为<strong>训练误差</strong>(training error)或<strong>经验误差</strong>(empirical error); 而在新样本上的误差称为<strong>泛化误差</strong>(generalization error).</p><blockquote><p>我们最『想』得到『泛化误差』尽可能的小, 但是我们在训练的时候并不知道新样本, 所以『实际上』能做的是使得『经验误差』尽可能的小.</p></blockquote><h3 id="过拟合">过拟合</h3><p>当我们训练模型学习训练样本的时候, 将训练样本学的"太好", 除了学习到数据集的普遍规律, 还将训练数据集的一些自身特点学习到了, 导致泛化性能下降, 这种现象称为<strong>过拟合</strong>(overfitting); 反之就是<strong>欠拟合</strong>(underfitting), 训练样本的普遍规律也没有学会.</p><blockquote><p>简单来说就是: 只会硬板照抄的学生 和 不好好学习的后进生.</p></blockquote><p>欠拟合是学习的不够好, 一般来说比较好解决, 例如在决策树中扩展分支, 在神经网络中增加训练轮数等.</p><p>但是过拟合却是<strong>不可避免的</strong>, 只能做到缓解和减小其风险. 因为机器学习面临的问题是NP难, 但是有效算法是在有限时间内完成的, 不能完成 <span class="math inline">\(NP=P\)</span> 的证明.</p><p>那么, 实际上有各种算法以及各种参数来训练模型, 如何选择? 这就是模型选择; 如何评估模型训练的好坏呢? 这就模型评估.</p><h2 id="评估方法">2.2 评估方法</h2><p>通过实验, 设置测试组对学习器的泛化误差来对模型进行选择. 需要一个测试集(testing set), 在学习器上得到的测试误差(testing error)与泛化误差近似.</p><blockquote><p>保证测试集中的数据尽可能未在训练集中出现.</p></blockquote><p>那么对于一个包含m个样本数据集D, 既要训练, 又要测试, 那么需要合适的划分方法得到训练集和测试集.</p><h3 id="留出法hold-out">留出法(hold-out)</h3><p>留出法<strong>直接</strong>将数据集<strong>划分</strong>为两个互斥的集合, 一个作为训练集S, 一个作为测试集T.</p><p>需要注意的是: 训练集和测试集的划分要尽可能的保持<strong>数据分布一致</strong>, 避免因为数据划分过程引入额外的偏差, 从而对最终的结果产生影响.</p><blockquote><p>例如将男性的数据集作为训练集, 然后去评估女性的数据集得到的泛化误差, 很明显是不合理的. 应尽量保持男女同比例.</p></blockquote><p>一般划分数据的时候保留类别比例, 通常称为"分层采样"(stratified sampling). 虽然按照比例进行划分比较合适, 但是依旧可能会出现一些问题.</p><blockquote><p>例如购物消费数据降序排序, 划分前70%作为训练集,后30%作为测试集. 虽然此时男女比例可能是等比例划分的, 但是消费能力却是截然不同, 所以这种方式显然还欠缺考虑.</p></blockquote><p>所以在使用留出法的时候, 通常使用<strong>若干次随机抽样</strong>的方式进行划分, 然后对这几次的评估数据<strong>取均值</strong>.</p><p>以上是为了更好使用留出法的一些方法, 但是留出法本身有一个<strong>固有缺陷</strong>: 训练集S较大时, 模型可以训练的更接近数据集D的模型, 但测试集T较小, 导致评估结果不够稳定; 若测试集T大了, 那么训练集S训练出的模型可能和数据集D差别较大, 从而降低了评估结果的保真性(fidelity).</p><p>但是也没有完美的解决方法, 一般划2/3~4/5进行训练, 剩余作为测试.</p><h3 id="交叉验证cross-validation">交叉验证(cross validation)</h3><p>先将数据集划分为k个大小相同的互斥子集, 每个子集尽可能保持数据分布的一致性(分层抽样). 每次使用k-1个子集进行训练, 剩下的一个子集作为测试集. 从而获得k次测试结果并取均值. 所以通常也称为<strong>k-折交叉验证</strong>(k-fold cross validation).</p><p>同样的, 为减小样本划分带来的影响, 通常使用p次随机划分, 然后取这p次k折交叉验证结果的均值.</p><blockquote><p>其中, 若令k=m,那么则会得到<strong>留一法</strong>(Leave-One-Out, LOO), 显然由于划分唯一, 不受随机划分的影响. 实际效果和训练集几乎相似, 但是同样有一个固有缺陷: 数据集较大时, 训练时间开销太大.</p><p>所以: <strong>没有免费的午餐</strong>定理同样适用.</p></blockquote><h3 id="自助法bootstrapping">自助法(bootstrapping)</h3><p>对给定的包含m个样本的数据集D, 进行m次<strong>抽样放回</strong>的过程, 得到数据集D'. 这个过程会使得某些样本可能会出现多次, 而某些样本却不会出现. 简单估计始终不被抽样的概率是<span class="math inline">\((1-\frac{1}{m})^m\)</span>, 取极限得到:</p><p><span class="math display">\[\lim_{m\rightarrow \infin}{(1-\frac{1}{m})^m} \rightarrowtail \frac{1}{e} \approx 0.368\]</span></p><p>将未出现约36.8%的数据作为测试集即可, 那么训练模型的时候使用m个样本作为训练集,测试集依旧有约1/3的数据作为测试.</p><blockquote><p>在数据集较小, 难以有效划分的时候比较有效.</p><p>并能从初始数据集中产生多个不同的训练集, 对于集成学习等方法有很大好处.</p></blockquote><p>但在划分的时候改变了初始数据集的分布, 引入估计偏差, 所以在数据量足够的时候, 留出法和交叉验证更常用.</p><h3 id="调参与最终模型">调参与最终模型</h3><p>大部分的学习算法都需要一些参数进行设定, 参数的配置不同, 学习的模型往往有显著差距, 对参数(parameter)进行设定的过程称为参数调节或调参(parameter tuning).</p><p>参数是在一定范围内进行取值, 并根据一定的步长进行调节. 那么我们最终的参数也只可能在我们划分的<strong>离散值</strong>中, 往往不一定能够达到"最佳", 但这也平衡了开销和性能.</p><p>我们的调参是根据训练集S进行调参的, 最终的模型应该更根据选定的参数在<strong>完整的数据集</strong>中进行测试, 将最终的结果进行提交.</p><blockquote><p>通常将实际中遇到的数据称为测试数据, 而模型评估和选择中使用的数据集称为<strong>验证集</strong>(validation set).</p></blockquote><h2 id="性能度量">2.3 性能度量</h2><p>那么对机器学习训练泛化性能的评估, 就是接下来的性能度量(performance measure). 不同的性能度量得到的评判标准也不同, 所以模型的"好坏"是相对的, 取决于算法和数据, 还取决于模型的任务需求.</p><p>回归任务常用<strong>均方误差</strong>(mean squared error, MSE):</p><p><span class="math display">\[E(f; D) = \frac{1}{m} \sum^m_{i=1}{(f(x_i)-y_i)^2}\]</span></p><p>其中, <span class="math inline">\(f(x_i)\)</span>是模型对样本<span class="math inline">\(x_i\)</span>的预测, <span class="math inline">\(y_i\)</span>是真实标记.</p><h3 id="查准率查全率与f1">查准率、查全率与F1</h3><p>我们关心的问题有时候不仅仅是错误率或精度.</p><blockquote><p>例如我们不关心有多少比例的瓜判断错误, 而更加关心挑出的西瓜中有多少的比例是好瓜.</p></blockquote><p>此时就引入了查准率(precision)和查全率(recall):</p><ul><li><strong>查准率</strong>: 预测为正例中有多少是真的正例;</li><li><strong>查全率</strong>: 实际为正例的有多少被预测为正例.</li></ul><p>对于二分类问题, 可将结果分为: 真正例(true positive)、假正例(false positive)、真反例(true negative)和假反例(false negative). 由此组成<strong>混淆矩阵</strong>(confusion matrix).</p><img src="/2022/01/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC02%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E5%92%8C%E9%80%89%E6%8B%A9/%E6%B7%B7%E6%B7%86%E7%9F%A9%E9%98%B5.png" class="" title="混淆矩阵.png"><p><span class="math display">\[查准率P = \frac{TP}{TP+FP}\]</span></p><p><span class="math display">\[查全率R = \frac{TP}{TP+FN}\]</span></p><p>这两个度量往往相互制约, 总是一高一低.</p><p>我们对学习器的预测样例的结果进行排序, 排在前面的样例认为是"最可能"为正例的样本, 按顺序逐个把样本作为正例进行预测, 则每个可计算出当前的查全率和查准率. 以此作为坐标轴可以绘制"P-R曲线".</p><img src="/2022/01/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC02%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E5%92%8C%E9%80%89%E6%8B%A9/P-R%E5%9B%BE.png" class="" title="P-R图.png"><p>根据曲线, 我们可以发现A和B曲线<strong>包含</strong>C曲线, 那么可以认为训练得到曲线C的模型相对较差; 而A和B曲线发生了<strong>交叉</strong>, 那么性能的优劣则不好判断.</p><p>引入"平衡点"(Break-Event Point, BEP)的概念, 在『查全率=查准率』处取得平衡点, 那么可以认为 A 优于 B.(挺草率的说)</p><p>更常用的是F1常量:</p><p><span class="math display">\[F1 = 2 \times \frac{1}{\frac{1}{P} + \frac{1}{R}} = \frac{2 \times P \times R}{P + R}\]</span></p><p>在特定场景, 模型对于查全率和查准率的要求不同, 所以会赋予不同的权重来进行调整, 使得更符合模型的需求.</p><p><span class="math display">\[F_\beta = \frac{(1+\beta^2) \times P \times R}{(\beta^2 \times P) + R}\]</span></p><h4 id="多分类">多分类</h4><p>以上是针对二分类问题提出了混淆矩阵, 那么对于多分类问题呢?</p><p>一种方法是两两形成混淆矩阵, 先计算得到各自的查全率和查准率, <strong>再将取均值</strong>, 得到"宏查准率"(macro-P)和"宏查全率"(macro-R), 再计算"宏F1"(macro-F1).</p><p>还有一种方法是各个混淆矩阵元素<strong>先取均值</strong>, 得到TP、FP、TN、FN的均值, 然后再基于这些均值计算得到"微查准率"(micro-P)和"微查全率"(micro-R), 再计算"微F1"(micro-F1).</p><h3 id="roc与auc">ROC与AUC</h3><p>很多的学习器是为了产生一个预测实值或概率预测, 然后将该概率预测与一个分类<strong>阈值</strong>(threshold)进行比较, 对测试样本进行排序, 最有可能的正例排在前面, 最不可能的正例排在最后面, 通过阈值将样本分为两部分.</p><p>一般情况下, 我们根据任务需求来采用不同的截断点. 更重视"查准率", 则选择排序靠前的位置进行截断, 更重视"查全率", 则选择排序靠后的位置进行截断. 那么对<strong>排序质量</strong>的好坏直接影响了学习器在不同任务下的<strong>泛化性能</strong>的好坏. ROC曲线就是来研究学习器泛化性能的有力工具.</p><p>『ROC曲线』原理与『P-R曲线』类似, 对学习器的预测样例的结果进行排序, 排在前面的样例认为是"最可能"为正例的样本, 按顺序逐个把样本作为正例进行预测, 则每个可计算出当前的<strong>真正例率</strong>(True Positive Rate, TPR)和<strong>假正例率</strong>(False Positive Rate, FPR):</p><ul><li>真正例率: 实际正例预测为正例的数量占所有实际正例的比例;</li><li>假正例率: 实际反例预测为正例的数量占所有实际反例的比例.</li></ul><p><span class="math display">\[TPR = \frac{TP}{TP + FN}\]</span></p><p><span class="math display">\[FPR = \frac{FP}{TN + FP}\]</span></p><img src="/2022/01/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E2%80%94%E2%80%94%E7%AC%AC02%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E5%92%8C%E9%80%89%E6%8B%A9/ROC%E6%9B%B2%E7%BA%BF%E4%B8%8EAUC.png" class="" title="ROC曲线与AUC.png"><p>如果要比较不同学习器的优劣, 就看ROC曲面下的<strong>面积AUC</strong>(Area Under ROC Curve).</p><h3 id="代价敏感错误率与代价曲线">代价敏感错误率与代价曲线</h3><p>// todo</p><h2 id="比较检验">2.4 比较检验</h2><p>假设检验</p><p>交叉验证 t 检验</p><p>McNemar 检验</p><p>Friedman 检验与 Nemenyi 后续检验</p><h2 id="偏差与方差">2.5 偏差与方差</h2><h2 id="个人收获">个人收获</h2><p>这一章主要是在讲如何对数据集进行划分, 如何评估模型的性能, 包括我还没完全捋清楚的假设检验部分, 都是在对模型性能的好坏进行评价, 对模型的可行性, 真实性进行分析.</p><p>这些东西正是之后支撑我们来判断一个模型是好是坏, 是否可行的依据. 目前只是大概的了解了概念, 到了实际应用的时候还是要回过头来回顾前两章.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于周志华老师编写的机器学习书籍『西瓜书』的第二章模型评估和选择.&lt;/p&gt;
&lt;p&gt;主要的内容有: 经验误差与过拟合、模型的评估方法(留出法/交叉验证/自助法)、性能度量(查准率/查全率/F1/ROC曲线等), 部分内容待更新.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://gipbear.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="西瓜书" scheme="https://gipbear.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
    <category term="模型评估" scheme="https://gipbear.github.io/tags/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/"/>
    
  </entry>
  
  <entry>
    <title>单链表解题技巧4——反转链表</title>
    <link href="https://gipbear.github.io/2022/01/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A74%E2%80%94%E2%80%94%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://gipbear.github.io/2022/01/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A74%E2%80%94%E2%80%94%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2022-01-11T10:44:35.000Z</published>
    <updated>2022-01-11T11:20:17.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于单链表的反转问题, 存在反转全部链表和部分区间链表的情况.</p><p>涉及 leetcode 的<a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a>和<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a>.</p></blockquote><span id="more"></span><h2 id="反转链表">反转链表</h2><h3 id="题目1">题目1</h3><p>首先来看题目<a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a>: 给你单链表的头节点 head , 请你反转链表, 并返回反转后的链表.</p><p>示例1:</p><blockquote><p>输入: head = [1,2,3,4,5]</p><p>输出: [5,4,3,2,1]</p></blockquote><p>示例2:</p><blockquote><p>输入: head = []</p><p>输出: []</p></blockquote><h3 id="理解一下1">理解一下1</h3><p>反转很好理解, 链表本来是指向其<strong>唯一后继</strong>, 现在只不过是去指向其<strong>唯一前趋</strong>.</p><p>基本的思路是:</p><ol type="1"><li>需要三个指针, 一个指向前趋, 一个指向当前结点, 一个指向后继;</li><li>然后循环迭代, 变换指针的移动即可.</li></ol><p>以上的是最基本的迭代思维, 那么尝试使用递归的思想来解决呢?</p><ol type="1"><li>首先递归反转某个结点后的所有链表;</li><li>直至base case: 空链或唯一结点;</li><li>然后将反转后的链表与该结点连接上即可.</li></ol><h3 id="解题1">解题1</h3><p>首先是迭代的算法:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode *h = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode * p = head, *q = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;next != <span class="literal">nullptr</span>){</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        p-&gt;next = h;</span><br><span class="line">        h = p;</span><br><span class="line">        p = q;</span><br><span class="line">    }</span><br><span class="line">    p-&gt;next = h;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后是递归的解法, 最后三行不好理解的话画个图就知道了:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>){</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 使用last指向翻转head后的链表</span></span><br><span class="line">    ListNode *last = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">    <span class="comment">// 这里需要画个图才能解释</span></span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    <span class="comment">// 最后head去指向空</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反转部分链表">反转部分链表</h2><h3 id="题目2">题目2</h3><p>首先来看题目<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a>: 给你单链表的头指针 head 和两个整数 left 和 right, 其中 left &lt;= right . 请你反转从位置 left 到位置 right 的链表节点, 返回<strong>反转后的链表</strong>.</p><p>示例1:</p><blockquote><p>输入: head = [1,2,3,4,5], left = 2, right = 4</p><p>输出: [1,4,3,2,5]</p></blockquote><p>示例2:</p><blockquote><p>输入: head = [5], left = 1, right = 1</p><p>输出: [5]</p></blockquote><h3 id="理解一下2">理解一下2</h3><p>与上一题不同的是, 这题需要将链表的部分区间进行翻转, 这就需要将链表分为三个部分处理: 前部分-翻转部分-后部分, 这会显得比较麻烦.</p><p>那么我们考虑一个问题: <strong>反转链表前N个结点</strong>, 那么链表就只需要分为: 翻转部分-后部分, 相比而言简单一些了.</p><p>反转前N个结点的基本的思路是:</p><ol type="1"><li>通过N设置对反转<strong>结束</strong>的判断, 同时需要一个指针来表示<strong>后继</strong>;</li><li>与第一题一样翻转;</li></ol><p>那么对于我们的区间就很简单了:</p><ol type="1"><li>不断递归或迭代后移至需要反转的结点;</li><li>然后不就是<strong>反转链表前N个结点</strong>的问题嘛!</li></ol><h3 id="解题2">解题2</h3><p>由于结点和指针相对较多, 要仔细判断清楚.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(left == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverseTopN</span>(head, right);</span><br><span class="line">    head-&gt;next = <span class="built_in">reverseBetween</span>(head-&gt;next, left<span class="number">-1</span>, right<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ListNode * rest;</span><br><span class="line"><span class="function">ListNode* <span class="title">reverseTopN</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>){</span><br><span class="line">        rest = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode * last = <span class="built_in">reverseTopN</span>(head-&gt;next, n<span class="number">-1</span>);</span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    head-&gt;next = rest;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="个人收获">个人收获</h2><p>在这里反转链表的问题上, 迭代和递归的时间复杂度都是O(n), 所以选择使用哪个都差不多, 但是递归的空间复杂度却是O(n), 所以实际应用的时候还是迭代较好.</p><p>不过这里让我对递归有了更好的认知, 写递归函数, 就是要<strong>相信这个递归函数可以做到它该做的</strong>, 然后我们将<code>base case</code>和其他需要准备的做好就可以了, 剩下的就相信它!</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是关于单链表的反转问题, 存在反转全部链表和部分区间链表的情况.&lt;/p&gt;
&lt;p&gt;涉及 leetcode 的&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot;&gt;206. 反转链表&lt;/a&gt;和&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list-ii/&quot;&gt;92. 反转链表 II&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构算法" scheme="https://gipbear.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="c++" scheme="https://gipbear.github.io/tags/c/"/>
    
    <category term="单链表" scheme="https://gipbear.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
    <category term="leetcode题解" scheme="https://gipbear.github.io/tags/leetcode%E9%A2%98%E8%A7%A3/"/>
    
    <category term="迭代和递归" scheme="https://gipbear.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
</feed>
